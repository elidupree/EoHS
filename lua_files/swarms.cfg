 this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- swarms.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,gui,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,gui,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil


--TODO put this in a more appropriate file
EoHS.priority_queue = function(priority_func)
  local function heap_insert(h,v,priority)
    h.size = h.size + 1
    if h.top_priority < priority then
      local temp = h.top
      local tempp = h.top_priority
      h.top = v
      h.top_priority = priority
      v = temp
      priority = tempp
    end
    
    local child1 = h.child1
    if not child1 then
      h.child1 = {size=1,top=v,top_priority=priority}
      return
    end
    local child2 = h.child2
    if not child2 then
      h.child2 = {size=1,top=v,top_priority=priority}
      return
    end
    heap_insert((child1.size <= child2.size) and child1 or child2,v,priority)
  end
  local function heap_pop(h)
    h.size = h.size - 1
    local childname
    local child1 = h.child1
    if not child1 then childname = "child2"
    else
      local child2 = h.child2
      if not child2 then childname = "child1"
      else childname = (child1.top_priority > child2.top_priority) and "child1" or "child2" end
    end
    local child = h[childname]
    h.top=child.top; h.top_priority=child.top_priority
    if child.size == 1 then h[childname] = nil
    else heap_pop(child) end
  end
  local heap
  return {
    insert = function(v,priority)
      priority = priority or (priority_func and priority_func(v) or v)
        if not heap then heap = {size=1,top=v,top_priority=priority}
      else heap_insert(heap, v, priority) end
    end,
    top = function() return heap and heap.top end,
    pop = function()
      if heap then
        local result = heap.top
        if heap.size == 1 then heap = nil
        else heap_pop(heap) end
        return result
      end
    end,
  }
end

EoHS.attack_priority = function(unit, wunit, dst_x, dst_y, victim, wvictim)
-- TODO put wunit at proper location
  local attack_num = 1
  local best_num
  local best_priority = 0
  for attack in wml.child_range(unit, "attack") do
    local priority = EoHS.synchronize_if_needed(function()
      EoHS.simplify_simulated_combats = true
      local att_stats, def_stats = wesnoth.simulate_combat(wunit, attack_num, wvictim)
      EoHS.simplify_simulated_combats = nil
      local   our_power = ((wvictim.hitpoints-def_stats.average_hp)/wvictim.max_hitpoints + def_stats.hp_chance[0])*victim.cost
      local their_power = ((wunit  .hitpoints-att_stats.average_hp)/wunit  .max_hitpoints + att_stats.hp_chance[0])*unit  .cost
      local result
      if unit.race == "undead" then
        -- Zombies are stupid and will attack suicidally
        their_power = their_power + unit.cost -- "we're probably going to die anyway on their turn"
        result = 1000 * our_power / their_power
      else
        -- Rats etc. still don't value their own lives much (low cost) but are more opportunistic.
        result = 100 * (our_power - their_power)
      end
      return math.floor(result + 0.5)
    end)
    if priority > best_priority then
      best_priority = priority
      best_num = attack_num
    end
    attack_num = attack_num + 1
  end
  return best_priority, best_num
end

local swarm_move_priority_adjustments = {}
EoHS.adjust_swarm_move_priority = function (adjustment)
  table.insert (swarm_move_priority_adjustments, adjustment)
end
EoHS.move_priority = function(unit, wunit, dst_x, dst_y)
  local result = 0
  
  local terrain = wesnoth.current.map[{dst_x,dst_y}]
  local terrain_info = wesnoth.terrain_types[terrain]
  result = result + math.max(0, math.min(unit.max_hitpoints - unit.hitpoints, terrain_info.healing))
  if terrain_info.village then
    local owner = wesnoth.get_village_owner(dst_x,dst_y)
    if (not owner) or wesnoth.sides.is_enemy (unit.side, owner) then result = result + 10 end
    if owner and not wesnoth.sides.is_enemy (unit.side, owner) then result = result - 10 end
  end
  
  local wunit_there = wesnoth.units.get(dst_x, dst_y)
  if wunit_there and wunit_there.side == unit.side and wunit_there.variables.EoHS_is_swarm then wunit_there = nil end
  if wunit_there or EoHS.current_undying_respawn_locations[dst_x.."_"..dst_y] then
    if (dst_x == unit.x) and (dst_y == unit.y) then
      result = result - 1000000 -- Dislike staying under a real unit
    else
      result = result - 2000000 -- Dislike even more to climb under a different real unit
    end
  else -- and you can't attack from under a real unit
    local best_attack = 0
    local next_to_friendly_spawner = false
    for x,y in helper.adjacent_tiles(dst_x, dst_y) do
      local wvictim = wesnoth.units.get(x,y)
      if wvictim then
        if wesnoth.sides.is_enemy(wvictim.side, unit.side) then
          local victim = EoHS.get_unit(x,y)
          if victim then
            best_attack = math.max(best_attack, (EoHS.attack_priority(unit, wunit, dst_x, dst_y, victim, wvictim)))
          end
        elseif wvictim.variables.EoHS_is_swarm_nest then
          next_to_friendly_spawner = true
        end
      end
    end
    result = result + best_attack
    if best_attack > 0 then
      -- In combat only, we prefer better-defense and healing terrain, and prefer not to wander frivolously.
      result = result + terrain_info.healing + math.floor((100 - wesnoth.units.defense_on(wunit, terrain) + 5)/10)
      if (dst_x == unit.x) and (dst_y == unit.y) then result = result + 1 end
    end
    if next_to_friendly_spawner then
      -- prefer not to obstruct more spawning
      result = result - 2
    end
  end
  
  for dummy, adjustment in ipairs (swarm_move_priority_adjustments) do
    local subresult = adjustment (unit, wunit, dst_x, dst_y)
    if subresult then result = result + subresult end
  end
  
  return result
end

EoHS.get_active_swarms = function(side)
  return EoHS.get_units({ side=side, EoHS.has_unit_variable("is_swarm") })
end
EoHS.get_flat_swarms = function(side)
  local result = {}
  local w,h = wesnoth.current.map.playable_width, wesnoth.current.map.playable_height
  for x=1,w do for y=1,h do
    local unit = EoHS.get_hex_variable(x,y, "swarm_unit")
    if unit and (unit.side == side) then table.insert(result, unit) end
  end end
  return result
end
-- TODO swarms' facing, draw HP bars and overlays
EoHS.set_swarm = function(unit)
  local item_image = "misc/blank-hex.png~BLIT("..EoHS.unit_thumbnail(unit)..",7,7)"
  EoHS.set_hex_variable(unit.x, unit.y, "swarm_item_image", item_image)
  EoHS.set_hex_variable(unit.x, unit.y, "swarm_unit", unit)
  EoHS.place_item({x=unit.x, y=unit.y, image=item_image, visible_in_fog=false, redraw=false})
end
EoHS.unset_swarm = function(x, y)
  EoHS.remove_item({x=x, y=y, image=EoHS.get_hex_variable(x, y, "swarm_item_image")})
  EoHS.set_hex_variable(x, y, "swarm_unit")
  EoHS.set_hex_variable(x, y, "swarm_item_image")
end
--[[EoHS.create_swarm = function(unit)
  unit = EoHS.create_wunit(unit).__cfg
  EoHS.update_all_type_adjustments(unit)
  EoHS.update_unit_graphics(unit)
  EoHS.set_swarm(unit)
end]]
EoHS.flatten_swarm = function(unit)
  EoHS.remove_unit(unit.x, unit.y)
  EoHS.set_unit_variable(unit, "is_swarm", true)
  EoHS.set_swarm(unit)
end
EoHS.flatten_swarms = function(side)
  if EoHS.get_side_variable (side, "swarms_only") then return end
  local active_swarms = EoHS.get_active_swarms(side)
  for i,unit in ipairs(active_swarms) do EoHS.flatten_swarm(unit) end
end
EoHS.swarm_is_present = function(x, y)
  return EoHS.get_hex_variable(x, y, "swarm_unit.x") and true or false
end

local swarm_list_transformations = {}
EoHS.transform_swarm_lists = function (transformation)
  table.insert (swarm_list_transformations, transformation)
end
EoHS.move_swarms = function(side)
  local swarms
  local wunits = {}
  if EoHS.get_side_variable (side, "swarms_only") then
    swarms = EoHS.get_active_swarms(side)
  else
    EoHS.flatten_swarms(side) -- just in case
    swarms = EoHS.get_flat_swarms(side)
  end
  
  if not swarms [1] then return end
  
  do
    local num_removed = 0
    local i = 1
    while swarms[i] do
      local unit = swarms[i]
      if EoHS.tick_down_summon_duration(unit) then
        if not EoHS.get_side_variable (side, "swarms_only") then EoHS.unset_swarm(unit.x, unit.y) end
        num_removed = num_removed + 1
        swarms[i] = nil
        i = i + 1
      else
        if num_removed > 0 then
          swarms[i-num_removed] = swarms[i]
          swarms[i] = nil
        end
        i = i + 1
      end
    end
  end
    
  if not swarms [1] then return end
  
  EoHS.shuffle(swarms)
  for dummy, transformation in ipairs (swarm_list_transformations) do
    transformation (swarms)
  end
  
  EoHS.update_undying_respawn_locations()
  
  for i,unit in ipairs(swarms) do
    wunits[unit] = EoHS.create_wunit(unit) -- TODO: store them for longer
  end
  local choices = EoHS.synchronize_choice (function()
  local priority_map = {}
  for i,unit in ipairs(swarms) do
    local reach
    local wunit = wunits[unit]
    -- TODO: how does this handle invisible units?
    reach = wesnoth.find_reach(wunit) -- Note: find_reach includes the source hex and hexes with allies on them
    EoHS.assert(reach[1], "A swarm should be able to reach somewhere...")
    if reach[1] then
      local unit_entry = {}
      priority_map[unit] = unit_entry
      EoHS.shuffle(reach)
      for i,reach_info in ipairs(reach) do
        local x,y = reach_info[1], reach_info[2]
        local xy = x..","..y
        local priority = EoHS.move_priority(unit,wunit,x,y)
        unit_entry[xy] = priority
        table.insert(unit_entry, {x=x,y=y,priority=priority})
        local hex_entry = priority_map[xy]
        if not hex_entry then hex_entry = {}; priority_map[xy] = hex_entry end
        table.insert(hex_entry, unit)
      end
    end
  end
  
  local choices = {}
  local choose = function(id,x,y)
    local old_u = choices[id]
    local old_xy = choices[x..","..y]
    if old_u then choices[old_u.x..","..old_u.y] = nil end
    if old_xy then choices[old_xy] = nil end
    choices[id] = {x=x,y=y}
    choices[x..","..y] = id
  end
  for i,unit in ipairs(swarms) do
    if priority_map[unit] then
      local frontier = EoHS.priority_queue(function(path) return path.value end)
      local paths = {}
      local paths_by_hex = {}
      local best_finished_path
      local insert_claimant = function(claimant_id, path_prefix)
        local claimant_targets = priority_map[claimant_id]
        local claimant_current_choice = choices[claimant_id]
        local claimant_current_priority = claimant_current_choice and claimant_targets[claimant_current_choice.x..","..claimant_current_choice.y] or 0
        for i,hex in ipairs(claimant_targets) do
          local value = (path_prefix and (path_prefix.value - 1) or 0) + hex.priority - claimant_current_priority
          -- optimization: since we are going to ignore these anyway, don't insert them into the priority queue
          if (not best_finished_path) or (value > best_finished_path.value) then
            frontier.insert({ x=hex.x, y=hex.y, claimant_id=claimant_id,
              -- optimization: add a small penalty for each displacement, to prevent
              -- the algorithm from exploring all possible equal-value displacements.
              -- This changes the behavior slightly, but it doesn't cause any real problems.
              value = value,
              previous = path_prefix })
          end
        end
      end
      insert_claimant(unit)
      while frontier.top() do
        local path = frontier.pop()
        local xy = path.x..","..path.y
        if not paths_by_hex[xy] then
          paths_by_hex[xy] = path
          local claimant_id = choices[xy]
          -- Assuming we've done the earlier units correctly,
          -- moving a claimant will NEVER result in an improved result,
          -- so if the path is already worse than the best path, we can ignore it, regardless of whether it involves moving something.
          if (not best_finished_path) or (path.value > best_finished_path.value) then
            if not claimant_id then
              best_finished_path = path
            else
              insert_claimant(claimant_id, path)
            end
          end
        --local competitors = priority_map[x..","..y]
        --for i,competitor_id in ipairs(competitors) do
        end
      end
      EoHS.assert(best_finished_path, "Bugs? The units should at least be able to pathfind to all being where they started...")
      while best_finished_path do
        choose(best_finished_path.claimant_id, best_finished_path.x, best_finished_path.y)
        best_finished_path = best_finished_path.previous
      end
    end
  end
  
  local result = {}
  
  for i,unit in ipairs(swarms) do
    result[i] = choices[unit]
  end
  
  return result
  end)
  
  local movements = {}
  for i,unit in ipairs(swarms) do
    local choice = choices[i]
    if choice and ((choice.x ~= unit.x) or (choice.y ~= unit.y)) then
      table.insert(movements, {unit=unit, x=choice.x, y=choice.y, src_x=unit.x, src_y=unit.y})
      if EoHS.get_side_variable (side, "swarms_only") then
        EoHS.remove_unit(unit.x, unit.y)
      end
    elseif not EoHS.get_side_variable (side, "swarms_only") then
      if not EoHS.get_unit(unit.x, unit.y) then
        EoHS.unset_swarm(unit.x, unit.y)
        EoHS.put_unit(unit, {allow_unknown_id=true, allow_new_location=true, immediate=true})
      end
    end
  end
  
  if movements[1] then
    local anim_tables = {}
    for i,movement in ipairs(movements) do
      EoHS.assert(not EoHS.get_unit(movement.x, movement.y), "A swarm unit should never move onto a unit")
      local unit = movement.unit
      unit.x = movement.x
      unit.y = movement.y
      unit.resting = false
      movement.unit_id = EoHS.unit_id(unit)
      movement.unit = nil
      
      if (EoHS.get_side_variable (side, "swarms_only") and (#movements) > 100)
        -- Disable zombie movement animation in 1.12 because it seems to cause crashes
        -- Reenable it because the problem MAY now be fixed
        -- or wesnoth.compare_versions(wesnoth.game_config.version, "<", "1.13.0")
          then
        EoHS.put_unit (unit, {immediate = true, allow_unknown_id=true, allow_new_location=true})
      else
        local real_unit = wesnoth.units.get (wunits[unit].x, wunits[unit].y)
        if real_unit then wesnoth.extract_unit (real_unit) end
        wesnoth.units.to_map (wunits[unit])
        local path = wesnoth.paths.find_path(wunits[unit], movement.x, movement.y)
        wesnoth.extract_unit (wunits[unit])
        if real_unit then wesnoth.units.to_map (real_unit) end
        
        if path then
          local default_image_modded = EoHS.unit_default_image_stuff(unit)
          local x,y
          local anim = { start_time = 0, }
          for i,l in ipairs(path) do
            local x2,y2 = EoHS.pixels_to_hex(unit.x, unit.y, l[1], l[2])
            if x then
              table.insert(anim, {"frame",{
                image=default_image_modded,
                duration=200,
                x=x.."~"..x2, y=y.."~"..y2,
              }})
            else
              -- So that the animation doesn't jerk at the beginning...
              table.insert(anim, {"frame",{
                image=default_image_modded,
                duration=200,
                x=x2, y=y2,
              }})
            end
            x,y = x2,y2
          end
          table.insert(anim_tables, { unit = unit, animation = anim })
        end
      end
    end
    EoHS.animate_units(anim_tables, { put_extras={allow_unknown_id=true, allow_new_location=true}, after_scrolling=function()
      for i,movement in ipairs(movements) do
        if not EoHS.get_side_variable (side, "swarms_only") then EoHS.unset_swarm(movement.src_x, movement.src_y) end
      end
    end, })
    wml.fire("redraw", {side=side})
    for i,movement in ipairs(movements) do
      local real_wunit = wesnoth.units.get(movement.x, movement.y)
      if real_wunit and (EoHS.unit_id(real_wunit) == movement.unit_id) then
        EoHS.fire_event("moveto", real_wunit.x, real_wunit.y)
      end
      movements[i] = {"movement",movement}
    end
    --[[if not EoHS.verify_sync(movements) then
      EoHS.err(_"Swarm movement is desynchronized.")
    end]]
  end
  
  local client_local_pass_index = 0
  local next_attack = function()
    -- First pass: Only swarm units who have a single attack option attack.
    -- That way, we reduce the cases of wasting attacks when a unit is killed.
    -- A kill may cause more units to be reduced to only a single option,
    -- so prioritize these cases every time.
    
    local found_unique = false
    local unique_only_list = {true, false}
    
    for dummy, unique_only in ipairs (unique_only_list) do
      for dummy = 1,#swarms do
        client_local_pass_index = client_local_pass_index + 1
        local unit = swarms [client_local_pass_index]
        if not unit then
          client_local_pass_index = 1
          unit = swarms [client_local_pass_index]
        end
        
        local real_wunit = wesnoth.units.get(unit.x, unit.y)
        if real_wunit and (EoHS.unit_id(real_wunit) == EoHS.unit_id(unit)) and (real_wunit.attacks_left > 0) then
          local neighbors = 0
          for something, whatever in helper.adjacent_tiles (unit.x, unit.y) do
            local neighbor = wesnoth.units.get (something, whatever)
            if neighbor and wesnoth.sides.is_enemy (neighbor.side, side) then
              neighbors = neighbors + 1
            end
          end
          if (neighbors > 0) and not (unique_only and neighbors > 1) then
            local real_unit = EoHS.get_unit(unit.x, unit.y)
      
            local best_priority = 0
            local best_num
            local best_x
            local best_y
            for x,y in helper.adjacent_tiles(real_wunit.x, real_wunit.y) do
              local wvictim = wesnoth.units.get(x,y)
              if wvictim and wesnoth.sides.is_enemy(wvictim.side, real_unit.side) then
                local victim = EoHS.get_unit(x,y)
                if victim then
                  local attack_priority, attack_num = EoHS.attack_priority(real_unit, real_wunit, real_wunit.x, real_wunit.y, victim, wvictim)
                  if attack_priority > best_priority then
                    best_priority = attack_priority
                    best_num = attack_num
                    best_x = x
                    best_y = y
                  end
                end
              end
            end
            if best_num then
              return {src_x = unit.x, src_y = unit.y, attack_x=best_x, attack_y=best_y,num=best_num}
            end
          end
        end
      end
    end
  end
  
  
  while true do
    local choice = EoHS.synchronize_choice (next_attack)
    if not choice then break end
    EoHS.game_action_simulations.attack_unit({
      attacker = { x=choice.src_x, y=choice.src_y, weapon_index_zero_based = choice.num - 1 },
      defender = { x=choice.attack_x, y=choice.attack_y, weapon_index_zero_based = "choose" },
    })
    EoHS.units_may_advance_now()
  end
  
  -- Hack: Swarms recover from slowing. Even in 1.11, I guess slow-recovery normally happens before side_turn_end events.
  -- Swarms that are stuck under units and have nowhere to move don't recover, but that hardly matters.
  for i,wunit in ipairs(wesnoth.units.find_on_map({ side=side, EoHS.has_unit_variable("is_swarm") })) do
    wunit.status.slowed = false
  end
end

-->>)}
