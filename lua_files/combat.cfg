this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- combat.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

-- You can't save and load during an attack.
-- Thus, we can conveniently keep some attack context information in Lua rather than committing it to WML variables.
-- By storing everything we can in the combat_context variables, we can ensure that none of it is left around to
--   spuriously affect other combats or actions.

local set_combat_event
local end_combat
do
  local combat_context
  set_combat_event = function(name, func)
    EoHS.set_simple_event(name, true, true, false, function()
      if not combat_context then combat_context = {} end
      local artificial_context = EoHS.game_action_simulations.current_attack_context
      
      -- intentionally distinct from the ternary operator here
      combat_context.simple = {
        attacker = { x=wesnoth.current.event_context.x1, y=wesnoth.current.event_context.y1, attack=
          artificial_context and artificial_context.simple.attacker.attack or wesnoth.get_variable(       "weapon") },
        defender = { x=wesnoth.current.event_context.x2, y=wesnoth.current.event_context.y2, attack=
          artificial_context and artificial_context.simple.attacker.attack or wesnoth.get_variable("second_weapon") },
      }
      -- label r08u3UYmcihlbg:
      combat_context.units = {
        attacker = EoHS.at_beginning_of_event_get_autostored_unit(       "unit"),
        defender = EoHS.at_beginning_of_event_get_autostored_unit("second_unit"),
      }
      
      if not combat_context.persistent then
        combat_context.persistent = {
          attacker = { experience_wesnoth_will_give = combat_context.units.defender.level, original_hitpoints = combat_context.units.attacker.hitpoints },
          defender = { experience_wesnoth_will_give = combat_context.units.attacker.level, original_hitpoints = combat_context.units.defender.hitpoints },
        }
      end
      local fleshed_out_combat_context
      local fleshed_out_combat_context_ignoring_unhittable
      local is_in_this_combat_event = true
      combat_context.get_fleshed_out = function()
        EoHS.assert(is_in_this_combat_event, "getting combat context outside of the combat it was made for")
        if artificial_context then return artificial_context.fleshed_out end
        if not fleshed_out_combat_context then
          fleshed_out_combat_context = EoHS.game_action_simulations.fleshed_out_attack_context(combat_context.simple)
          --EoHS.debug_benchmark("fleshing out combat context", EoHS.game_action_simulations.fleshed_out_attack_context, combat_context.simple)
        end
        return fleshed_out_combat_context
      end
      combat_context.get_fleshed_out_ignoring_unhittable = function()
        EoHS.assert(is_in_this_combat_event, "getting combat context outside of the combat it was made for")
        if not fleshed_out_combat_context_ignoring_unhittable then
          fleshed_out_combat_context_ignoring_unhittable = EoHS.game_action_simulations.fleshed_out_attack_context(combat_context.simple, {ignore_specials = {EoHS_cant_hit_unhittable_units=true}})
        end
        return fleshed_out_combat_context_ignoring_unhittable
      end
      func(combat_context)
      is_in_this_combat_event = false
      if combat_context then
        combat_context.simple = nil
        combat_context.units = nil
      end
    end)
  end
  end_combat = function()
    combat_context = nil
  end
  EoHS.is_combatant = function(unit)
    if not combat_context then return false end
    if not combat_context.units then
      -- Special case: we're *in* the get_unit at the beginning of a combat event (see label r08u3UYmcihlbg)
      return ((unit.x == wesnoth.get_variable(       "unit.x")) and (unit.y == wesnoth.get_variable(       "unit.y")))
          or ((unit.x == wesnoth.get_variable("second_unit.x")) and (unit.y == wesnoth.get_variable("second_unit.y")))
    end
    return (combat_context.units.attacker == unit) or (combat_context.units.defender == unit)
  end
end

-- TODO bug where mage getting 1-hit-overload from water serpent doesn't poison
local terminate_combat_uid = 304599999
local terminate_combat = function(context, last_swinger_role, last_victim_role, was_hit)
  EoHS.assert(was_hit ~= nil, "You must specify whether a unit was hit when terminating combat")
  if context.persistent.combat_terminated then return end
  context.persistent.combat_terminated = true
  -- For SOME reason, drains, poison, slow, and petrify aren't applied until after the events.
  -- So if we terminate combat, we have to apply them manually.
  -- I believe the visual effects will appear, but the actual effects will not, so I don't need to do any graphics stuff here.
  -- (TODO verify)
  local victim = context.units[last_victim_role]
  if was_hit then
    local swinger_stats = context.get_fleshed_out()[last_swinger_role]
      
    if swinger_stats.slows     then EoHS.set_subtag_attribute(victim, "status.slowed"   , true) end
    if swinger_stats.poisons   then EoHS.set_subtag_attribute(victim, "status.poisoned" , true) end
    if swinger_stats.petrifies then EoHS.set_subtag_attribute(victim, "status.petrified", true) end
    if swinger_stats.drains    then
      local swinger = context.units[last_swinger_role]
      EoHS.set_unit_attribute_immediate(swinger, "hitpoints", swinger.hitpoints + math.max(0, swinger_stats.next_drains_damage))
    end
  end
  EoHS.set_unit_variable(victim, "real_underlying_id", victim.underlying_id)
  victim.underlying_id = terminate_combat_uid
  EoHS.put_unit(victim) -- Can't change underlying_id without put_unit. TODO: a better way to terminate combat...?
end
local stop_swinging = function(context, last_swinger_role, last_victim_role, stopping_swinger_role, stopping_victim_role, was_hit)
  if context.persistent.combat_terminated or context.persistent[stopping_swinger_role].stopped_swinging then return end
  
  if context.persistent[stopping_victim_role].stopped_swinging then
    terminate_combat(last_swinger_role, last_victim_role, was_hit)
  else
    context.persistent[stopping_swinger_role].stopped_swinging = true
    -- After a battle starts, it is literally impossible for one side's number of remaining strikes to be reduced without ending the combat entirely.
    -- The best we can do is to remove all their attacks, which essentially makes them swing a null attack with zero chance to hit.
    -- To make this look right, we also have to override their opponent's defense animation with an empty animation.
    local swinger = context.units[stopping_swinger_role]
    local  victim = context.units[ stopping_victim_role]
    
    table.insert(EoHS.force_subtag(swinger, "modifications"), { "object", {
      id = "EoHS_stop_swinging_object", { "effect", { apply_to = "remove_attacks" }},
      { "effect", { apply_to = "new_animation", { "attack_anim", {
          base_score = 100,
          start_time = 0, { "frame", { duration = 0 }}
      }}, }},
    }})
    EoHS.remove_subtags(swinger, "attack")
    
    table.insert(EoHS.force_subtag(victim, "modifications"), { "object", {
      id = "EoHS_stop_swinging_object",
      { "effect", { apply_to = "new_animation", { "defend", {
          base_score = 100,
          -- no duration (this doesn't actually force combat to take no time even if both sides have it, and I think it might default to this much anyway...)
          start_time = 0, { "frame", { duration = 0 }}
      }}, }},
    }})
    
    EoHS.put_unit(swinger)
    EoHS.put_unit(victim)
  end
end

local prepare_for_swing = function(context, swinger_role, victim_role)
  local victim = context.units[victim_role]
  
  -- Attacks against Mage Shields, internally, always miss.
  -- So we have to roll our own numbers and make them have a chance to *pretend* to hit.
  if EoHS.get_unit_variable(victim, "using_a_mage_shield") and EoHS.get_unit_variable(victim, "mage_shields") then
    local swing_info = context.get_fleshed_out_ignoring_unhittable()[swinger_role]
    local chance_to_hit = swing_info.chance_to_hit or 0
    local roll = EoHS.random("0..99")
    local hits = roll < chance_to_hit
    -- If the attack only deals damage, wizards don't waste shields on it
    if EoHS.during_action and EoHS.unit_is_immune_to_direct_spell_damage(victim) and not (swing_info.slows or swing_info.poisons) then hits = false end
    EoHS.set_unit_variable_immediate(victim, "mage_shield_gets_hit_next_swing", hits or nil)
  end
end
local prepare_for_swings = function(context)
  -- Between berserk, firststrike, and scenario events, it would be a lot harder to know which thing comes next.
  -- Good thing it doesn't matter if this is done extra times.
  prepare_for_swing(context, "attacker", "defender")
  prepare_for_swing(context, "defender", "attacker")
end

EoHS.unit_may_advance_soon = function(unit)
  if not EoHS.units_to_advance[unit.x..","..unit.y] then
    EoHS.units_to_advance[unit.x..","..unit.y] = true
    table.insert(EoHS.units_to_advance, {x=unit.x,y=unit.y})
  end
end
EoHS.unit_gained_experience = function(unit, amount, artificially)
  local wizards = EoHS.get_units({side = unit.side, EoHS.has_unit_variable ("is_wizard")})
  for index, wizard in ipairs (wizards) do
    if wizard ~= unit then
      local old_shared_experience = EoHS.get_unit_variable (wizard, "shared_experience_this_turn") or 0
      local new_shared_experience = math.min(old_shared_experience +amount, EoHS.wizard_shared_experience_limit(wizard))
      EoHS.set_unit_attribute_immediate(wizard, "experience", wizard.experience+(new_shared_experience-old_shared_experience))
      EoHS.set_unit_variable_immediate(wizard, "shared_experience_this_turn", new_shared_experience)
      EoHS.unit_may_advance_soon(wizard)
    end
  end
  --if artificially then
    EoHS.unit_may_advance_soon(unit)
  --end
end

local get_EoHS_specials = function(attack)
  local result = {}
  for i,special in ipairs(EoHS.get_subtags(attack, "specials.*")) do
    local id = (type(special.id) == "string") and string.match(special.id, "EoHS_(.*)")
    if id then result[id] = true end
  end
  return result
end

local misses_in_combat = function(context, swinger_role, victim_role)
  if context.persistent[swinger_role].stopped_swinging then return end
  
  local victim = context.units[victim_role]
  if not victim then return end
  if EoHS.get_unit_variable(victim, "mage_shield_gets_hit_next_swing") then
    EoHS.set_unit_variable_immediate(victim, "mage_shield_gets_hit_next_swing")
    local shields = EoHS.get_unit_variable(victim, "mage_shields")
    EoHS.set_unit_variable_immediate(victim, "mage_shields_active_"..shields)
    shields = shields - 1
    EoHS.set_unit_variable_immediate(victim, "mage_shields_active_"..shields, true)
    if shields == 0 then
      shields = nil
      EoHS.set_unit_variable_immediate(victim, "unhittable_instance_id")
    end
    EoHS.set_unit_variable_immediate(victim, "mage_shields", shields)
  end
  prepare_for_swings(context)
  -- TODO: Why did I add these lines? I must have had a reason, but they make combat (e.g. with mage shields) laggier...
  -- if context.units.attacker and EoHS.standardize_unit(context.units.attacker) then EoHS.put_unit(context.units.attacker) end
  -- if context.units.defender and EoHS.standardize_unit(context.units.defender) then EoHS.put_unit(context.units.defender) end
end
local hits_in_combat = function(context, swinger_role, victim_role)
  local victim = context.units[victim_role]
  local swinger = context.units[swinger_role]
  if not (victim and swinger) then return end
  local EoHS_specials = (swinger_role == "attacker") and get_EoHS_specials(context.simple[swinger_role].attack) or {}
  -- The exact condition under which the game considers a kill to have occurred,
  -- except for two possibilities:
  -- 1) the reason the victim has <=0 hitpoints is that a scenario event just reduced them.
  --     That's unlikely and I can't think of a way to fully secure against it.
  -- 2) The combat is invalidated in this or another role_hits event.
  --     Healing a dead unit only invalidates the kill. To invalidate the combat, you have to
  --     change location, underlying_id, or side/teams.
  local wesnoth_thinks_we_killed = (victim.hitpoints <= 0)
  local victim_immune_to_damage = EoHS.during_action and EoHS.unit_is_immune_to_direct_spell_damage(victim)
  -- TODO found a bug in a playtest - a unit killed a wizard and it was reversed, the unit got -XP
  if not wesnoth_thinks_we_killed then
    -- Hmm... entangled rules.
    -- I want: Touch attacks are effective against a wizard who stopped damage, but not against a dead wizard,
    -- and wizard protection considers dark pact. And dispelling touch dispels dark pact before it takes effect.
    -- To untangle it, I just make a specific exception here.
    if EoHS.get_unit_variable(victim, "dark_pact") and (not EoHS_specials.dispelling_touch)
        and (not victim_immune_to_damage) and (wesnoth.get_variable("damage_inflicted") > 1) then
      local total_contributions = 0
      local damages = {}
      local contributions = {}
      local dark_pact_servants = context.persistent[victim_role].dark_pact_servants
      for i,s in ipairs(dark_pact_servants) do
        if s.wunit.valid then
          local contribution = (s.wunit.hitpoints - 1) * (11 - s.distance)
          total_contributions = total_contributions + contribution
          contributions[s] = contribution
        else
          contributions[s] = 0
        end
        damages[s] = 0
      end
      if total_contributions > 0 then
        local half_denom = total_contributions + 1500
        local damage_to_disburse = 1 + math.floor(((wesnoth.get_variable("damage_inflicted")-2) * total_contributions * 2 + half_denom) / (2*half_denom))
        for d=1,damage_to_disburse do
          local choice = EoHS.random("1.."..total_contributions)
          for i,s in ipairs(dark_pact_servants) do
            choice = choice - contributions[s]
            if choice <= 0 then
              damages[s] = damages[s] + 1
              total_contributions = total_contributions - (11 - s.distance)
              contributions[s]    = contributions[s]    - (11 - s.distance)
              break
            end
          end
          EoHS.assert(choice <= 0, "bugs in dark pact...?")
        end
        for i,s in ipairs(dark_pact_servants) do
          local damage = damages[s]
          if damage > 0 then
            wesnoth.float_label(s.wunit.x, s.wunit.y, "<span color='#000000'>"..damage.."</span>")
            s.wunit.hitpoints = s.wunit.hitpoints - damage
          end
        end
        EoHS.set_unit_attribute_immediate(victim, "hitpoints", victim.hitpoints + damage_to_disburse)
        wesnoth.float_label(victim.x, victim.y, "<span color='#00ff00'>"..damage_to_disburse.."</span>")
      end
    end
  end
  if victim_role == "defender" and EoHS.get_unit_variable(victim, "wizard_protection") then
    local max_damage = math.ceil(victim.max_hitpoints / math.min(4, victim.level+2))
    local min_hitpoints = context.persistent[victim_role].original_hitpoints - max_damage
    if (min_hitpoints > 0) and (victim.hitpoints < min_hitpoints) then
      wesnoth.float_label(victim.x, victim.y, "<span color='#86aa0e'>"..EoHS.substitute(_"capped at $1|", {max_damage}).."</span>")
      EoHS.set_unit_attribute_immediate(victim, "hitpoints", min_hitpoints)
      terminate_combat(context, swinger_role, victim_role, true)
      wesnoth_thinks_we_killed = false -- combat terminated by underlying_id change
    end
  end
  if (victim.hitpoints < 1) and EoHS.get_unit_variable(swinger, "restraint_turns") and (context.persistent[victim_role].original_hitpoints > 1) then
    wesnoth.float_label(swinger.x, swinger.y, "<span color='#ffffff'>".._"restrained".."</span>")
    EoHS.set_unit_attribute_immediate(victim, "hitpoints", 1)
    terminate_combat(context, swinger_role, victim_role, true)
    wesnoth_thinks_we_killed = false -- combat terminated by underlying_id change
  end
  if (victim.hitpoints < 1) and EoHS_specials.cant_kill then
    EoHS.set_unit_attribute_immediate(victim, "hitpoints", 1)
    terminate_combat(context, swinger_role, victim_role, true)
    wesnoth_thinks_we_killed = false -- combat terminated by underlying_id change
  end
  
  if (victim.hitpoints > 0) or EoHS.get_unit_variable(victim, "undying") then
    EoHS.update_mount_hitpoints(victim)
    if EoHS_specials.mud_touch then
      if EoHS.apply_mud_touch(victim) then
        if victim.side == wesnoth.current.side then
          -- an obscure case that MIGHT be possible with Compulsion?
          victim.moves = 0
          EoHS.set_unit_action_points_immediate (victim, 0)
          EoHS.put_unit (victim)
        else
          EoHS.set_unit_variable (victim, "mud_touched_recently", true)
        end
        EoHS.set_unit_variable(swinger, "touch_enchantment")
        EoHS.update_all_type_adjustments(swinger) -- TODO should dummy abilities really be type adjustments? Seems like overkill when nothing else changes
        EoHS.put_unit(swinger)
        terminate_combat(context, swinger_role, victim_role, true)
      end
    end
    -- TODO: dispelling_touch animations
    if EoHS_specials.dispelling_touch then
      local used_up = false
      --[[if EoHS.get_unit_variable(victim, "is_circle_of_protection") then
        EoHS.destroy_circle_of_protection(victim)
        used_up = true
      end]]
      if (not used_up) then
        wesnoth.float_label(victim.x, victim.y, "<span color='#ff0000'>"..(_"dispelled").."</span>")
        for i,info in ipairs(EoHS.dispellable_unit_variables) do
          if EoHS.get_unit_variable(victim, info.varname) then
            if (info.varname == "spiritform") or (info.varname == "ogre_fury") or (info.varname == "mud_touched") or
              ((info.varname == "wizard_sword_turns") and (context.simple[victim_role].attack.name == "EoHS_wizard_sword")) then
              stop_swinging(context, swinger_role, victim_role, victim_role, swinger_role, true)
            end
            info.remove_func(victim)
            EoHS.put_unit(victim)
            used_up = true
            if info.varname == "mage_shields" then
              -- If a shield is dispelled, we also need to deal with the temporary shield stuff.
              -- TODO un-duplicate these lines with misses_in_combat
              EoHS.set_unit_variable_immediate(victim, "unhittable_instance_id")
            end
          end
        end
      end
      if (not used_up) and EoHS.dispelling_touch_can_banish_unit(victim) then
        EoHS.banish_unit(victim)
        victim = nil
        used_up = true
        context.persistent.combat_terminated = true
      end
      if used_up and not EoHS.during_annulling_lance then
        EoHS.set_unit_variable(swinger, "touch_enchantment")
        EoHS.update_all_type_adjustments(swinger)
        EoHS.put_unit(swinger)
      end
    end
  end
  if victim and (victim.hitpoints <= 0) then
    --[[if EoHS.get_unit_variable(victim, "is_circle_of_protection") then
      EoHS.destroy_circle_of_protection(victim)
      context.persistent[swinger_role].force_xp = 0
      context.persistent.combat_terminated = true
      wesnoth_thinks_we_killed = false -- combat invalidated by erasing/replacing unit
    else]]if EoHS.get_unit_variable(victim, "undying") then
      context.persistent[victim_role].do_undying = true
      terminate_combat(context, swinger_role, victim_role, true)
      wesnoth_thinks_we_killed = false -- combat terminated by underlying_id change
      context.persistent[victim_role].experience_wesnoth_will_give = 0 -- Weird case - Wesnoth gives fight XP to the winner and nothing to the loser
    else
      context.persistent.combat_terminated = true
      if EoHS_specials.dispelling_touch and EoHS.get_unit_variable(victim, "mage_shields") then
        EoHS.set_unit_variable(swinger, "touch_enchantment")
        EoHS.update_all_type_adjustments(swinger)
        EoHS.put_unit(swinger)
      end
      if EoHS.get_unit_variable(swinger, "is_wizard") and EoHS.get_unit_variable(victim, "is_wizard") then
        local attack_name = context.simple[swinger_role].attack.name
        if attack_name and string.match(attack_name, "staff") then
          EoHS.score_for_staffing_wizard(swinger.side, victim.side)
        end
      end
      for i,special in ipairs(EoHS.get_subtags(context.simple[swinger_role].attack, "specials.dummy")) do
        if special.id == "EoHS_devour" then
          if swinger.hitpoints < swinger.max_hitpoints then
            local new_hp = math.min(swinger.max_hitpoints, swinger.hitpoints+math.floor(victim.max_hitpoints/2))
            wesnoth.float_label(swinger.x, swinger.y, "<span color='#00ff00'>"..(new_hp-swinger.hitpoints).."</span>")
            EoHS.set_unit_attribute_immediate(swinger, "hitpoints", new_hp)
          end
        end
      end
      -- A lich's crypt wouldn't benefit you even if you did reanimate it, so you destroy it.
      -- A lich who's going to respawn at their crypt can't be reanimated, because the alternatives are too weird.
      if EoHS_specials.reanimating_touch
          and (not EoHS.get_unit_variable(victim, "is_crypt"))
          and (not EoHS.has_crypt(victim)) then
        context.persistent[swinger_role].force_xp = EoHS.combat_xp(swinger, victim, true)
        if EoHS.make_unit_reanimated(victim, swinger, true) then -- Caution: This fires events
          swinger = EoHS.get_unit(EoHS.unit_id(swinger))
          EoHS.set_unit_variable(swinger, "touch_enchantment")
          EoHS.update_all_type_adjustments(swinger) -- TODO should dummy abilities really be type adjustments? Seems like overkill when nothing else changes
          EoHS.put_unit(swinger)
        end
        context.persistent.combat_terminated = true
        wesnoth_thinks_we_killed = false -- combat invalidated by side change
      -- Replace plague for swarms, to propagate swarm status
      elseif EoHS.get_unit_variable(swinger, "is_swarm") and context.get_fleshed_out()[swinger_role].plagues then
        context.persistent[swinger_role].force_xp = EoHS.combat_xp(swinger, victim, true)
        -- TODO fix duplicate code with EoHS.make_unit_reanimated()
        -- Momentary use of underlying_id to check if the unit has been replaced,
        -- much the way wesnoth's internals use it: probably safe.
        local id = victim.underlying_id
        EoHS.fire_event("last breath", victim.x, victim.y, swinger.x, swinger.y) -- TODO minor: attacks?
        victim = EoHS.get_unit(victim.x, victim.y)
        if victim and (victim.underlying_id == id) then
          EoHS.animate_unit({{"filter",{x=victim.x,y=victim.y}}, flag="death", with_bars = false,})
          EoHS.fire_event("die", victim.x, victim.y, swinger.x, swinger.y)
          victim = EoHS.get_unit(victim.x, victim.y)
          if victim and (victim.underlying_id == id) then
            EoHS.remove_unit(victim.x,victim.y)
            if not EoHS.swarm_is_present(victim.x,victim.y) then
              wesnoth.put_unit({
                x = victim.x,
                y = victim.y,
                side = swinger.side,
                type = context.get_fleshed_out()[swinger_role].plague_type,
                variation = victim.undead_variation,
                attacks_left = 0,
                moves = 0,
                {"variables",{EoHS_is_swarm=true}},
              })
              -- this is never correct because swarms are NOT flattened if they are fighting
              --if swinger.side == wesnoth.current.side then EoHS.flatten_swarms(wesnoth.current.side) end
            end
            wesnoth_thinks_we_killed = false -- combat invalidated by replacing unit
          end
        end
      elseif (not EoHS.get_subtag_attribute(victim, "status.unplagueable")) and not context.get_fleshed_out()[swinger_role].plagues then
        local zombie_masters = EoHS.get_units({ EoHS.has_unit_variable("zombie_mastery") })
        local zombie_master_info = {}
        local best_dist = 31
        local vex,vey = EoHS.euclidean_coordinates(victim.x, victim.y)
        for i,unit in ipairs(zombie_masters) do
          local dist = EoHS.distance_between(unit.x,unit.y,victim.x,victim.y,EoHS.passable_only(unit.side))
          local mex,mey = EoHS.euclidean_coordinates(unit.x, unit.y)
          local edsq = (vex-mex)*(vex-mex) + (vey-mey)*(vey-mey)
          if dist and dist < best_dist then
            best_dist = dist
          end
          zombie_master_info[unit] = {
            dist = dist,
            edsq = edsq,
          }
        end
        EoHS.filter(zombie_masters, function(unit) return zombie_master_info[unit].dist == best_dist end)
        
        if #zombie_masters > 1 then
          local best_edsq = 34039
          for i,unit in ipairs(zombie_masters) do
            if zombie_master_info[unit].edsq and zombie_master_info[unit].edsq < best_edsq then
              best_edsq = zombie_master_info[unit].edsq
            end
          end
          EoHS.filter(zombie_masters, function(unit) return zombie_master_info[unit].edsq == best_edsq + 0.1 end)
          zombie_masters = EoHS.synchronize_choice(zombie_masters)
        end
        
        local zombie_master = zombie_masters[1] and zombie_masters[EoHS.random(1,#zombie_masters)]
        if zombie_master then
          context.persistent[swinger_role].force_xp = EoHS.combat_xp(swinger, victim, true)
          -- TODO fix duplicate code with EoHS.make_unit_reanimated()
          -- Momentary use of underlying_id to check if the unit has been replaced,
          -- much the way wesnoth's internals use it: probably safe.
          local id = victim.underlying_id
          EoHS.fire_event("last breath", victim.x, victim.y, swinger.x, swinger.y) -- TODO minor: attacks?
          victim = EoHS.get_unit(victim.x, victim.y)
          if victim and (victim.underlying_id == id) then
            EoHS.animate_unit({{"filter",{x=victim.x,y=victim.y}}, flag="death", with_bars = false,})
            EoHS.fire_event("die", victim.x, victim.y, swinger.x, swinger.y)
            victim = EoHS.get_unit(victim.x, victim.y)
            if victim and (victim.underlying_id == id)then
              EoHS.remove_unit(victim.x,victim.y)
              if not EoHS.swarm_is_present(victim.x,victim.y) then
                wesnoth.put_unit({
                  x = victim.x,
                  y = victim.y,
                  side = zombie_master.side,
                  type = "Walking Corpse",
                  variation = victim.undead_variation,
                  attacks_left = 0,
                  moves = 0,
                  {"variables",{EoHS_is_swarm=true}},
                })
                wesnoth.fire("capture_village",{x=victim.x,y=victim.y,side=zombie_master.side})
                context.persistent[victim_role].zombie_master_side = zombie_master.side
              end
              wesnoth_thinks_we_killed = false -- combat invalidated by replacing unit
            end
          end
        end
      end
    end
  end
  
  if wesnoth_thinks_we_killed then
    context.persistent[victim_role].experience_wesnoth_will_give = 0
    context.persistent[swinger_role].experience_wesnoth_will_give = EoHS.kill_experience(victim.level)
    context.persistent.combat_terminated = true
  end
  -- TODO: Why did I add these lines? I must have had a reason, but they make combat (e.g. with mage shields) laggier...
  --if swinger and EoHS.standardize_unit(swinger) then EoHS.put_unit(swinger) end
  --if victim  and EoHS.standardize_unit(victim ) then EoHS.put_unit(victim ) end
  if not context.persistent.combat_terminated then prepare_for_swings(context) end
end

set_combat_event("attack", function(context)
  -- Share persistent variables frequently, but don't waste time during combats invoked in other events!
  -- Probably MP-unsafe
  --if not EoHS.event_stack.parent then EoHS.update_and_share_persistent_variables_of_current_side() end
  
  -- Now redundant.
  --if EoHS.standardize_unit(context.units.attacker) then EoHS.put_unit(context.units.attacker) end
  --if EoHS.standardize_unit(context.units.defender) then EoHS.put_unit(context.units.defender) end
  
  --if EoHS.update_unit_overlays(context.units.attacker) then EoHS.put_unit(context.units.attacker) end
    
  local role_has_attack = function(role) return context.simple[role].attack and context.simple[role].attack.name end
  -- For this one event, standardization might have changed the attacks:
  for i,role in ipairs({"attacker","defender"}) do
    if role_has_attack(role) then
      for i,subtag in ipairs(context.units[role]) do
        if (subtag[1]=="attack") and (subtag[2].name==context.simple[role].attack.name) then
          context.simple[role].attack = subtag[2]
        end
      end
    end
  end
  
  -- In 1.10, we can't use [disable] specials, so we set the attack's swings to zero instead.
  -- The main difference is that this allows you to initiate a bogus attack in order to gain XP.
  -- So, we prevent that.
  -- In 1.11, we might still be dealing with a unit that was created and then attacked,
  --   before EoHS could get to it to give it the disable special. Prevent those attacks too.
  local specials = context.get_fleshed_out().attacker.active_specials -- TODO there was a "attempt to index a nil value" on this line, fix
  if specials then for i,special in ipairs(specials) do
    if (w111 and (special[1] == "disable")) or ((not w111) and (special[1] == "swarm") and (special[2].swarm_attacks_min == 0) and (special[2].swarm_attacks_max == 0)) then
      terminate_combat(context, "attacker", "defender", false)
      --context.persistent.bogus = true
      context.persistent.attacker.force_xp = 0
      context.persistent.defender.force_xp = 0
      return
    end
  end end
  
  local attacker = context.units.attacker
  local defender = context.units.defender
  if EoHS.get_unit_variable(attacker, "ogre_fury") then
    EoHS.set_unit_variable_immediate(attacker, "ogre_fury_attacked_this_turn", true)
  end
  if EoHS.get_circle_of_protection (defender.x, defender.y) then
    local strength = EoHS.get_hex_variable (defender.x, defender.y, "circle_of_protection_strength")
    terminate_combat(context, "attacker", "defender", false)
    
    if strength >1 then
      if get_EoHS_specials(context.simple.attacker.attack).dispelling_touch then
        -- note: no exception for annulling Lance because it can't attack circles anyway
        EoHS.set_unit_variable(attacker, "touch_enchantment")
        EoHS.update_all_type_adjustments(attacker)
        EoHS.put_unit(attacker)
        EoHS.destroy_circle_of_protection(defender.x, defender.y)
        wesnoth.float_label(defender.x, defender.y, "<span color='#ff0000'>"..(_"dispelled").."</span>")
      else
        EoHS.set_hex_variable (defender.x, defender.y, "circle_of_protection_strength", strength - 1)
        EoHS.update_circle_of_protection_item (defender.x, defender.y)
        wesnoth.float_label(defender.x, defender.y, "<span color='#ff0000'>1</span>")
      end
    else
      EoHS.destroy_circle_of_protection(defender.x, defender.y)
      wesnoth.float_label(defender.x, defender.y, "<span color='#ff0000'>1</span>")
    end
    
    return
  end
  for i,role in ipairs({"attacker","defender"}) do
    if role_has_attack(role) then -- No need to set up defenses if they have no attack
      local opponent_role = (i == 1) and "defender" or "attacker"
      local unit = context.units[role]
      local opponent = context.units[opponent_role]
      local opponent_shields = EoHS.get_unit_variable(opponent, "mage_shields")
      local dispelling_enchantments = (role=="attacker") and context.simple[role].attack and
        get_EoHS_specials(context.simple[role].attack).dispelling_touch -- TODO: can this line be less of a duplicate definition of dispelling touch behavior?
      if opponent_shields and not dispelling_enchantments then
        
        local unhittable_instance_id = EoHS.get_variable("next_unhittable_instance_id") or 1
        EoHS.set_variable("next_unhittable_instance_id", unhittable_instance_id + 1)
        EoHS.set_unit_variable_immediate(opponent, "unhittable_instance_id", unhittable_instance_id)
        
        local unhittable_special = {"chance_to_hit",{
            id = "EoHS_cant_hit_unhittable_units",
            multiply = 0,
            {"filter_opponent",{ EoHS.has_unit_variable("unhittable_instance_id", unhittable_instance_id) }},
          }}
        table.insert(EoHS.force_subtag(unit, "modifications"),
          {"object", {
            id = "EoHS_cant_hit_unhittable_units",
            {"effect", {
              apply_to = "attack",
              {"set_specials", {
                unhittable_special
              }}
            }}
          }})
        for attack in wml.child_range(unit, "attack") do
          table.insert(EoHS.force_subtag(attack, "specials"), unhittable_special)
        end
        EoHS.set_unit_variable(unit, "attacking_a_mage_shield", true)
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit)
        EoHS.set_unit_variable(opponent, "using_a_mage_shield", true) -- TODO should we make shielded units always have these animations?
        EoHS.set_unit_variable_immediate(opponent, "mage_shields_active_"..opponent_shields, true)
        EoHS.update_unit_graphics(opponent)
        EoHS.put_unit(opponent)
      end
      if EoHS.get_unit_variable(opponent, "dark_pact") and not dispelling_enchantments then
        local reach = EoHS.find_reach(opponent.x, opponent.y, EoHS.passable_only(opponent.side), 11)
        local dark_pact_servants = {}
        for i,hex in ipairs(reach) do
          -- TODO: make dark pact work with flattened swarms
          local wunit = wesnoth.get_unit(hex.x, hex.y)
          if wunit and (not wunit.status.petrified) and (not EoHS.get_unit_variable(wunit, "dark_pact")) and (not wesnoth.is_enemy(opponent.side, wunit.side)) then
            table.insert(dark_pact_servants, {wunit=wunit,distance=hex.cost})
          end
        end
        context.persistent[opponent_role].dark_pact_servants = dark_pact_servants
      end
    end
  end
  prepare_for_swings(context)
end)

EoHS.combat_xp = function(unit, opponent, killed)
  local fight_xp = EoHS.during_action and 0 or opponent.level -- no fight XP for custom attacks during actions
  local result = (unit.hitpoints <= 0) and 0 or (killed and EoHS.kill_experience(opponent.level) or fight_xp)
  -- Special EoHS rule: Don't give experience for killing your own units with spells.
  if EoHS.during_action and (not wesnoth.is_enemy(unit.side, opponent.side)) then result = 0 end
  return result
end

set_combat_event("attacker_hits"  , function(context)   hits_in_combat(context, "attacker", "defender") end)
set_combat_event("defender_hits"  , function(context)   hits_in_combat(context, "defender", "attacker") end)
set_combat_event("attacker_misses", function(context) misses_in_combat(context, "attacker", "defender") end)
set_combat_event("defender_misses", function(context) misses_in_combat(context, "defender", "attacker") end)
--wesnoth.game_events.on_event = function() EoHS.debug(wesnoth.current.event_context.name) end
set_combat_event("attack_end", function(context)
  if true then -- not context.persistent.bogus then
    for i,role in ipairs({"attacker","defender"}) do
      local unit = context.units[role]
      if unit then
        local opponent_role = (i == 1) and "defender" or "attacker"
        local opponent = context.units[opponent_role]
        local update_graphics = false
        local correct_experience
        -- Right now, the only normal "no opponent" case is banishing a unit with Dispelling Touch, which appropriately gives fighting XP.
        if opponent then
          -- Maybe we reverted a kill and shouldn't give kill XP;
          -- maybe we invalidated combat before the kill by reanimating the unit, but the kill should still count.
          local do_undying = context.persistent[opponent_role].do_undying
          local killed = (opponent.hitpoints <= 0) and not do_undying
          correct_experience = context.persistent[role].force_xp or EoHS.combat_xp(unit, opponent, killed)
        else
          correct_experience = context.persistent[role].experience_wesnoth_will_give
        end
        EoHS.set_unit_attribute_immediate(unit, "experience", unit.experience + correct_experience)
        EoHS.set_unit_variable_immediate(unit, "excess_experience_wesnoth_will_give", (EoHS.get_unit_variable(unit, "excess_experience_wesnoth_will_give") or 0) + context.persistent[role].experience_wesnoth_will_give)
        EoHS.unit_gained_experience(unit, correct_experience, EoHS.event_stack.parent and true or false)
        if context.persistent[role].stopped_swinging then
          local modifications = EoHS.get_subtag(unit, "modifications")
          local i = 1
          EoHS.remove_subtags(modifications, "object", "EoHS_stop_swinging_object")
          -- Just in case: A scenario event could theoretically have given the unit an extra attack in between.
          -- We need to make sure attacks are regenerated.
          EoHS.remove_subtags(unit, "attack")
          EoHS.put_unit(unit)
        end
        if EoHS.remove_subtags(unit, "modifications.object", "EoHS_cant_hit_unhittable_units") > 0 then
          EoHS.remove_subtags(unit, "attack.specials.chance_to_hit", "EoHS_cant_hit_unhittable_units")
          EoHS.put_unit(unit)
        end
        EoHS.set_unit_variable_immediate(unit, "unhittable_instance_id")
        if EoHS.get_unit_variable(unit, "attacking_a_mage_shield") then
          EoHS.set_unit_variable(unit, "attacking_a_mage_shield")
          update_graphics = true
        end
        if EoHS.get_unit_variable(unit, "using_a_mage_shield") then
          EoHS.set_unit_variable(unit, "using_a_mage_shield")
          EoHS.set_unit_variable(unit, "mage_shields_active_"..(EoHS.get_unit_variable(unit, "mage_shields") or 0))
          EoHS.update_conditional_abilities(unit)
          update_graphics = true
        end
        if update_graphics then EoHS.update_unit_graphics(unit); EoHS.put_unit(unit) end
        if unit.underlying_id == terminate_combat_uid then
          unit.underlying_id = EoHS.get_unit_variable(unit, "real_underlying_id")
          EoHS.set_unit_variable(unit, "real_underlying_id")
          EoHS.put_unit(unit)
        end
      end
    end
    for i,role in ipairs({"attacker","defender"}) do
      local unit = context.units[role]
      if unit and context.persistent[role].do_undying then
        EoHS.unit_undies(unit)
        context.units[role] = nil
      end
      if context.persistent[role].zombie_master_side == wesnoth.current.side then
        EoHS.flatten_swarms(wesnoth.current.side)
        context.units[role] = nil
      end
    end
  end
  
  local attacker = context.units.attacker
  local defender = context.units.defender
  end_combat()
  if attacker and EoHS.standardize_unit(attacker) then EoHS.put_unit(attacker) end -- TODO why doesn't this make the poison overlay show up?
  if defender and EoHS.standardize_unit(defender) then EoHS.put_unit(defender) end
end)

-->>)}
