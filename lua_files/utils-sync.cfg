this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- utils-sync.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local select = select
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

local pack = function(...) return {...} end

EoHS.disunified = function(func)
  local result
  local old_unison = EoHS.context.unison
  local old_sync = EoHS.context.synchronized
  EoHS.context.unison = false
  EoHS.context.synchronized = false
  if old_unison then EoHS.context.disunified_unit_tables = {} end
  result = pack(func())
  if old_unison then EoHS.context.disunified_unit_tables = nil end
  EoHS.context.unison = old_unison
  EoHS.context.synchronized = old_sync
  return table.unpack(result)
end

EoHS.begin_event = function(unison, synchronized, force_empty_stack, for_fire_event)
  --EoHS.err(wesnoth.current.event_context.name)
  if force_empty_stack then
    if EoHS.event_stack or EoHS.context then
      EoHS.debug("EoHS.begin_event notices that there was probably an error earlier; if there *wasn't* an error earlier, then *this* is an error")
    end
    EoHS.event_stack = nil
    EoHS.context = nil
  end
  EoHS.assert(synchronized ~= nil, "EoHS.begin_event without enough arguments")
  EoHS.assert(not EoHS.context, "EoHS.begin_event used in an existing context")
  if not EoHS.event_stack then
    EoHS.units_to_advance = {} -- Special: We always want to advance units at the end of the event stack, not at the end of each sub-event.
  end
  if EoHS.event_stack and not EoHS.event_stack.context.synchronized then synchronized = false end
  EoHS.context = {in_event = true, unison = unison, synchronized = synchronized }    
  
  if not for_fire_event then
    EoHS.event_stack = {parent=EoHS.event_stack, context=EoHS.context, event_name= wesnoth.current.event_context.name}
  end
  if unison then
    EoHS.context.unison_unit_tables = {}
    EoHS.context.unison_wunits = {}
    EoHS.context.units_to_put = {}
  else
    if not EoHS.context.disunified_unit_tables then EoHS.context.disunified_unit_tables = {} end
  end
  
  -- In each event stack, the first random call requires networking. Networking invokes a redraw.
  -- To preempt unexpected redraws, do a dummy random here.
  if synchronized and not EoHS.event_stack.parent then EoHS.random("1..2") end
end
local advancing_units_currently
EoHS.units_may_advance_now = function()
  -- This may invoke another nested event, which calls EoHS.end_event before doing anything, and EoHS.begin_event after.
  -- So we put it at the beginning of EoHS.end_event, so that *that* EoHS.end_event ends the second "event" properly.
  -- The nested event could theoretically add more units to EoHS.context.units_to_advance; this (hopefully) handles that properly.
  -- We do, however, need a guard against calling the same process again in the sub-events.
  if EoHS.units_to_advance and not advancing_units_currently then
    advancing_units_currently = true
    for i,xy in ipairs(EoHS.units_to_advance) do
      EoHS.units_to_advance[xy.x..","..xy.y] = nil -- so that sub-events can re-add this unit
      while true do
        local unit = EoHS.get_unit(xy.x,xy.y)
        if unit and (unit.experience >= unit.max_experience) then
          EoHS.game_action_simulations.advance_unit_on_map(xy.x, xy.y, EoHS.game_action_simulations.choose_advancement(unit), true, true)
        else
          if unit then
            EoHS.set_unit_attribute_immediate (unit, "experience", unit.experience - (EoHS.get_unit_variable (unit, "excess_experience_wesnoth_will_give") or 0))
            EoHS.set_unit_variable_immediate (unit, "excess_experience_wesnoth_will_give")
          end
          break
        end
      end
    end
    EoHS.units_to_advance = {}
    advancing_units_currently = nil
  end
end
EoHS.end_event = function(for_fire_event)
  EoHS.assert(EoHS.context.in_event, "EoHS.end_event used not in an event")
  if EoHS.context.unison then
    if (not for_fire_event) and (not EoHS.event_stack.parent) then
      EoHS.units_may_advance_now()
      EoHS.units_to_advance = nil
    end
    for i,unit in ipairs(EoHS.context.units_to_put) do
      if EoHS.context.units_to_put[unit] then
        wesnoth.units.to_map(unit)
        wml.fire("capture_village",{x=unit.x,y=unit.y,side=unit.side})
      end
    end
  end
  EoHS.context = nil
  EoHS.clear_temporary_caches()
  if not for_fire_event then
    EoHS.event_stack = EoHS.event_stack.parent 
    if not EoHS.event_stack then EoHS.may_do_synced_now() end
  end
end
EoHS.unsafe_code_may_fire_events = function(func)
  -- Other scenarios' events can make arbitrary changes, so don't preserve any event context.
  EoHS.assert(EoHS.context.in_event, "EoHS.fire_event used not in an event")
  local old_sync = EoHS.context.synchronized
  local old_unison = EoHS.context.unison
  EoHS.end_event(true)
  func()
  EoHS.begin_event(old_unison, old_sync, false, true)
end
EoHS.fire_event = function(...)
  local v = pack(...)
  EoHS.unsafe_code_may_fire_events(function() wesnoth.fire_event(table.unpack(v)) end)
end

local random_desynced = false
EoHS.random = function(randstring)
  EoHS.assert(EoHS.context.unison, "EoHS.random used in an disunified context")
  wml.fire("set_variable", { name="EoHS.LUA_TEMP", rand=randstring })
  local result = wml.variables["EoHS.LUA_TEMP"]
  wml.variables["EoHS.LUA_TEMP"] = nil
  if EoHS.get_variable("debug_mode") and EoHS.get_variable("on_a_side_turn") and EoHS.context.synchronized then
    local confirm = EoHS.synchronize_choice(result)
    if confirm ~= result then
      if not random_desynced then
        random_desynced = true
        EoHS.err("EoHS.random has gotten desynchronized, falling back to EoHS.synchronize_choice")
      end
      result = confirm
    end
  end
  return result
end

EoHS.synchronize_choice = function(human_func, ai_func, extras)
  if not EoHS.context.synchronized then EoHS.err("EoHS.synchronize_choice used in an unsynchronized context") end
  local result
  -- wesnoth.sync.evaluate_single is overly lenient about invalid wml tables, so we check them ourselves.
  -- TODO: maybe the EoHS.check_wml_table is slow enough that it should be removed.
  local make_result = function(r)
    if type(r) == "function" then r = r() end
    if not (extras and extras.promise_already_valid_tag) then r = EoHS.encode_to_wml_table(r) end
    EoHS.check_wml_table(r)
    return r
  end
  EoHS.disunified(function() result = wesnoth.sync.evaluate_single(
    function() return EoHS.capture_errors (make_result, human_func) end,
    function() return EoHS.capture_errors (make_result, ai_func or human_func) end)
  end)
  if result == nil then EoHS.err("EoHS.synchronize_choice used in an invalid situation"); return nil end
  return extras and extras.promise_already_valid_tag and result or EoHS.decode_wml_table(result)
end

EoHS.synchronize_if_needed = function (func)
  if not EoHS.context.unison then
    if type(func) == "function" then return func() end
    return func
  end
  return EoHS.synchronize_choice (func)
end

EoHS.do_only_on_client_controlling_side = function(side, local_func)
  return EoHS.disunified(function()
    if wesnoth.sides[side].is_local then
      return local_func()
    end
  end)
end
EoHS.do_only_on_client_controlling_human_side = function(side, human_func)
  return EoHS.disunified(function()
    if wesnoth.sides[side].is_local and wesnoth.sides[side].controller == "human" then
      return human_func()
    end
  end)
end

EoHS.local_client_sees_for_side_table = function()
  EoHS.assert(not EoHS.context.unison, "EoHS.local_client_sees_for_side_table used in an unified context")
  local result = {}
  local any_local_human = false
  local any_local_side = false
  for side, info in ipairs(wesnoth.sides) do
    if info.is_local then
      any_local_side = true
      if info.controller == "human" then
        any_local_human = true
      end
    end
  end
  for side, info in ipairs(wesnoth.sides) do
    result [side] = (not any_local_side) or (info.is_local and (info.controller == "human" or (info.controller == "ai" and not any_local_human)))
  end
  return result
end


EoHS.do_if_local_client_has_total_knowledge_of_side = function(side, then_func, else_func)
  return EoHS.disunified(function()
    local local_client_sees_for_side_table = EoHS.local_client_sees_for_side_table()
    local controls_knower
    for side2,info in ipairs(wesnoth.sides) do
      if local_client_sees_for_side_table[side2] then
        if not wesnoth.sides.is_enemy(side, side2) then controls_knower = true; break end
        if not (info.fog or info.shroud) then controls_knower = true; break end
      end
    end
    if controls_knower then
      return then_func()
    else
      return else_func and else_func()
    end
  end)
end


EoHS.do_synced_soon = function (callback, data)
  EoHS.assert(not EoHS.to_sync_soon, "EoHS.do_synced_soon overwrote a previous value")
  EoHS.assert(wesnoth.sides [wesnoth.current.side].is_local, "Tried to use EoHS.do_synced_soon when it's not the local player's turn")
  EoHS.to_sync_soon = {callback=callback, data = data}
end

EoHS.may_do_synced_now = function()
  if EoHS.to_sync_soon then
    wml.fire ("do_command", {{"fire_event", {raise = "EoHS_become_synced"}}})
  end
end

EoHS.set_simple_event ("EoHS_become_synced", true, true, true, function()
  local synced = EoHS.synchronize_choice (EoHS.to_sync_soon)
  EoHS.to_sync_soon = nil
  if not synced then return end
  EoHS[synced.callback] (synced.data)
end)

-->>)}
