this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- utils-misc.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local select = select
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil


local err_msg = function(msg)
  -- because we want the errors stored in save files, but can't use wml.variables[] in theme items and stuff, use a dual system
  local old_stored_log = EoHS.get_variable("error_log")
  if not EoHS.transient_error_log then
    EoHS.transient_error_log = old_stored_log
  end
  wesnoth.log("err", tostring(msg), false)
  wesnoth.interface.add_chat_message(msg)
  EoHS.transient_error_log = (EoHS.transient_error_log or "")
  if #EoHS.transient_error_log < 10000000 then
    EoHS.transient_error_log = EoHS.transient_error_log..msg.."\n"
  end
  if not EoHS.set_variable_forbidden then EoHS.set_variable("error_log", EoHS.transient_error_log) end
end
EoHS.err = function(input, traceback)
  err_msg((_"EoHS error: ")..((type(input) == "string") and input or EoHS.inspect(input)).."\n"..(traceback or debug.traceback()))
end
EoHS.debug = function(...)
  err_msg((_"EoHS debug: ")..EoHS.inspect({...}))
  return ...
end
EoHS.assert = function(condition, input)
  if not condition then EoHS.err(input) end
end
EoHS.error_logs_reported = {}
EoHS.share_errors = function()
  local old_stored_log = EoHS.get_variable("error_log")
  if not EoHS.transient_error_log then
    EoHS.transient_error_log = old_stored_log
  end
  if old_stored_log ~= EoHS.transient_error_log then EoHS.set_variable("error_log", EoHS.transient_error_log) end

  local current_player_errors = EoHS.synchronize_choice (EoHS.get_variable ("error_log") or "")
  if (EoHS.get_variable ("error_log") or "") ~= current_player_errors and not EoHS.error_logs_reported [current_player_errors] then
    wml.fire ("wml_message", {logger = "err", message = "EoHS debug: Roundup of errors the current player has seen so far:\n\n"..current_player_errors})
    EoHS.error_logs_reported [current_player_errors] = true
  end
end

EoHS.timestamp = function()
  if wesnoth.ms_since_init then return wesnoth.ms_since_init() end
  wml.fire("set_variable", {name="EoHS.LUA_TEMP", time="stamp"})
  local result = EoHS.get_variable("LUA_TEMP")
  EoHS.set_variable("LUA_TEMP")
  return result
end

EoHS.hosted_version = EoHS.macros.EOHS_VERSION_STRING
EoHS.local_version = wesnoth.unit_types.EoHS_local_version_checker and wesnoth.unit_types.EoHS_local_version_checker.__cfg.name

local pack = function(...) return {...} end

EoHS.get_variable = function(varname)
  return wml.variables["EoHS."..varname]
end

EoHS.set_variable = function(varname, value)
  wml.variables["EoHS."..varname] = value
end

EoHS.init_side_variables = function(side)
  EoHS.set_variable("side["..(side-1).."]", {})
end
EoHS.get_side_variables = function(side)
  return EoHS.get_variable("side["..(side-1).."]")
end
EoHS.get_side_variable = function(side, varname)
  return EoHS.get_variable("side["..(side-1).."]."..varname)
end
EoHS.set_side_variable = function(side, varname, value)
  EoHS.set_variable("side["..(side-1).."]."..varname, value)
end
-- Note: circles of protection rely on this implementation
EoHS.get_scenario_variable = function(varname)
  return EoHS.get_variable("scenario_vars."..varname)
end
EoHS.set_scenario_variable = function(varname, value)
  EoHS.set_variable("scenario_vars."..varname, value)
end
EoHS.get_hex_variables = function(x, y)
  return EoHS.get_scenario_variable(x.."_"..y)
end
EoHS.get_hex_variable = function(x, y, varname)
  -- Hack - avoid getting a warning if it doesn't exist
  local vars = EoHS.get_hex_variables(x, y)
  if vars then return vars[varname] or EoHS.get_subtag_attribute(vars, varname) end
end
EoHS.set_hex_variable = function(x, y, varname, value)
  EoHS.set_scenario_variable(x.."_"..y.."."..varname, value)
end

EoHS.side_is_angerpersonified = function(side)
  return wml.eval_conditional({
    {"have_unit",{ side=side, name="angerpersonified" }}
  })
end

EoHS.side_recruit_list = function(side)
  local list
  local side_recruits = wesnoth.sides[side].recruit
  for i,recruit in ipairs(side_recruits) do
    list = (list and list.."," or "")..recruit
  end
  return list or ""
end

-->>)}
