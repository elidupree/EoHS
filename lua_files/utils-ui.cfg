this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- utils-ui.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")

EoHS.give_alert = function()
  wesnoth.play_sound("bell.wav")
end

EoHS.redraw = function()
  -- "redraw" by itself apparently doesn't yield to the wesnoth UI hard enough.
  wesnoth.fire ("redraw")
  wesnoth.fire ("delay",{time = 10})
  wesnoth.fire ("redraw")
end

EoHS.message = function(string)
  -- Doesn't use [chat] side= to decide who it's shown to; instead, we just use this function
  -- in a disunified manner (especially since we sometimes want to show different messages
  --   to different players, not just binary show/not show.)
  wesnoth.message("EoHS", tostring(string)) -- wesnoth.message can't take tstrings, so convert them
  -- TODO: add timestamps
  EoHS.set_variable("message_log", (EoHS.get_variable("message_log") or "")..(
    EoHS.substitute(_"Turn $1|, side $2|: ", {wesnoth.current.turn, wesnoth.current.side})..string.."\n"
  ))
end

EoHS.unit_is_selected = function(unit)
  local current_selected_x, current_selected_y = wesnoth.get_selected_tile()
  return unit.x == current_selected_x and unit.y == current_selected_y
end

local very_temporary_items = {}

EoHS.place_item = function(item)
  if item.redraw == nil then item.redraw = false end
  wesnoth.fire("item", item)
  if not EoHS.set_variable_forbidden then
    local items = EoHS.get_hex_variable(item.x, item.y, "items") or {}
    table.insert(items, {"item",item})
    EoHS.set_hex_variable(item.x, item.y, "items", items)
  else
    local index = item.x..","..item.y
    local items = very_temporary_items[index] or {}
    very_temporary_items[index] = items
    table.insert(items, {"item",item})
  end
end
EoHS.remove_item = function(item)
  local num_found = 0
  local find = function(i)
    if (i.image == item.image) and (i.halo == item.halo) then
      num_found = num_found + 1
      if num_found == 1 then
        return true
      end
    end
  end
  
  local persistent_items = EoHS.get_hex_variable(item.x, item.y, "items") or {}
  EoHS.remove_subtags(persistent_items, "item", find)
  EoHS.remove_subtags(very_temporary_items[item.x..","..item.y] or {}, "item", find)
  if num_found == 1 then
    wesnoth.fire("remove_item", {x=item.x,y=item.y,image=(item.image or item.halo)})
  end
  if not EoHS.set_variable_forbidden then EoHS.set_hex_variable(item.x, item.y, "items", persistent_items) end
end
EoHS.get_items = function(x,y)
  return EoHS.get_hex_variable(x, y, "items")
end

EoHS.wrap_line = function (text, max_width, extras)
  local result
  text = text.." "
  local line = string.rep (" ", extras.starting_indentation or 0)
  for word in string.gmatch (text, "[^%s]*%s") do
    local proposed_line = line..word
    if string.len (proposed_line) <= max_width+1 then
      line = proposed_line
    else
      result = (result and result.."\n" or "")..string.sub (line, 1, -2)
      line = string.rep (" ", extras.subsequent_indentation or 0)..word
    end
  end
  return (result and result.."\n" or "")..string.sub (line, 1, -2)
end

EoHS.wrap_text = function (text, max_width, extras)
  text = text.."\n"
  local result = ""
  for line in string.gmatch (text, "([^\n]*)\n") do
    result = result..EoHS.wrap_line(line, max_width, extras).."\n"
  end
  return string.sub (result, 1, -2)
end

do
  local old_view_locked = false
  local EoHS_lock_counter = 0
  EoHS.lock_view = function()
    if not wesnoth.lock_view then return end
    if EoHS_lock_counter == 0 then
      old_view_locked = wesnoth.view_locked and wesnoth.view_locked()
      if not old_view_locked then wesnoth.lock_view(true) end
    end
    EoHS_lock_counter = EoHS_lock_counter + 1
  end
  EoHS.unlock_view = function()
    if not wesnoth.lock_view then return end
    EoHS_lock_counter = EoHS_lock_counter - 1
    if EoHS_lock_counter == 0 then
      if not old_view_locked then wesnoth.lock_view(false) end
    end
  end
  EoHS.view_should_not_be_locked = function()
    while EoHS_lock_counter > 0 do
      EoHS.debug ("The view was left locked when it shouldn't have been, probably because of an error during spellcasting.")
      EoHS.unlock_view()
    end
  end
end

local function is_even(v) return (v % 2) == 0 end
EoHS.pixels_to_hex = function(x1, y1, x2, y2)
  return 54*(x2 - x1), 72*(y2 - y1) + (is_even(x2) and 36 or 0) - (is_even(x1) and 36 or 0)
end

EoHS.show_unit_type_help = function(type_id)
  wesnoth.fire("open_help", {topic=(EoHS.get_unit_type(type_id).hide_help and "." or "").."unit_"..type_id})
end

local digits = {
  {57, 4}, {66, 4}, {73, 5}, {0, 5}, {8, 6}, {17, 5}, {25, 5}, {33, 5}, {41, 5},
  [0] = {48, 5},
}
EoHS.blit_digit = function (x,y, digit, options)
  options = options or {}
  local color = options.color or EoHS.white_color
  local info = digits [digit]
  local start = info [1]
  local height = 8
  if digit >3 then
    height = 16
  end
  
  return "~BLIT(misc/font8x8.png"..
    "~CROP("..(start-1)..","..height..",".. (info [2]+2)..",9)"..
    EoHS.colorizing_image_mod (color, 255, "green")..
    "~XBRZ(2),"..x..","..y..")",
    info [2]*2
end
EoHS.blit_number = function (x,y, number, options)
  options = options or {}
  local result = ""
  EoHS.assert (number >= 0, "this method of displaying numbers can't handle negative numbers")
  if number == 0 then return EoHS.blit_digit (x,y,number) end
  local digits = {}
  while number ~= 0 do
    local digit = number % 10
    table.insert (digits, 1, digit)
    number = math.floor (number/10)
  end
  for index, digit in ipairs (digits) do
    local modification, width = EoHS.blit_digit (x, y, digit, options)
    result = result..modification
    x = x + width+2
  end
  return result  
end


EoHS.menu_rectangle_aggregate = function(base, w, h)
  -- TODO don't double up corner shadows
  base = "dialogs/"..base.."-"
  local offsx = w/2 - 1
  local offsy = h/2 - 1
  local blit = function(ext, x, y, xscale, yscale)
    local image = base..ext..".png"
    local ew,eh = wesnoth.get_image_size(image)
    if xscale then ew = w end
    if yscale then eh = h end
    return "~BLIT("..image.."~SCALE("..ew..","..eh.."),"..(4+x*(4+w-ew))..","..(4+y*(4+h-eh))..")"
  end
  return "misc/blank-hex.png~SCALE("..(w+8)..","..(h+8)..")"..
    blit("background"   , 0, 0, true,  true)..
    blit("border-left"  , 0, 0, false, true)..
    blit("border-right" , 1, 0, false, true)..
    blit("border-top"   , 0, 0, true, false)..
    blit("border-bottom", 0, 1, true, false)..
    blit("border-topleft" , 0, 0)..
    blit("border-topright", 1, 0)..
    blit("border-botleft" , 0, 1)..
    blit("border-botright", 1, 1)
end

EoHS.add_temporary_anims = function(unit, anims)
  anims.apply_to = "new_animation"
  local adjust_func = EoHS.unit_animation_adjustments(unit)
  for i,anim in ipairs(anims) do adjust_func(anim) end
  table.insert(EoHS.force_subtag(unit, "modifications"), {"object",{id="EoHS_temporary_anims",
    {"effect",anims},
  }})
end
EoHS.remove_temporary_anims = function(unit)
  EoHS.remove_subtags(unit, "modifications.object", "EoHS_temporary_anims")
end

EoHS.animate_unit = function(anim_table, options)
  -- If we don't redraw first, the animation lags enough that it essentially starts in the middle
  --   or is skipped entirely. The redraw clears that behavior.
  if not (options and options.dont_redraw_first) then EoHS.redraw() end
  wesnoth.fire("animate_unit", anim_table)
end

local anim_x = function(a) return a.x or (a.unit and a.unit.x) or EoHS.get_subtag(a, "filter").x end
local anim_y = function(a) return a.y or (a.unit and a.unit.y) or EoHS.get_subtag(a, "filter").y end
EoHS.animate_units = function(tables, extras)
  if tables.used_for_animate_units then
    EoHS.err("EoHS.animate_units called with the same table multiple times, even though it mangles the input table")
    return
  end
  if not tables[1] then
    if extras and extras.after_scrolling then
      extras.after_scrolling()
    end
    return
  end
  local min_x,min_y,max_x,max_y
  local units_modified = {}
  for i,t in ipairs(tables) do
    t.x = anim_x(t)
    t.y = anim_y(t)
    table.insert(t, {"filter",{x=t.x, y=t.y}})
    if not (min_x and (min_x <= t.x)) then min_x = t.x end
    if not (min_y and (min_y <= t.y)) then min_y = t.y end
    if not (max_x and (max_x >= t.x)) then max_x = t.x end
    if not (max_y and (max_y >= t.y)) then max_y = t.y end
  end
  local centerness = function(t)
    return math.abs((t.x - min_x) * (t.y - min_y) * (t.x - max_x) * (t.y - max_y))
  end
  local centermost
  if extras and extras.force_center then
    for i,t in ipairs(tables) do
      if (anim_x(t) == extras.force_center.x) and (anim_y(t) == extras.force_center.y) then
        centermost = t
      end
    end
    if not centermost then
      centermost = {
        flag = "EoHS_animate_units_dummy",
        with_bars = false,
        x=extras.force_center.x, y=extras.force_center.y,
        {"filter",{x=extras.force_center.x, y=extras.force_center.y}},
      }
      table.insert(tables, centermost)
    end
  else
    local best_score
    for i,t in ipairs(tables) do
      local score = centerness(t)
      if not (best_score and (best_score >= score)) then
        best_score = score
        centermost = t
      end
    end
  end
  -- The animation will play wherever the centermost unit is.
  -- The game will scroll there automatically. BUT... while it scrolls, the units appear
  --   at their actual location, which might be bad - we use this for swarm movement,
  --   and the swarms cannot start at their starting location because there might also
  --   be a non-swarm unit there.
  -- So we preempt the problem by scrolling there ahead of time.
  EoHS.lock_view()
  EoHS.redraw()
  wesnoth.scroll_to_tile(centermost.x, centermost.y, true)
  if extras and extras.after_scrolling then extras.after_scrolling() end
  for i,t in ipairs(tables) do
    if t.animation then
      local unit = t.unit or EoHS.get_unit(t.x,t.y)
      EoHS.assert(unit, "EoHS.animate_units given a location with no unit")
      table.insert(units_modified, unit)
      local anim = t.animation
      t.animation = nil
      t.flag = "EoHS_animate_units"
      anim.apply_to = "EoHS_animate_units"
      EoHS.add_temporary_anims(unit, { {"animation",anim} })
      local put_extras = extras and extras.put_extras or {}
      put_extras.immediate=true
      EoHS.put_unit(unit, put_extras)
    end
    t.x = nil
    t.y = nil
    t.unit = nil
  end
  local anim_tag = centermost
  for i,t in ipairs(tables) do
    if t ~= centermost then table.insert(anim_tag, {"animate",t}) end
  end
  local proxy_unit = false
  if centermost.flag == "EoHS_animate_units_dummy" and not wesnoth.get_unit (extras.force_center.x, extras.force_center.y) then
    proxy_unit = true
    wesnoth.put_unit({
      type="Boat",
      x=extras.force_center.x,
      y=extras.force_center.y,
      side=1,
    })
    wesnoth.fire("hide_unit", {x=extras.force_center.x, y=extras.force_center.y})
  end
  wesnoth.fire("animate_unit", anim_tag)
  if proxy_unit then
    wesnoth.erase_unit(extras.force_center.x, extras.force_center.y)
  end
  EoHS.unlock_view()
  for i,unit in ipairs(units_modified) do
    EoHS.remove_temporary_anims(unit)
    EoHS.put_unit(unit)
  end
  tables.used_for_animate_units = true
end

EoHS.parallel_attacks = function(attacks, animation_extras)
  for i,attack in ipairs(attacks) do
    attack.extras.animate = false
    EoHS.game_action_simulations.attack_unit(attack.context, attack.extras)
  end
  
  EoHS.redraw_unexpected = true
  
  local original_units = {}
  local round = 1
  while true do
    local any = false
    local anims = {}
    local anim_xys = {} -- Hack - only play one animation from each location
    local unit_xys = {} -- TODO deal with the issue where one-attacking-many ends up with the one facing in various directions, which looks odd
    for i,attack in ipairs(attacks) do
      local a = attack.extras.animation_rounds[round]
      if a then
        any = true
        for i,thing in ipairs(a) do
          if type(thing) == "function" then
            thing()
          else
            local xy = anim_x(thing)..","..anim_y(thing)
            if thing.type then unit_xys[xy] = thing
            else
              if not anim_xys[xy] then
                anim_xys[xy] = true
                table.insert(anims, thing)
              end
            end
          end
        end
      end
    end
    
    if not any then break end
    for k,v in pairs(unit_xys) do
      local xy = v.x..","..v.y
      if not original_units[xy] then
        local unit = EoHS.get_unit(v.x, v.y)
        original_units[xy] = unit or {type="remove_unit", x=v.x, y=v.y}
      end
      if v.type == "remove_unit" then EoHS.remove_unit(v.x,v.y)
      else EoHS.put_unit(v, {allow_unknown_id=true, allow_new_location=true, allow_overwrite=true, immediate=true}) end
    end
    EoHS.redraw_unexpected = nil
    EoHS.animate_units(anims, animation_extras)
    EoHS.redraw_unexpected = true
    round = round + 1
  end
  EoHS.redraw_unexpected = nil
  for k,v in pairs(original_units) do
    if v.type == "remove_unit" then EoHS.remove_unit(v.x,v.y)
    else EoHS.put_unit(v, {allow_unknown_id=true, allow_new_location=true, allow_overwrite=true, immediate=true}) end
  end
end
EoHS.parallel_attacks_or_animate_once = function(parameters, attacks)
  local actor = EoHS.get_unit(parameters.actor_id)
  if attacks[1] then
    EoHS.parallel_attacks(attacks, {force_center=parameters.target_x and {x=parameters.target_x,y=parameters.target_y}})
  else
    EoHS.animate_units({{
      flag="attack",
      {"filter",{x=actor.x,y=actor.y}},
      hits = true,
      with_bars = true,
    }}, {force_center=parameters.target_x and {x=parameters.target_x,y=parameters.target_y}})
  end
end

EoHS.dump_server_pbl = function(passphrase)
  -- TODO: description can't be translatable?
  wesnoth.fire("wml_message", { logger="err", message=[[author="Elvish Pillager"
description="]]..tostring(EoHS.macros.EOHS_DESCRIPTION)..[["
email="web@elidupree.com"
icon="units/monsters/fire-dragon.png~BLIT(units/human-magi/great-mage.png~TC(2,magenta),72,30)~BLIT(units/monsters/fire-dragon.png~CROP(125,45,35,30),125,45)~BLIT(units/monsters/fire-dragon.png~CROP(108,70,52,130),108,70)~BLIT(halo/elven/ice-halo5.png,91,8)~CROP(72,34,72,72)~BLIT(misc/blank-hex.png~BG(0,0,0)~CROP(0,0,72,12),0,60)~BLIT(misc/font8x8.png~CROP(40,24,8,8)~CS(-255,0,-255),12,62)~BLIT(misc/font8x8.png~CROP(32,24,8,8)~CS(-255,0,-255),20,62)~BLIT(misc/font8x8.png~CROP(56,24,8,8)~CS(-255,0,-255),28,62)~BLIT(misc/font8x8.png~CROP(32,24,8,8)~CS(-255,0,-255),36,62)~BLIT(misc/font8x8.png~CROP(16,40,8,8)~CS(-255,0,-255),44,62)~BLIT(misc/font8x8.png~CROP(16,40,8,8)~CS(-255,0,-255),52,62)"
passphrase="]]..passphrase..[["
title="Era of High Sorcery"
type="era"
translate="true"
version="]]..EoHS.macros.EOHS_VERSION..[["
]]})
end

-- We need the crown overlay because otherwise the crown will go under the orb-recolorer, etc.
-- Other overlays work fine just by putting the orb-recolorer at the beginning of the list.
-- We don't worry about dumping stuff on top of other add-ons' overlays.
local no_attacks_overlay = w111 and "misc/orb.png~CS(-255,0,0)~O(0.5)" or "misc/orb-unmoved.png~CS(-255,-80,0)~O(0.5)"
local canrecruit_overlay = "misc/leader-crown.png"
local action_point_base = "misc/loyal-icon.png~CROP(15,8,11,4)~FL(horiz)"
local action_point_active, action_point_inactive, action_point_depleted = action_point_base,action_point_base,action_point_base
EoHS.soon (function()
  action_point_active = action_point_base..EoHS.colorizing_image_mod (EoHS.action_point_color, 255, "red")
  action_point_inactive = action_point_base..EoHS.colorizing_image_mod (EoHS.action_point_inactive_color, 255, "red")
  action_point_depleted = action_point_base..EoHS.colorizing_image_mod (EoHS.action_point_depleted_color, 255, "red")
end)


EoHS.action_points_overlay = function (unit, depleted)
  local action_points = EoHS.get_unit_action_points (unit)
  local displayed = math.min (20, math.max (EoHS.unit_base_action_points (unit), action_points))
  local result = {"misc/blank-hex.png"}
  for i=1,displayed do
    local image = (
        (action_points-depleted + i > displayed) and action_point_active or
        (action_points + i > displayed) and action_point_depleted or
        action_point_inactive)
    local offset = 10 + 3*i
    table.insert (result, "~BLIT("..image..",46,"..offset..")")
  end
  return table.concat (result)
end

local update_overlays_impl = function(unit)
  local variables = EoHS.force_unit_variables(unit)
  
  local results = {}
  local add = function(overlay)
    table.insert (results, overlay)
  end
  if (unit.side == wesnoth.current.side) and wesnoth.sides[unit.side].is_local and (wesnoth.sides[unit.side].controller == "human") and (unit.attacks_left == 0) then
    add(no_attacks_overlay)
  end
  if unit.canrecruit then add(canrecruit_overlay) end
  local add_var = function(varname)
    local overlay = variables[varname]
    if overlay then add(overlay) end
  end
  add_var("scroll_overlays")
  
  if variables["is_summon"] then add(EoHS.summon_overlay) end
  
  local duration = variables["disappears_after_turns"]
  if duration then
    for i=math.min(duration, EoHS.max_summon_duration_overlays-1),1,-1 do
      add("misc/blank-hex.png~BLIT("..EoHS.summon_overlay.."~SCALE(43,72)~CROP(0,0,43,"..(72-5*i).."),10,"..(5*i)..")")
    end
  end
  
  if EoHS.unit_has_actions (unit) then
    add(EoHS.action_points_overlay (unit, 0))
  end
  
  local overlays = table.concat (results, ",")
  local changed = unit.overlays ~= overlays
  unit.overlays = overlays
  
  return changed
end

--[[local drop_overlay_variable = function(unit, overlay) unit.overlays = string.gsub(unit.overlays, EoHS.lua_pattern_escape(overlay)..",?", "") end
local add_overlay_variable = function(unit, overlay) unit.overlays = unit.overlays and (unit.overlays ~= "") and unit.overlays..","..overlay or overlay end
local drop_overlay_immediate = function(wunit, overlay) wesnoth.fire("remove_unit_overlay", {x=wunit.x, y=wunit.y, image=overlay}) end
local add_overlay_immediate = function(wunit, overlay) wesnoth.fire(       "unit_overlay", {x=wunit.x, y=wunit.y, image=overlay}) end]]

EoHS.update_unit_overlays = function(unit)
  return update_overlays_impl(unit--[[, add_overlay_variable, drop_overlay_variable]])
end

--[[EoHS.update_wunit_overlays = function(wunit)
  return update_overlays_impl(wunit, add_overlay_immediate, drop_overlay_immediate)
end]]

EoHS.unit_racename = function(unit)
  local custom = EoHS.get_unit_variable(unit, "race")
  if custom then return EoHS.custom_races[custom].name end
  return wesnoth.races[unit.race].name
end
EoHS.unit_typename = function(unit)
  return EoHS.get_unit_variable(unit, "type_name_override") or unit.language_name
end
EoHS.unit_appellation = function(unit)
  if EoHS.get_unit_variable(unit, "is_wizard") or (unit.unrenamable and (unit.name ~= "")) or (unit.name ~= EoHS.get_unit_variable(unit, "original_name")) then
    return unit.name
  else
    return EoHS.unit_typename(unit)
  end
end

-->>)}
