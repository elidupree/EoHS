this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- events.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")

EoHS.scenario_over_cleanup_unit = function(unit)
  for i,info in ipairs(EoHS.dispellable_unit_variables) do
    if info.remove_after_scenario and EoHS.get_unit_variable(unit, info.varname) then
      info.remove_func(unit)
    end
  end
  unit.hitpoints = unit.max_hitpoints
  unit.moves = unit.max_moves
  unit.attacks_left = unit.max_attacks
  EoHS.set_subtag_attribute(unit, "status.poisoned" , false)
  EoHS.set_subtag_attribute(unit, "status.slowed"   , false)
  EoHS.set_subtag_attribute(unit, "status.uncovered", false)
end
local scenario_over_event = function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    EoHS.scenario_over_cleanup_unit(unit)
    EoHS.put_unit(unit)
  end
  EoHS.move_undying_to_recall()
  EoHS.set_variable("show_menu_item", false)
  EoHS.set_variable("scenario_inited", false)
  EoHS.set_variable("on_a_side_turn", false)
  --EoHS.set_variable("scenario_vars")
  for side in ipairs(wesnoth.sides) do
    EoHS.score_for_side_completing_game(side)
  end
  EoHS.score_for_game_ending()
end
EoHS.set_simple_event("victory", true, false, false, scenario_over_event)
EoHS.set_simple_event("defeat", true, false, false, scenario_over_event)

local units_func_context = function()
  local funcs = {}
  local variables_required = {}
  return function(a, b)
    if b then variables_required[a] = true end
    table.insert(funcs, b or a)
  end, function(units)
    units.with_variable = {}
    for i,unit in ipairs(units) do
      local variables = EoHS.get_unit_variables(unit)
      for v in pairs(variables_required) do if variables[v] then
        if units.with_variable[v] then table.insert(units.with_variable[v], unit)
        else units.with_variable[v] = {unit} end
      end end
    end
    for i,func in pairs(funcs) do func(units) end
  end
end
local do_side_turn_funcs; EoHS.at_side_turn, do_side_turn_funcs = units_func_context()
EoHS.set_simple_event("side_turn", true, true, true, function()
  EoHS.share_errors()
  
  EoHS.get_variable("time_to_check_synchronization", true)
  EoHS.get_units({ EoHS.is_on_the_map })
  EoHS.get_variable("time_to_check_synchronization")
  
  EoHS.set_variable("on_a_side_turn", true)
  if not EoHS.get_variable("settings_inited") then EoHS.init_settings() end
  
  if wesnoth.current.turn == 1 and wesnoth.current.side == 1 then
    EoHS.update_and_share_persistent_variables()
  else
    -- if someone else is in a menu, we don't want them to stop someone else's turn from beginning
    -- (which would happen due to the conflict of network synchronization with a blocking UI).
    -- Delaying your own turn until you leave the dialog is fine.
    EoHS.update_and_share_persistent_variables_of_side(wesnoth.current.side)
  end
  EoHS.apply_custom_default_dress_up_options()
  
  if not w111 then
    local swarms_to_move_side = EoHS.get_variable("swarms_to_move_side")
    if swarms_to_move_side then
      EoHS.move_swarms(swarms_to_move_side)
      EoHS.set_variable("swarms_to_move_side")
    end
  end
  
  EoHS.update_circle_of_protection_units()
  
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    if EoHS.get_unit_variable(unit, "best_max_moves_this_turn") then
      EoHS.set_unit_variable_immediate(unit, "best_max_moves_this_turn")
    end
    if unit.side == wesnoth.current.side and EoHS.get_unit_variable(unit, "is_wizard") then
      EoHS.set_unit_variable_immediate(unit, "shared_experience_this_turn", 0)
    end
    if unit.side == wesnoth.current.side and EoHS.get_unit_variable(unit, "forceful_summon") then
      EoHS.set_unit_variable_immediate(unit, "forceful_summon_had_chance_to_move", true)
    end
  end
  do_side_turn_funcs(units)
end)

local version_warning_message = function (version, you_are_running)
  if wesnoth.compare_versions(version, "==", "1.14.2") then
    EoHS.message(EoHS.substitute(_"Warning: $1| Wesnoth 1.14.2, which has a known bug that breaks EoHS.", {you_are_running}))
  elseif wesnoth.compare_versions(version, "<", "1.14.4") then
    EoHS.message(EoHS.substitute(_"Warning: $1| Wesnoth $2|, but EoHS is developed for versions 1.14.4 and later. This may cause bugs.", {you_are_running, version}))
  end
end

EoHS.soon(function()
  version_warning_message (wesnoth.game_config.version, _"You are running")
end)
local do_turn_refresh_funcs; EoHS.at_turn_refresh, do_turn_refresh_funcs = units_func_context()
EoHS.set_simple_event("turn_refresh", true, true, true, function()
  if wesnoth.current.turn == 1 then
    local version = EoHS.synchronize_choice(wesnoth.game_config.version)
    if not wesnoth.sides[wesnoth.current.side].is_local then
      version_warning_message (version, EoHS.substitute(_"$1| is running", {EoHS.get_side_variable(wesnoth.current.side, "original_nick")}))
    end
  end
  
  EoHS.handle_non_EoHS_terrain_changes("absolute")
  EoHS.update_terrain_changes()
  EoHS.flatten_swarms(wesnoth.current.side)
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  local rituals_finishing = {}
  for i,unit in ipairs(units) do
    -- if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
    if unit.side == wesnoth.current.side then
      if EoHS.get_unit_variable(unit, "ritual") then
        EoHS.set_unit_action_points_immediate(unit, 0)
        EoHS.set_unit_attribute_immediate(unit, "moves", 0)
        local runes_lit = EoHS.get_unit_variable(unit, "ritual_runes_lit") + 1
        EoHS.set_unit_variable(unit, "ritual_runes_lit", runes_lit)
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit)
        if runes_lit >= EoHS.get_unit_variable(unit, "ritual_runes") then
          table.insert(rituals_finishing, unit)
        end
      elseif EoHS.get_unit_variable (unit, "mud_touched_recently") then
        EoHS.set_unit_variable_immediate (unit, "mud_touched_recently")
        EoHS.set_unit_action_points_immediate(unit, 0)
        EoHS.set_unit_attribute_immediate(unit, "moves", 0)
      else
        -- only refresh units that were refreshed normally by Wesnoth,
        -- and not, for instance, the units that Chaos Survival summons
        -- in its own turn refresh event, which comes just before this one.
        if unit.attacks_left == unit.max_attacks then
          EoHS.set_unit_action_points_immediate(unit, EoHS.unit_base_action_points(unit))
        end
        EoHS.earn_mana_income(unit)
      end
    --[[else
      EoHS.update_unit_overlays(unit)]] -- now done by standardize_unit
    end
    --EoHS.verify_sync(unit)
  end
  
  do_turn_refresh_funcs(units)
  
  for i,unit in ipairs(rituals_finishing) do
    -- If two rituals happen at the same time, one of them might invoke events. So reload the units if necessary.
    unit = EoHS.get_unit(EoHS.unit_id(unit))
    if unit then
      local ritual = EoHS.get_unit_variable(unit, "ritual")
      if ritual then
        -- TODO some of this should be in the same file with the other ritual code
        EoHS.set_unit_variable(unit, "ritual")
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit) -- TODO better animations for starting and ending rituals
        local ritual_parameters = EoHS.get_subtag(unit, "variables.ritual_parameters")
        EoHS.remove_subtags(unit, "variables.ritual_parameters")
        EoHS.action_message(ritual_parameters, _"$actor_name| ($actor.x|,$actor.y|) finishes casting $ritual|.", {ritual=EoHS.actions[ritual].name})
        EoHS.during_action = true
        EoHS.actions[ritual].conclude(ritual_parameters)
        EoHS.during_action = nil -- TODO decide whether actions can be nested
        -- The ritual might have triggered scenario events, so update the units (we might use them later)
        units = EoHS.get_units({ EoHS.is_on_the_map })
      end
    end
  end
  
  local prepared_trainings = EoHS.synchronize_choice(function()
    local result = {}
    local side_trainings = EoHS.client_local_trainings[wesnoth.current.side]
    if side_trainings then for k,v in pairs(side_trainings) do
      if v.training then table.insert(result, {"training", v.training}) end
      if v.dress_up then table.insert(result, {"dress_up", v.dress_up}) end
    end end
    EoHS.client_local_trainings[wesnoth.current.side] = nil
    return result
  end, function() return {ai=true} end)
  if prepared_trainings and prepared_trainings.ai then
    EoHS.set_side_variable(wesnoth.current.side, "was_ever_ai", true)
    if not EoHS.get_side_variable (wesnoth.current.side, "AI_does_not_need_accommodations") then EoHS.set_variable("ai_is_playing", true) end
    for i,unit in ipairs(units) do
      if (unit.side == wesnoth.current.side) and unit.canrecruit and EoHS.get_unit_variable(unit, "is_wizard") and not EoHS.get_unit_variable(unit, "is_apprentice") then
        if EoHS.choose_alliance_for_ai(unit) then EoHS.put_unit(unit) end
        -- Hack: Make AIs able to recruit when they ignore extra_recruit
        if not w111 then wesnoth.fire("allow_recruit", { side=unit.side, type=unit.extra_recruit }) end
      end
      -- Hack: Suppress universal abilities to make AI faster
      -- if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
    end
  else
    -- TODO: un-duplicate code with menu.cfg
    for i,instruction in ipairs(prepared_trainings) do
      if instruction[1] == "training" then
        local unit = EoHS.get_unit(instruction[2].trainer_id)
        EoHS.train_unit_to_skillset(unit, instruction[2])
        EoHS.put_unit(unit)
      end
      if instruction[1] == "dress_up" then
        local unit = EoHS.get_unit(instruction[2].dresser_id)
        EoHS.set_unit_dress_up_options(unit, instruction[2])
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit)
      end
    end
  end
  
  -- At game start, maybe choose premade skills...
  if wesnoth.current.turn == 1 and wesnoth.current.side == 1 then
    EoHS.disunified (function()
      local no_network = true
      for side, info in ipairs (wesnoth.sides) do
        if not info.is_local then
          no_network = false
          break
        end
      end
      
      -- ...but only if there's no one waiting for you to complete this event stack
      -- i.e. either no networked players, or the current player is remote
      if no_network or (wesnoth.sides [wesnoth.current.side].is_local == false) then
        EoHS.maybe_choose_premade_skills()
      end
    end)
  end
  
  -- otherwise, put a tutorial prompt at the beginning of your turn
  if wesnoth.current.turn == 1 then
    for i,unit in ipairs(units) do
      EoHS.set_training_tutorial_prompt (unit)
    end
  end
  
  if EoHS.get_side_variable (wesnoth.current.side, "swarms_only") then wesnoth.fire ("end_turn", {}) end
  
  EoHS.redraw()
  
  EoHS.comfortably_during_turn = true
end)

EoHS.remove_forceful = function (unit)
  EoHS.set_unit_variable(unit, "forceful_summon_had_chance_to_move", nil)
  EoHS.set_unit_variable(unit, "forceful_summon", nil)
  EoHS.remove_subtags (unit, "modifications.trait", "EoHS_forceful")
  EoHS.update_all_type_adjustments (unit)
end

local do_side_turn_end_funcs; EoHS.at_side_turn_end, do_side_turn_end_funcs = units_func_context()
EoHS.set_simple_event("side_turn_end", true, w111, true, function()
  EoHS.comfortably_during_turn = false
  
  EoHS.share_errors()
  EoHS.set_variable("ai_is_playing")
  EoHS.remove_action_selection_tutorial_prompt()
  EoHS.remove_training_tutorial_prompt()
  
  if w111 then
    EoHS.move_swarms(wesnoth.current.side)
  else
    EoHS.set_variable("swarms_to_move_side", wesnoth.current.side)
  end
  
  EoHS.handle_non_EoHS_terrain_changes("relative")
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    -- if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
    if unit.side == wesnoth.current.side then
      if EoHS.get_unit_variable(unit, "forceful_summon_had_chance_to_move") then
        EoHS.remove_forceful(unit)
        EoHS.put_unit(unit)
      end
      if EoHS.tick_down_summon_duration(unit, true) then EoHS.remove_unit(unit.x, unit.y) end
    end
  end
  do_side_turn_end_funcs(units)
end)
local die_funcs = {}
EoHS.at_die = function(func) table.insert(die_funcs, func) end
EoHS.set_simple_event("die", true, false, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if unit then
    if unit.canrecruit and not wesnoth.eval_conditional({
      {"have_unit",{ side=unit.side, canrecruit=true, {"not",{x=unit.x, y=unit.y}} }}
    }) then
      if EoHS.profiling then EoHS.dump_profiling() end
      EoHS.score_for_side_completing_game(unit.side)
    end
    for i,func in ipairs(die_funcs) do func(unit) end
  end
end)
EoHS.set_simple_event("advance", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if EoHS.do_special_advancement_next(unit) then
    EoHS.set_unit_variable(unit, "doing_special_advancement", true)
    EoHS.put_unit(unit)
  end
end)
EoHS.set_simple_event("post_advance", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit") -- This calls standardize_unit, which calls update_all_type_adjustments, and put_unit
  local doing_special_advancement = EoHS.get_unit_variable(unit, "doing_special_advancement")
  if doing_special_advancement then
    EoHS.set_unit_variable(unit, "doing_special_advancement")
    if EoHS.get_unit_variable(unit, "is_summon") then
      EoHS.set_unit_variable(unit, "advanced_as_summon", unit.type)
    end
    if EoHS.get_unit_variable(unit, "is_wizard") then
      EoHS.set_unit_variable(unit, "wizard_level", (EoHS.get_unit_variable(unit, "wizard_level") or unit.level) + 1)
    end
    EoHS.update_all_type_adjustments(unit)
    -- It seems that when a unit levels up into its own type, it doesn't get fully healed.
    -- This behavior is undesirable.
    unit.hitpoints = unit.max_hitpoints
    EoHS.put_unit(unit)
  end
  -- Gently remind the user to train this unit
  if EoHS.unit_can_train(unit) then
    EoHS.do_only_on_client_controlling_human_side(unit.side, function()
      EoHS.remembered_menu_modes[EoHS.unit_id(unit)] = "training"
    end)
    -- TODO also make the double-click do training
  end
end)

local prerecruit_prerecall_shared = function(unit)
  EoHS.set_unit_variable(unit, "extra_action_points", 0)
  if EoHS.get_unit_variable(unit, "is_portal") then
    EoHS.update_portal_tunnels()
  end
  EoHS.put_unit(unit)
end

EoHS.set_simple_event("prerecruit", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if EoHS.side_is_angerpersonified(unit.side) then unit.gender = "female" end
  -- EoHS.standardize_unit(unit)
  
  if EoHS.get_unit_variable(unit, "is_wizard") then
    EoHS.set_unit_dress_up_options(unit, EoHS.random_dress_up_options(unit))
    local skillset = EoHS.get_unit_skillset(unit)
    EoHS.init_skillset(skillset)
    EoHS.set_unit_variable(unit, "mana", 0)
    EoHS.update_unit_graphics(unit)
    EoHS.update_wizard_trait_desc(unit)
  end
  if EoHS.get_unit_variable(unit, "forceful_summon") then
    local modifications = EoHS.force_subtag(unit, "modifications")
    table.insert(modifications, 1, {"trait",{
      id = "EoHS_forceful",
      name =_"battlemage bonus",
      description =_"For only one turn,",
      {"effect", {
        apply_to = "attack",
        increase_damage = "50%",
      }},
      {"effect", {
        apply_to = "hitpoints",
        increase_total = "50%",
      }},
    }})
    EoHS.remove_subtags (unit, "attack")
    unit.hitpoints = nil
    unit.max_hitpoints = nil
  end
  if ((unit.type == "Pirate Galleon") or (unit.type == "Transport Galleon")) and not EoHS.get_unit_variable(unit, "is_portal") then
    local modifications = EoHS.force_subtag(unit, "modifications")
    table.insert(modifications, {"trait",{
      id="EoHS_portable",
      name=_"portable",
      description=_"EoHS ships can be ported slowly across land, so that it's not so arbitrary whether your castle is connected to water.",
      {"effect",{
        apply_to="movement_costs",
        replace=true,
        {"movement_costs",{
          -- omitting only impassable, chasms, and mountains, which many units can't cross anyway.
          flat=unit.max_moves, fungus=unit.max_moves, hills  =unit.max_moves,
          sand=unit.max_moves, forest=unit.max_moves, village= 2,
          cave=unit.max_moves, frozen=unit.max_moves, castle = 2,
        }}
      }},
      {"effect",{
        apply_to="defense",
        replace=true,
        {"defense",{
          village= 60,
          castle = 60,
        }}
      }},
    }})
  end
  
  if not EoHS.get_unit_variable(unit, "is_summon") then
    EoHS.set_unit_variable(unit, "gold_paid", unit.cost)
  end
  
  if unit.race == "undead" then EoHS.set_unit_variable(unit, "is_reanimated", true) end

  prerecruit_prerecall_shared(unit)
end)
EoHS.set_simple_event("prerecall", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  prerecruit_prerecall_shared(unit)
end)

EoHS.set_simple_event("recall", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if EoHS.get_unit_variable(unit, "is_portal") then
    EoHS.update_portal_tunnels()
  end
  EoHS.replace_lich_with_recall_crypt(unit)
  EoHS.place_recall_lich_near_crypt(unit)
end)

EoHS.set_simple_event("recruit", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  
  if EoHS.get_altar_of_battle(unit.x, unit.y) and not EoHS.get_unit_variable(unit, "is_wizard") then
    EoHS.set_unit_attribute_immediate(unit, "experience", unit.max_experience)
    EoHS.unit_may_advance_soon(unit)
  end
end)

EoHS.set_simple_event("select", false, false, false, function()
  --EoHS.debug ("select")
  local unit = EoHS.get_unit (wesnoth.current.event_context.x1, wesnoth.current.event_context.y1)
  local info = wesnoth.sides [wesnoth.current.side]
  if info.is_local and info.controller == "human" then
    EoHS.maybe_choose_premade_skills (unit)
    if EoHS.action_selection_triggered_at and wesnoth.get_time_stamp() < EoHS.action_selection_triggered_at + 500 then
      EoHS.trigger_action_selection(unit)
    end
    
    EoHS.action_selection_triggered_at = nil
  end
end)

-->>)}
