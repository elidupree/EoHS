this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- utils-map.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local select = select
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.is_on_the_map = { "filter_location", {} } -- TODO: confirm this works
EoHS.location_is_on_the_map = function(x,y,allow_fme)
  if (not x) or (not y) then return false end
  local w,h = wesnoth.current.map.playable_width, wesnoth.current.map.playable_height
  if (x < 1) or (y < 1) or (x > w) or (y > h) then return false end
  if not allow_fme then
    local terrain = wesnoth.current.map[{x, y}]
    if (terrain == "_off^usr") or string.match(terrain, "%^_fme") then return false end
  end
  return true
end
-- Optional side, for circles of protection
EoHS.location_is_passable = function(x,y,side)
  if not EoHS.location_is_on_the_map(x,y) then return false end
  if EoHS.terrain_is_impassable(wesnoth.current.map[{x,y}]) then return false end
  if EoHS.contains_petrified_unit (x,y) then return false end
  if side and EoHS.location_is_enemy_circle_of_protection(x,y,side) then return false end
  return true
end
EoHS.location_is_known_passable = function(x,y,side)
  return EoHS.location_is_passable(x,y,side) and EoHS.hex_is_unshrouded(x,y,side)
end
EoHS.location_is_known_or_actual_passable = function(x,y,side,known_or_actual)
  return ((known_or_actual == "actual") and EoHS.location_is_passable or EoHS.location_is_known_passable)(x,y,side)
end

EoHS.hex_is_unfogged = function(x, y, side)
  return not wesnoth.sides.is_fogged (side, x, y)
end
EoHS.hex_is_unshrouded = function(x, y, side)
  return not wesnoth.sides.is_shrouded (side, x, y)
end

local function is_even(v) return v % 2 == 0 end
local raw_distance_between = function(x1,y1,x2,y2)
  local hdist = math.abs(x1 - x2)
  local vdist = math.abs(y1 - y2)
  if (y1 < y2 and not is_even(x1) and is_even(x2)) or
     (y2 < y1 and not is_even(x2) and is_even(x1))
  then vdist = vdist + 1 end
  return math.max(hdist, vdist + math.floor(hdist / 2))
end

EoHS.find_path = function(x1,y1,x2,y2,cost_func,maximum)
  if maximum then
    return EoHS.find_path(x1,y1,x2,y2,function(x,y,current_cost)
      local cost = cost_func(x,y,current_cost)
      if not cost then return nil end
      if current_cost+cost+raw_distance_between(x,y,x2,y2) > maximum then return nil end
      return cost
    end)
  else
    return wesnoth.paths.find_path(x1,y1,x2,y2,{ calculate = function(x,y,current_cost)
      local cost = cost_func(x,y,current_cost)
      if cost then
        if cost < 1 then EoHS.err("EoHS.find_path cost_func gave invalid cost") end
        if cost+current_cost >= 10000 then EoHS.err("EoHS.find_path exceeded wesnoth's arbitrary, undocumented limit") end
        return cost
      else
        return 10001
      end
    end })
  end
end
EoHS.distance_between = function(x1,y1,x2,y2,cost_func,maximum)
  if cost_func then
    local path,cost = EoHS.find_path(x1,y1,x2,y2,cost_func,maximum)
    return cost
  else
    return raw_distance_between(x1,y1,x2,y2)
  end
end

EoHS.find_reach = function(x1,y1,cost_func,maximum)
  local result = {}
  local frontier = EoHS.priority_queue(function(hex) return -hex.cost end)
  local found_hexes = {}
  local reach_hex = function(x,y,cost)
    if not (maximum and (cost > maximum)) then
      table.insert(result, {x=x,y=y,cost=cost})
      frontier.insert({x=x,y=y,cost=cost})
    end
  end
  local find_hex = function(x,y,old_cost)
    local idx = x..","..y
    if not found_hexes[idx] then
      found_hexes[idx] = true
      if old_cost then
        local cost = 1
        if cost_func then cost = cost_func(x,y,old_cost) end
        if cost then reach_hex(x,y,old_cost + cost) end
      else
        reach_hex(x,y,0)
      end
    end
  end
  find_hex(x1,y1)
  while frontier.top() do
    local start = frontier.pop()
    for x,y in helper.adjacent_tiles(start.x, start.y) do
      find_hex(x,y,start.cost)
    end
  end
  return result
end

EoHS.passable_only = function(side)
  return function(x, y, current_cost)
    if not EoHS.location_is_passable(x, y, side) then return nil end
    return 1
  end
end
EoHS.known_passable_only = function(side)
  return function(x, y, current_cost)
    if not EoHS.location_is_known_passable(x, y, side) then return nil end
    return 1
  end
end
EoHS.known_or_actual_passable_only = function(side, known_or_actual)
  return ((known_or_actual == "actual") and EoHS.passable_only or EoHS.known_passable_only)(side)
end

EoHS.consistent_coordinates = function(x, y)
  y=y*2
  if is_even(x) then y = y + 1 end
  return x, y
end

EoHS.euclidean_coordinates = function(x, y)
  if is_even(x) then y = y + 0.5 end
  return x*1.5, y*math.sqrt(3)
end

EoHS.angle_between = function(x1, y1, x2, y2)
  x1, y1 = EoHS.euclidean_coordinates(x1, y1)
  x2, y2 = EoHS.euclidean_coordinates(x2, y2)
  return math.atan2(y2-y1, x2-x1)
end

EoHS.specific_and_simplified_directions_to_hex = function(x1, y1, x2, y2, approx)
  if x2 == x1 then
    if y2 < y1 then return "n","n" end
    if y2 > y1 then return "s","s" end
    return nil
  end
  
  x1,y1 = EoHS.consistent_coordinates(x1, y1)
  x2,y2 = EoHS.consistent_coordinates(x2, y2)
    
  local we = (x2 < x1) and "w" or "e"
  if y2 == y1 then return we,"s"..we end
  local ns = (y2 < y1) and "n" or "s"
  
      if math.abs(x1 - x2) * 5 < math.abs(y1 - y2) * 2 then return ns..ns..we, ns
  elseif math.abs(x1 - x2)     < math.abs(y1 - y2)     then return ns..ns..we, ns..we
  elseif math.abs(x1 - x2)    == math.abs(y1 - y2)     then return     ns..we, ns..we
  elseif math.abs(x1 - x2) * 2 < math.abs(y1 - y2) * 5 then return we..ns..we, ns..we
  else                                                  return             we, ns..we end
end

EoHS.face_towards = function(unit, x, y, strict)
  local tx,ty = EoHS.consistent_coordinates(     x,      y)
  local ax,ay = EoHS.consistent_coordinates(unit.x, unit.y)
  local facing_west = (unit.facing == "nw") or (unit.facing == "sw")
      if tx > ax then unit.facing = (ty<ay) and "ne" or "se"
  elseif tx < ax then unit.facing = (ty<ay) and "nw" or "sw"
  elseif ty == ay then -- ...
  elseif facing_west and not strict then
                      unit.facing = (ty<ay) and "nw" or "sw"
  else                unit.facing = (ty<ay) and "n"  or "s"  end
end

EoHS.relative_directions = {
  n= {"ne","se","s", "sw","nw"},
  ne={"se","s", "sw","nw","n" },
  se={"s", "sw","nw","n", "ne"},
  s= {"sw","nw","n", "ne","se"},
  sw={"nw","n", "ne","se","s" },
  nw={"n", "ne","se","s", "sw"},
}

EoHS.direction_clockwise_from = function(direction) return EoHS.relative_directions[direction][1] end
EoHS.direction_counterclockwise_from = function(direction) return EoHS.relative_directions[direction][5] end

EoHS.get_loc_in_direction = function(x, y, direction)
      if direction == "n" then return x, y - 1
  elseif direction == "s" then return x, y + 1
  else
    local mod = 0
    if x % 2 == 0 then mod = 1 end
        if direction == "ne" then return x + 1, y + mod - 1
    elseif direction == "nw" then return x - 1, y + mod - 1
    elseif direction == "se" then return x + 1, y + mod
    elseif direction == "sw" then return x - 1, y + mod
    end
  end
end

EoHS.same_relative_location = function(x, y, src_x, src_y, dst_x, dst_y)
  local result_x = x + (dst_x - src_x)
  local result_y = y + (dst_y - src_y)
  if is_even(dst_x) ~= is_even(src_x) and not (is_even(x - src_x)) then
    if is_even(dst_x) then result_y = result_y + 1
    else                   result_y = result_y - 1
    end
  end
  return result_x, result_y
end

-->>)}
