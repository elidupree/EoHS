this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- action_features.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil


EoHS.must_target_unit = function (parameters, stuff)
  local unit = EoHS.get_seen_unit (parameters.target_x, parameters.target_y, parameters.side)
  if not unit then
    table.insert (stuff, {"label", {
      x= parameters.target_x, y= parameters.target_y,
      text =_"You must target a unit.",
      forbidden = true,
    }})
  end
end

EoHS.simple_location_enchantment = function(get, visual, warning)
  return function(parameters)
    local result = {}
    table.insert (result, {"item", {
      x= parameters.target_x, y= parameters.target_y, halo = visual,
    }})
    if get(parameters.target_x, parameters.target_y) then
      table.insert (result, {"label", {
        x= parameters.target_x, y= parameters.target_y,
        text = warning,
        forbidden = true,
      }})
    end
    return result
  end
end

EoHS.simple_unit_target = function(visual, restrictions)
  return function(parameters, extras)
    local result = {}
    table.insert (result, {"item", {
      x= parameters.target_x, y= parameters.target_y, halo = visual,
    }})
    local unit = EoHS.get_seen_unit (parameters.target_x, parameters.target_y, parameters.side)
    EoHS.must_target_unit (parameters, result)
    local restriction = unit and restrictions and restrictions(unit, parameters, result, extras)
    if restriction then
      table.insert (result, {"label", {
        x= parameters.target_x, y= parameters.target_y,
        text = restriction,
        forbidden = true,
      }})
    end
    return result
  end
end

EoHS.recruit_hex_targeting_range = function(parameters)
  return EoHS.find_reach(parameters.src_x, parameters.src_y,function(x,y) return wesnoth.get_terrain_info(wesnoth.get_terrain(x, y)).castle and 1 or nil end)
end

EoHS.recruit_hex_target_independent_stuff = function(parameters)
  local keep = wesnoth.get_terrain_info(wesnoth.get_terrain(parameters.src_x, parameters.src_y)).keep
  if not keep then
    return {{"text", {
      text = _"You're not on a keep, so you can't recruit.",
      forbidden = true,
    }}}
  end
end

EoHS.recruit_hex_target_dependent_stuff = function(parameters)
  if EoHS.get_seen_unit(parameters.target_x,parameters.target_y,parameters.side) then
    return {{"label", {
      x= parameters.target_x, y= parameters.target_y,
      text = _"This hex is already occupied.",
      forbidden = true,
    }}}
  end
  if not EoHS.hex_is_unfogged(parameters.target_x,parameters.target_y, parameters.side) then
    return {{"label", {
      x= parameters.target_x, y= parameters.target_y,
      text = _"You can't tell if this hex is occupied.",
      forbidden = true,
    }}}
  end
  local path = EoHS.find_path(parameters.src_x, parameters.src_y,parameters.target_x,parameters.target_y,function(x,y) return wesnoth.get_terrain_info(wesnoth.get_terrain(x, y)).castle and 1 or nil end)
  if not path[1] then
    return {{"label", {
      x= parameters.target_x, y= parameters.target_y,
      text = _"This hex isn't in a connected castle.",
      forbidden = true,
    }}}
  end
end

EoHS.make_touch_enchantment = function(id, action)
  action.is_enchantment = true
  action.no_targeting = true
  if not action.target_independent_stuff then action.target_independent_stuff = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local touch_enchantment = EoHS.get_unit_variable(actor, "touch_enchantment")
    if touch_enchantment == id then
      return {{"text",{forbidden = true, doesnt_affect_scribing = true, text =_"You already have this touch enchantment active."}}}
    elseif touch_enchantment then
      return {{"text",{color = EoHS.mediocre_color, text =_"You will replace your current touch enchantment."}}}
    end
    
    return {}
  end end
  if not action.happen then action.happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id)
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.set_unit_variable(actor, "touch_enchantment", id)
    EoHS.update_all_type_adjustments(actor)
    if action.sound then extras.do_on_clients_who_see(function() wml.fire("sound", { name = action.sound }) end) end
    EoHS.put_unit(actor, {immediate=true})
    EoHS.finish_casting(parameters.actor_id)
  end end
  
  EoHS.make_spell(id, action)
end

local ritual_desc = _"This spell takes $1| turns (counting the turn you start it), and takes effect at the beginning of its last turn. Once you start casting this spell, you cannot move, attack, or cast other spells, or earn mana until after its last turn (or the turn when you cancel it)."
EoHS.make_ritual = function(id, action)
  local ritual_turns = function(parameters)
    local result = action.turns
    local actor = EoHS.get_unit(parameters.actor_id)
    if action.is_summon and EoHS.get_unit_skill(actor, "summoner") then
      result = result - 1
    end
    if action.is_enchantment and EoHS.get_unit_skill(actor, "enchanter") then
      result = result - 1
    end
    return result
  end
  
  action.is_ritual = true
  
  if type(action.base_cost) == "table" then action.base_cost.action_points = 11
  elseif type(action.base_cost) == "function" then 
    local old_func = action.base_cost
    action.base_cost = function(parameters)
      local result = old_func(parameters)
      result.action_points = 11
      return result
    end
  else
    action.base_cost = { action_points = 11 }
  end
    
  local old_target_independent_stuff = action.target_independent_stuff
  action.target_independent_stuff = function(parameters, extras)
    local result = old_target_independent_stuff and old_target_independent_stuff (parameters, extras) or {}
    local turns = ritual_turns(parameters)
    table.insert (result, {"aspect",{kind =_"Ritual:", value = EoHS.substitute(_"$1| turns", {turns}), because = EoHS.substitute(ritual_desc, {turns})}})
    return result
  end
  action.happen = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    EoHS.set_unit_variable(actor, "ritual", id)
    EoHS.set_unit_variable(actor, "ritual_runes", ritual_turns(parameters))
    EoHS.set_unit_variable(actor, "ritual_runes_lit", 1)
    table.insert(EoHS.force_subtag(actor, "variables"), {"ritual_parameters",parameters})
    
    -- for graphics' sake:
    local ritual_parameters_fake = EoHS.get_fake_subtag(EoHS.force_unit_variables(actor), "ritual_parameters")
    for k,v in pairs(parameters) do if type(k) == "string" then ritual_parameters_fake[k] = v end end
    
    actor.moves = 0
    EoHS.set_unit_action_points_immediate(actor, 0)
    EoHS.update_all_type_adjustments(actor)
    EoHS.put_unit(actor)
  end
  
  EoHS.make_spell(id, action)
end

EoHS.soon(function()
  EoHS.make_action("cancel_ritual", {
    image = "scenery/tent-ruin-1.png",
    name = _"Cancel Ritual",
    description = _"You abandon your current ritual. You don't recover any of the cost, and you still can't move this turn, but you'll be able to move next turn.",
    
    no_targeting = true,
    
    use_message = function(parameters)
      local actor = EoHS.get_unit(parameters.actor_id)
      return _"$actor_name| ($actor.x|,$actor.y|) stops casting $ritual|.", {ritual=EoHS.actions[EoHS.get_unit_variable(actor, "ritual")].name}
    end,
    
    happen = function(parameters)
      local actor = EoHS.get_unit(parameters.actor_id)
      EoHS.set_unit_variable(actor, "ritual")
      EoHS.update_all_type_adjustments(actor)
      EoHS.put_unit(actor)
      EoHS.finish_casting(parameters.actor_id)
    end,
  })
end)

local default_attacks = {
  evocation={
    type = "fire", range = "ranged", damage = 8, number = 4, {"specials", EoHS.macros.WEAPON_SPECIAL_MAGICAL}
  },
  nature_magic ={
    type = "arcane", range = "ranged", damage = 6, number = 5, {"specials", EoHS.macros.WEAPON_SPECIAL_MAGICAL}
  },
  necromancy ={
    type = "cold", range = "ranged", damage = 10, number = 3, {"specials", EoHS.macros.WEAPON_SPECIAL_MAGICAL}
  },
}

EoHS.skill_attack = function(actor, realm)
  local result
  for attack in wml.child_range(actor, "attack") do
    if attack.name == "EoHS_"..realm.."_skill_ranged_attack" then
      result = EoHS.deep_copy(attack)
      EoHS.remove_subtags(result, "specials.*", "EoHS_lightning_paralysis")
      EoHS.remove_subtags(result, "specials.*", "EoHS_just_teleported_1")
      EoHS.remove_subtags(result, "specials.*", "EoHS_just_teleported_2")
      EoHS.remove_subtags(result, "specials.*", "EoHS_liminal_compensation")
      break
    end
  end
  
  if not result then result = default_attacks [realm] end
  
  --[[if EoHS.get_unit_skill (actor, "forceful") then
    result.damage = math.floor ((result.damage*15+5)/10)
    -- not using specials because it has unfavorable math (see bug #21620)
    -- table.insert (EoHS.force_subtag (result, "specials"), {"damage", {id = "EoHS_forceful", name =_"forceful", multiply = "1.5"}}) 
  end]]
  result.is_spell = true
  
  return result
end

EoHS.skill_attack_func = function(realm, func)
  return function(actor)
    local result = EoHS.skill_attack(actor, realm)
    func(result)
    return result
  end
end

EoHS.add_attack_stuff = function(stuff, parameters, defender_x, defender_y, attack)
  local attacker = EoHS.get_unit (parameters.actor_id)
  local defender = EoHS.get_seen_unit(defender_x, defender_y, parameters.side)
  if defender and not EoHS.get_circle_of_protection (defender_x, defender_y) then
    local name = EoHS.unit_appellation(defender)
    table.insert (stuff, {"item", {
      x=defender_x, y=defender_y,
      halo="attack",
    }})
    if EoHS.unit_is_immune_to_direct_spell_damage(defender) then
      table.insert (stuff, {"label", {
        x=defender_x, y=defender_y,
        text = EoHS.unit_is_immune_to_direct_spell_damage_description(defender),
        color = EoHS.label_color (EoHS.immune_color),
      }})
    else
      local attack_context = EoHS.game_action_simulations.fleshed_out_attack_context({
        attacker={x=attacker.x,y=attacker.y,attack=attack},
        defender={x=defender.x,y=defender.y}})
      if attack_context then
        table.insert (stuff, {"label", {
          x=defender_x, y=defender_y,
          text = EoHS.substitute (_"$damage|-$attacks|, $chance_to_hit|%", {
            damage = attack_context.attacker.damage,
            attacks = attack_context.attacker.attacks,
            chance_to_hit = attack_context.attacker.chance_to_hit,
          }),
          color = EoHS.label_color (wesnoth.sides.is_enemy (parameters.side, defender.side) and EoHS.valid_color or EoHS.bad_color),
        }})
      else
        EoHS.err("attack context failed in EoHS.make_attack_attribute")
      end
    end
  else
    table.insert (stuff, {"item", {
      x=defender_x, y=defender_y,
      halo=EoHS.get_circle_of_protection (defender_x, defender_y) and "potential_change" or "potential_attack",
    }})
  end
end
EoHS.spell_attack_info = function(attacker, defender_x, defender_y, attack)
  local attack_spec = EoHS.deep_copy(attack)
  attack_spec.name = "EoHS_action_attack"
  if EoHS.get_unit(defender_x,defender_y) and not EoHS.get_circle_of_protection (defender_x, defender_y) then
    local attacker_id = EoHS.unit_id(attacker)
    return {context={
      attacker={x=attacker.x,y=attacker.y,attack=attack_spec},
      defender={x=defender_x,y=defender_y}
    }, extras={spend_moves_and_attacks = false}}
  end
end


local path_types =
  {{1,1,1,1,1,1},
   {1,1,2,1,1,2},
   {1,2,1,2,1,2},}

EoHS.get_6hex_path_directions = function(x1,y1,x2,y2)
  for d,dir1 in ipairs({"n","ne","se","s","sw","nw"}) do
    for d,dir2 in ipairs({EoHS.direction_clockwise_from(dir1),EoHS.direction_counterclockwise_from(dir1)}) do
      for d,path_type in ipairs(path_types) do
        local x,y = x1,y1
        for pass = 1, math.ceil(EoHS.distance_between(x1,y1,x2,y2)/6) do
          for i=1,6 do
            x,y = EoHS.get_loc_in_direction(x,y,(path_type[i]==1) and dir1 or dir2)
            if (x==x2) and (y==y2) then
              local result = {}
              for j=1,6 do table.insert(result,(path_type[j]==1) and dir1 or dir2) end
              return result
            end
          end
        end
      end
    end
  end
end

EoHS.get_6hex_path_hexes = function(parameters, known_or_actual, allowed_hexes_func)
  local dirs = EoHS.get_6hex_path_directions(parameters.src_x,parameters.src_y,parameters.target_x,parameters.target_y)
  if not dirs then return {} end
  local x,y = parameters.src_x,parameters.src_y
  local result = {}
  for i=0,(EoHS.apply_farseer(5, parameters) - 1) do
    x,y = EoHS.get_loc_in_direction(x,y,dirs[1+(i%6)])
    if not EoHS.location_is_known_or_actual_passable(x,y,parameters.side,known_or_actual) then break end
    if allowed_hexes_func and not allowed_hexes_func(x,y) then break end
    table.insert(result, {x=x,y=y, previous_direction = dirs[1+(i%6)], next_direction = dirs[1+((i+1)%6)]})
  end
  return result
end

EoHS.get_6hex_path_targeting_range = function (parameters)
  local range = EoHS.apply_farseer(5, parameters)
  local found_hexes = {}
  local result = {}
  for d,dir1 in ipairs({"n","ne","se","s","sw","nw"}) do
    for d,dir2 in ipairs({EoHS.direction_clockwise_from(dir1),EoHS.direction_counterclockwise_from(dir1)}) do
      for d,path_type in ipairs(path_types) do
        local x,y = parameters.src_x,parameters.src_y
        for i=0,range - 1 do
          x,y = EoHS.get_loc_in_direction(x,y,(path_type[1+(i%6)]==1) and dir1 or dir2)
          -- Note: do NOT block at impassable hexes, because that could restrict the directions you can fire
          local index = x..","..y
          if not found_hexes [index] then
            found_hexes [index] = true
            table.insert (result, {x=x,y=y})
          end
        end
      end
    end
  end
  return result
end



EoHS.give_random_traits = function(unit, trait_list, num_traits)
  local modifications = EoHS.force_subtag(unit, "modifications")
  EoHS.assert(#trait_list >= num_traits, "trying to give more traits than are available")
  local remaining_traits = EoHS.deep_copy(trait_list)
  while num_traits > 0 do
    local idx = EoHS.random("1.."..#remaining_traits)
    table.insert(modifications, EoHS.macros["TRAIT_"..remaining_traits[idx]][1])
    table.remove(remaining_traits, idx)
    num_traits = num_traits - 1
  end
end

EoHS.update_summon_trability_info = function(unit, is_after_turn_end_event, summoner_died)
  local summoner = (not summoner_died) and EoHS.get_unit(EoHS.get_unit_variable(unit, "summoner_id"))
  local set_name_and_desc = function(trability)
    if trability.id == "EoHS_summon" then
      local disappears_after_turns = EoHS.get_unit_variable(unit, "disappears_after_turns")
      disappears_after_turns = disappears_after_turns and (disappears_after_turns + (is_after_turn_end_event and 1 or 0))
      local disappears_turn = disappears_after_turns and (wesnoth.current.turn+disappears_after_turns)
      if disappears_after_turns then
        trability.name = EoHS.substitute(_"summoned($1|)", {disappears_after_turns})
        trability.description = EoHS.substitute(_"Disappears at the end of your turn $1|", {disappears_turn})
      else
        trability.name = _"summoned"
        trability.description = ""
      end
    end
  end
  for i,subtag in ipairs(EoHS.get_subtags(unit, "modifications.trait"                         )) do set_name_and_desc(subtag) end
  for i,subtag in ipairs(EoHS.get_subtags(unit, "modifications.".."advancement"..".effect.abilities.dummy")) do set_name_and_desc(subtag) end
  for i,subtag in ipairs(EoHS.get_subtags(unit, "abilities.dummy"                             )) do set_name_and_desc(subtag) end
end
EoHS.soon (function() EoHS.at_die(function(maybe_summoner)
  local id = EoHS.unit_id(maybe_summoner)
  if id then
    local summons = EoHS.get_units({ EoHS.is_on_the_map, EoHS.has_unit_variable("summoner_id", id) })
    for i,unit in ipairs(summons) do
      EoHS.update_summon_trability_info(unit, false, true)
      EoHS.put_unit(unit)
    end
  end
end) end)

EoHS.max_summon_duration_overlays = 7
EoHS.summon_overlay = "misc/loyal-icon.png~CS(-50,80,100)"

EoHS.summon_unit = function(parameters, summon_specification, x, y, cost_paid, summoner, just_return)
  local unit = EoHS.deep_copy(summon_specification)

  unit.x = x
  unit.y = y
  unit.side = summoner and summoner.side or parameters.side
  unit.moves = 0
  unit.attacks_left = 0
  
  EoHS.set_unit_variable(unit, "is_summon", true)
  
  if summoner then
    EoHS.set_unit_variable(unit, "summoner_id", EoHS.unit_id(summoner))
    local duration = EoHS.get_wizard_setting(summoner, "summon_duration")
    if type(duration) == "number" then EoHS.set_unit_variable(unit, "disappears_after_turns", duration) end
  end
  
  if parameters.forceful then EoHS.set_unit_variable(unit, "forceful_summon", true) end
  
  local type_cfg = EoHS.get_unit_type(unit.type)
  local num_traits = type_cfg.num_traits or wesnoth.races[type_cfg.race].num_traits or 0
  -- Monsters should have traits anyway...
  if EoHS.get_unit_type(unit.type).race == "monster" then
    if unit.type == "Fire Guardian" then
      EoHS.give_random_traits(unit, {"DIM","SLOW"}, 1)
      num_traits = 2 -- Special case, also covers "elemental"
    elseif unit.type == "Fire Dragon" then
      -- No traits - they're already entirely variation!
    elseif EoHS.get_unit_variable(unit, "is_swarm_nest") then
      -- No traits
    else
      EoHS.give_random_traits(unit, {"STRONG","INTELLIGENT","QUICK","RESILIENT"}, 2)
      num_traits = 2
    end
  end
  
  local modifications = EoHS.force_subtag(unit, "modifications")
  if EoHS.get_unit_variable (unit, "is_black_cat") then
    table.insert(modifications, EoHS.macros["TRAIT_FERAL_MUSTHAVE"][1])
  end
  if num_traits == 0 then
    table.insert(modifications, {"trait",{
      id = "EoHS_summon",
    }})
  else
    table.insert(modifications, {"advancement",{ {"effect",{ apply_to = "new_ability", {"abilities",{ {"dummy",{
      id = "EoHS_summon",
    }} }} }} }})
  end
  EoHS.update_summon_trability_info(unit)
  
  if cost_paid and cost_paid.gold then
    EoHS.set_unit_variable(unit, "gold_paid", cost_paid.gold)
  end
  if cost_paid and cost_paid.mana then
    EoHS.set_unit_variable(unit, "mana_paid", cost_paid.mana)
  end
  --local wizard_symbol = wml.get_child(circumstances.caster, "variables").wizard_symbol
  --local image_width, image_height = image_dimensions(wizard_symbol)
  --add_overlay(summon, "misc/blank-hex.png~BLIT("..wizard_symbol..","..math.floor(20 - (image_width / 2))..",12)")
  
  if just_return then return unit end
  return EoHS.fake_recruit({unit})[1]
end

EoHS.tick_down_summon_duration = function(unit, do_on_map)
  local disappears_after_turns = EoHS.get_unit_variable(unit, "disappears_after_turns")
  if disappears_after_turns then
    if disappears_after_turns <= 0 then
      return true
    else
      EoHS.set_unit_variable(unit, "disappears_after_turns", disappears_after_turns - 1)
      EoHS.update_summon_trability_info(unit, true)
      EoHS.update_unit_overlays(unit)
      if do_on_map then EoHS.put_unit(unit) end
    end
  end
end

EoHS.fake_recruit = function(units, extras)
  local unit_sides = {}
  local unit_sides_list = {}
  for i,unit in ipairs(units) do
    unit = EoHS.create_wunit(unit).__cfg
    units[i] = unit
    
    -- TODO: but this gets done automatically anyway, what to do…
    if not (extras and extras.optimize_for_simple_units) then
      EoHS.update_all_type_adjustments(unit)
    end
    
    unit.hitpoints = nil
    if not unit_sides [unit.side] then
      unit_sides [unit.side] = true
      table.insert (unit_sides_list, unit.side)
    end
    EoHS.assert(not wesnoth.units.get(unit.x,unit.y), "EoHS.fake_recruit overwriting an existing unit")
    wesnoth.add_known_unit(unit.type)
    EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
  end
  for i,unit in ipairs(units) do
    EoHS.fire_event("prerecruit", unit.x, unit.y)
  end
  local animation_tag
  for i,unit in ipairs(units) do
    unit = EoHS.get_unit(unit.x, unit.y)
    if unit then
      local anim = { flag = "recruited", { "filter", { x=unit.x, y=unit.y }} }
      if animation_tag then table.insert(animation_tag, {"animate",anim}) else animation_tag = anim end
    end
  end
  local result_units = {}
  if animation_tag then
    EoHS.animate_unit(animation_tag, {dont_redraw_first=true})
    for i,unit in ipairs(units) do
      unit = EoHS.get_unit(unit.x, unit.y)
      if unit then
        EoHS.fire_event("recruit", unit.x, unit.y)

        unit = EoHS.get_unit(unit.x, unit.y)
        if unit then
          table.insert(result_units, unit)
        end
      end
    end
  end
  for dummy, side in ipairs (unit_sides_list) do
    wml.fire("redraw", { side = side })
  end
  return result_units
end

EoHS.fake_recall = function(units)
  for i,unit in ipairs(units) do
    EoHS.assert(not wesnoth.units.get(unit.x,unit.y), "EoHS.fake_recall overwriting an existing unit")
    EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
  end
  for i,unit in ipairs(units) do
    EoHS.fire_event("prerecall", unit.x, unit.y)
  end
  local animation_tag
  for i,unit in ipairs(units) do
    unit = EoHS.get_unit(unit.x, unit.y)
    if unit then
      local anim = { flag = "recruited", { "filter", { x=unit.x, y=unit.y }} }
      if animation_tag then table.insert(animation_tag, {"animate",anim}) else animation_tag = anim end
    end
  end
  if animation_tag then
    EoHS.animate_unit(animation_tag, {dont_redraw_first=true})
    for i,unit in ipairs(units) do
      unit = EoHS.get_unit(unit.x, unit.y)
      if unit then
        EoHS.fire_event("recall", unit.x, unit.y)

        unit = EoHS.get_unit(unit.x, unit.y)
        if unit then
          EoHS.standardize_unit(unit)
          wml.fire("redraw", { side = unit.side })
          return unit
        end
      end
    end
  end
end

EoHS.summoning_spell_description = function(typename)
  return EoHS.substitute(_"You summon a $1| onto the target hex.", {typename})
end

EoHS.summoning_spell_stuff = function(parameters)
  local actor = EoHS.get_unit(parameters.actor_id)
  
  local summon_duration = EoHS.get_wizard_setting(actor, "summon_duration")
  local summon_duration_desc = ""
  if summon_duration ~= "infinite" then
    summon_duration_desc = EoHS.substitute(_" Summoned creatures can act for $1| turns, and disappear at the end of the last turn.", {summon_duration})
  end
  return {{"text", {
    text = EoHS.substitute(_"Summoning is like recruiting, but you don't have to be in a castle.$1|",{summon_duration_desc})
  }}}
end

local set_summoning_shared = function(id, specification, action)
  action.is_summon = true
  local prototype_spec = EoHS.deep_copy(specification)
  prototype_spec.random_traits = false
  prototype_spec.random_gender = false
  prototype_spec.generate_name = false
  local wprototype = EoHS.create_wunit(prototype_spec)
  local prototype = wprototype.__cfg
  EoHS.set_unit_variable(prototype, "is_summon", true)
  EoHS.update_all_type_adjustments(prototype)
  prototype.moves = prototype.max_moves
  prototype.hitpoints = prototype.max_hitpoints
  
  action.summon_prototype_image = EoHS.unit_thumbnail(prototype, true)
  if not action.image then
    action.image = action.summon_prototype_image
  elseif (type(action.image) == "table") and not action.image.image_modded then
    action.image.image_modded = action.summon_prototype_image
  end
  local typename = EoHS.substitute("$1|", {EoHS.unit_typename(prototype)}) -- can't examine tstrings, so convert them
  if not action.name        then action.name        = string.match(typename, " ") and typename or EoHS.substitute(_"Summon $1|", {typename}) end
  if not action.description then action.description = EoHS.summoning_spell_description(typename) end
  if action.description_addendum then action.description = action.description.." "..action.description_addendum end
  if not action.base_range  then action.base_range  = 1 end
  -- No default AP cost - I want to have to specify those
  if (type(action.base_cost) == "table") and not action.base_cost.mana then action.base_cost.mana = prototype.cost end
  if not action.target_independent_stuff then action.target_independent_stuff = EoHS.summoning_spell_stuff end
  
  if not action.left_column_grid then action.left_column_grid = function(dialog_context, parameters, extras)
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    return EoHS.unit_preview_pane(dialog_context, prototype, {image_override=extras.action_image})
  end end
  return prototype, wprototype
end

EoHS.make_summoning_spell = function(id, specification, action)
  local prototype, wprototype = set_summoning_shared(id, specification, action)
  if not action.target_dependent_stuff then action.target_dependent_stuff = function(parameters)
    local stuff = {}
    local problem
    if (not EoHS.wunit_can_move_on_hex(wprototype, parameters.target_x, parameters.target_y)) and not EoHS.unit_is_immobile(prototype) then
      problem = _"You can only summon a unit onto a hex where it can move."
    elseif not EoHS.hex_is_unfogged(parameters.target_x, parameters.target_y, parameters.side) then
      problem = _"You can't tell if this hex is occupied."
    elseif EoHS.get_seen_unit(parameters.target_x, parameters.target_y, parameters.side) then
      problem = _"This hex is already occupied."
    end
    table.insert (stuff, {"item", {
      x=parameters.target_x,y=parameters.target_y,
      halo = action.summon_prototype_image,
      require_no_invisible_enemy=true,
    }})
    if problem then
      table.insert (stuff, {"label", {
        x=parameters.target_x,y=parameters.target_y,
        text= problem,
        forbidden = true,
      }})
    end
    return stuff
  end end
  
  if not action.happen then action.happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    EoHS.summon_unit(parameters, specification, parameters.target_x, parameters.target_y, extras.cost_paid, EoHS.get_unit(parameters.actor_id))
    
    EoHS.finish_casting(parameters.actor_id)
  end end
  
  EoHS.make_spell(id, action)
end

EoHS.space_making_path = function(src_x, src_y, unit_pushing_cost_func)
  local best_endpoints = {}
  local best_cost
  local frontier = EoHS.priority_queue(function(hex) return -hex.cost end)
  local found_hexes = {}
  local find_hex = function(x,y,prev,cost)
    local idx = x..","..y
    local f = found_hexes[idx]
    local replace
    if f then
      if cost == f.cost then table.insert(f.prev, prev) end
      if cost < f.cost then replace = true end
    else replace = true end
    if replace then
      f = {x=x,y=y,prev={prev},cost=cost}
      found_hexes[idx] = f
      frontier.insert(f)
    end
  end
  find_hex(src_x, src_y, nil, 0)
  while frontier.top() do
    local start = frontier.pop()
    local unit = EoHS.get_unit(start.x, start.y)
    if best_cost then
      EoHS.assert(start.cost >= best_cost, "algorithm is wrong")
      if (start.cost == best_cost) and not unit then 
        table.insert(best_endpoints, start)
      end
      if start.cost > best_cost then break end
    else
      local f = found_hexes[start.x..","..start.y]
      if f == start then
        if unit then
          local wunit = wesnoth.units.get(start.x, start.y)
          for x,y in helper.adjacent_tiles(start.x, start.y) do
            local step_cost = unit_pushing_cost_func(unit, x, y, wunit)
            if step_cost then
              find_hex(x,y,start,start.cost+step_cost)
            end
          end
        else
          best_cost = start.cost
          best_endpoints = {start}
        end
      end
    end
  end

  if best_cost then
    local result = {}
    local endpoint = best_endpoints[EoHS.random("1.."..#best_endpoints)]
    while endpoint.prev[1] do
      table.insert(result, endpoint)
      local prev = endpoint.prev[EoHS.random("1.."..#endpoint.prev)]
      endpoint = prev
    end
    table.insert(result, endpoint)
    return result
  end
end

EoHS.make_summoning_ritual = function(id, specification, action)
  local prototype, wprototype = set_summoning_shared(id, specification, action)

  if not action.target_dependent_stuff then action.target_dependent_stuff = function(parameters)
    local stuff = {}
    local problem
    local unit = EoHS.get_seen_unit(parameters.target_x, parameters.target_y, parameters.side)
    if (not EoHS.wunit_can_move_on_hex(wprototype, parameters.target_x, parameters.target_y)) and not EoHS.unit_is_immobile(prototype) then
      problem = _"You can only summon a unit onto a hex where it can move."
    elseif (parameters.target_x == parameters.src_x) and (parameters.target_y == parameters.src_y) then
      problem = _"You can't summon a unit at your own location."
    elseif unit and EoHS.unit_is_immobile(unit) then
      problem = _"You can't push an immobile unit out of the way."
    end
    table.insert (stuff, {"item", {
      x=parameters.target_x,y=parameters.target_y,
      halo = action.summon_prototype_image,
      require_no_invisible_enemy=true,
    }})
    if problem then
      table.insert (stuff, {"label", {
        x=parameters.target_x,y=parameters.target_y,
        text= problem,
        forbidden = true,
      }})
    end
    return stuff
  end end
  local old_target_independent_stuff = action.target_independent_stuff
  action.target_independent_stuff = function(parameters, extras)
    local stuff = old_target_independent_stuff and old_target_independent_stuff(parameters, extras) or {}
    table.insert (stuff, {"text", {text = _"In a summoning ritual, the summoned creature can move on the turn it appears. If there is a unit on the target hex, that unit is pushed out of the way."}})
    return stuff
  end
  
  if not action.conclude then action.conclude = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local path = EoHS.space_making_path(parameters.target_x, parameters.target_y, function(unit, x, y, wunit)
      if EoHS.location_is_passable(x,y,parameters.side) and not EoHS.unit_is_immobile(unit) then
        local step_cost = 10000 -- cost of moving a unit
        if EoHS.wunit_can_move_on_hex(wunit,x,y) then
          -- very slightly prefer easier moves
          step_cost = step_cost + math.floor(100 * wesnoth.units.movement_on(wunit, wesnoth.get_terrain(x,y)) / unit.max_moves)
        else
          -- don't make an illegal move unless you absolutely have to
          step_cost = step_cost + 1000000
        end
        -- pushing this or any other wizard is also fairly undesirable
        if (x==actor.x) and (y==actor.y) then
          step_cost = step_cost + 100000
        elseif EoHS.get_unit_variable(unit, "wizard") then
          step_cost = step_cost + 200000
        end
        return step_cost
      end
    end)
    if path then
      for i,h in ipairs(path) do
        local prev = path[i+1]
        if prev then
          local unit = EoHS.get_unit(prev.x,prev.y)
          EoHS.remove_unit(unit.x,unit.y)
          unit.x,unit.y = h.x,h.y
          EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
        end
      end
      local unit = EoHS.summon_unit(parameters, specification, parameters.target_x, parameters.target_y, nil, actor, true)
      unit = EoHS.create_wunit(unit).__cfg
      if action.finish_unit then action.finish_unit(unit) end
      EoHS.update_all_type_adjustments(unit)
      unit.hitpoints = unit.max_hitpoints
      unit.moves = unit.max_moves
      EoHS.assert(not wesnoth.units.get(unit.x,unit.y), "summoning ritual overwriting an existing unit")
      if EoHS.get_unit_variable(unit, "forceful_summon") then
        EoHS.set_unit_variable(unit, "forceful_summon_had_chance_to_move", true)
      end
      EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
      EoHS.fire_event("prerecruit", unit.x, unit.y)
      unit = EoHS.get_unit(unit.x, unit.y)
      if unit then
        EoHS.set_unit_action_points_immediate(unit, EoHS.unit_base_action_points(unit))
        EoHS.animate_unit({ flag = "recruited", { "filter", { x=unit.x, y=unit.y }} })
        EoHS.fire_event("recruit", unit.x, unit.y)
        unit = EoHS.get_unit(unit.x, unit.y)
        if unit then
          wml.fire("redraw", { side = unit.side })
        end
      end
    else
      EoHS.message(_"The summoning failed because there was no room to place the unit.")
    end
    
    EoHS.finish_casting(parameters.actor_id)
  end end
  
  EoHS.make_ritual(id, action)
end


-->>)}
