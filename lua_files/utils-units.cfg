this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- utils-units.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local select = select
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.create_wunit = function(unit)
  if not EoHS.context.synchronized then
    unit.random_traits = false
    unit.random_gender = false
    unit.generate_name = false
  end
  return wesnoth.units.create(unit)
end

EoHS.contains_petrified_unit = function(x,y)
  local c = EoHS.context
  local p = c.petrified_units; if not p then p = {}; c.petrified_units = p end
  local idx = x..","..y
  local ph = p[idx]
  if ph == nil then
    local wunit = wesnoth.units.get(x,y)
    if wunit and wunit.status.petrified then
      p[idx] = true
      return true
    else
      p[idx] = false
      return false
    end
  end
  return ph
end

local debug_check_unison_unit_tables = function()
  if EoHS.get_variable("debug_mode") and EoHS.context.unison then
    for k,v in pairs(EoHS.context.unison_unit_tables) do
      EoHS.assert(EoHS.context.unison_unit_tables[EoHS.unit_id(v)] == v)
      EoHS.assert(EoHS.context.unison_unit_tables[v.x..","..v.y] == v)
    end
  end
end
local record_unit = function(unit)
  -- Standardize every unit EoHS looks at.
  -- Standarization takes less time than simply copying (or Wesnoth dumping) a unit table,
  --   so it isn't too bad performance-wise to do it here.
  -- TODO: we used to not do this, so there are various unnecessary standardize_unit calls
  --   in various parts of the code. TODO remove them.
  local needed_standardized = EoHS.standardize_unit(unit)
  local put_extras = {}

  local id = EoHS.unit_id(unit)
  local context = EoHS.context
  if context.unison then
    local tables = context.unison_unit_tables
    tables[unit.x..","..unit.y] = unit
    EoHS.assert(id, "Unit has no ID after standardization in unison?")
    if tables[id] then
      -- Duplicate ID... make another one
      id = EoHS.make_new_unit_id()
      EoHS.set_unit_variable(unit, "id", id)
      needed_standardized = true
      put_extras.allow_unknown_id = true
      put_extras.allow_overwrite = true
    end
    tables[id] = unit
    if needed_standardized then EoHS.put_unit(unit, put_extras) end
  else
    local tables = context.disunified_unit_tables
    tables[unit.x..","..unit.y] = unit
    if id then tables[id] = unit end
  end
  debug_check_unison_unit_tables()
end
local retrieve_unit = function(arg1, arg2)
  local unit,index
  if arg2 then index = arg1..","..arg2
  else         index = arg1 end
  
  local context = EoHS.context
  local unison_unit_tables = context.unison_unit_tables
  if context.unison then
    unit = unison_unit_tables[index]
  else
    unit = context.disunified_unit_tables[index]
    if unison_unit_tables and not unit then
      unit = EoHS.deep_copy(unison_unit_tables[index])
      if unit then
        record_unit(unit)
      end
    end
  end
  return unit
end

local xy_sort = function(a,b)
  if a.x < b.x then return true  end
  if b.x < a.x then return false end
  return a.y < b.y
end
EoHS.make_new_unit_id = function()
  EoHS.assert(EoHS.context.unison, "EoHS.make_new_unit_id used in an disunified context")
  local id = EoHS.get_variable("next_unit_id")
  EoHS.set_variable("next_unit_id", id + 1)
  return id
end
EoHS.get_units = function(filter)
  local wunits = wesnoth.units.find_on_map(filter)
  
  -- I've been told there's a bug in 1.10 that makes the order of filtered units
  -- not be consistent. Therefore, I need to sort them myself by something consistent
  -- (their location). I could make this 1.10-specific, but I don't see sufficient reason
  -- to trust that this behavior is correct and will remain correct.
  --table.sort(wunits, xy_sort)
  
  local result = {}
  local unison = EoHS.context.unison
  local unison_wunits = EoHS.context.unison_wunits
  for i,wunit in ipairs(wunits) do
    if not wunit.status.petrified then -- Petrified units are obstructions, not units
      local unit = retrieve_unit(wunit.x, wunit.y)
      if not unit then
        unit = wunit.__cfg
        if unison then unison_wunits[unit] = wunit end
        record_unit(unit)
      end
      if unit then result[#result+1] = unit end
    end
  end
  
  return result
end

EoHS.get_unit = function(arg1, arg2)
  local unit = retrieve_unit(arg1, arg2)
  if not unit then
    local wunit
    if arg2 then
      wunit = wesnoth.units.get(arg1, arg2)
    else
      -- Hack: shadowm told me that scripts should basically never use underlying_id,
      -- so I converted EoHS to generate its own IDs, and made EoHS.get_unit take either an x,y
      -- or an EoHS unit id. TODO consider making this be two separate functions.
      wunit = wesnoth.units.find_on_map({ EoHS.has_unit_variable("id", arg1) })[1]
    end
    if wunit and not wunit.status.petrified then -- Petrified units are obstructions, not units
      EoHS.assert(tonumber(wunit.x), "EoHS.get_unit got a unit with invalid x value")
      EoHS.assert(tonumber(wunit.y), "EoHS.get_unit got a unit with invalid y value")
      unit = wunit.__cfg
      local context = EoHS.context
      if context.unison then context.unison_wunits[unit] = wunit end
      record_unit(unit)
    end
  end
  return unit
end

EoHS.get_seen_unit = function(x,y,viewing_side)
  local unit = EoHS.get_unit(x,y)
  if not viewing_side then return unit end
  if not unit then return nil end
  local unfogged = EoHS.hex_is_unfogged(x,y,viewing_side)
  if not unfogged then return nil end
  if EoHS.game_action_simulations.unit_wunit_is_hidden(unit, wesnoth.units.get(x,y), viewing_side) then return nil end
  return unit
end

EoHS.get_seen_or_actual_unit = function(x,y,viewing_side, known_or_actual)
  return ((known_or_actual == "actual") and EoHS.get_unit(x,y) or EoHS.get_seen_unit(x,y,viewing_side))
end

EoHS.at_beginning_of_event_get_autostored_unit = function(varname)
  -- One too many times did I fail to update this to be consistent with EoHS.get_unit,
  -- and its only purpose anyway was to save a miniscule amount of time.
  -- Just use get_unit. TODO probably remove all uses of this
  local x,y = wml.variables[varname..".x"], wml.variables[varname..".y"]
  if x and y then return EoHS.get_unit(x,y) end
  --[[
  local unit = wml.variables[varname]
  if unit then
    record_unit(unit)
    EoHS.context.unison_wunits[unit] = wesnoth.units.get(unit.x, unit.y)
    return unit
  end
  ]]
end

EoHS.transformed_unit = function(unit, unit_type)
  local proxy_unit = EoHS.create_wunit(unit)
  wesnoth.transform_unit(proxy_unit, unit_type or unit.type)
  local result = proxy_unit.__cfg
  result.hitpoints = unit.hitpoints
  return result
end

EoHS.transform_unit = function(unit, unit_type)
  EoHS.shallow_overwrite(unit, EoHS.transformed_unit(unit, unit_type))
end

EoHS.put_unit = function(unit, options)
  local x = tonumber(unit.x)
  local y = tonumber(unit.y)
  if (not x) or (not y) then EoHS.err("EoHS.put_unit at "..unit.x..","..unit.y..", which is not a location") end
  local w,h = wesnoth.get_map_size()
  if (x < 1) or (y < 1) or (x > w) or (y > h) then EoHS.err("EoHS.put_unit at "..unit.x..","..unit.y..", which is off the map") end
  EoHS.assert(EoHS.context.unison, "EoHS.put_unit used in an disunified context")
  EoHS.assert(EoHS.context.unison_unit_tables, "EoHS.put_unit called not during an event")
  if not (options and options.allow_new_location) then
    EoHS.assert(EoHS.context.unison_unit_tables[unit.x..","..unit.y] == unit, "EoHS.put_unit: This unit is being put back at a different location when it's not supposed to be?")
  end
  local id = EoHS.unit_id(unit)
  if options and options.allow_overwrite then
    EoHS.remove_unit(x,y)
  else
    local wunit_here = wesnoth.units.get(x,y)
    if wunit_here then
      local wid = EoHS.unit_id(wunit_here)
      EoHS.assert((not wid) or (wid == id), "EoHS.put_unit overwriting another unit")
    end
  end
  if id then
    if not (options and options.allow_unknown_id) then
      EoHS.assert(EoHS.context.unison_unit_tables[id] == unit,
        "EoHS.put_unit: This unit has an ID already, but we didn't get it from the map with that ID, or it's no longer valid to put?")
    end
    EoHS.context.unison_unit_tables[id] = unit
  end
  EoHS.context.unison_unit_tables[unit.x..","..unit.y] = unit
  if options and options.immediate then
    EoHS.context.units_to_put[unit] = nil
    wesnoth.units.to_map(unit)
    wml.fire("capture_village",{x=unit.x,y=unit.y,side=unit.side})
    EoHS.context.unison_wunits[unit] = wesnoth.units.get(unit.x,unit.y)
  else
    if not EoHS.context.units_to_put[unit] then
      table.insert(EoHS.context.units_to_put, unit)
      EoHS.context.units_to_put[unit] = true
    end
  end
  debug_check_unison_unit_tables()
end
EoHS.remove_unit = function(x,y)
  EoHS.assert(EoHS.context.unison, "EoHS.remove_unit used in an disunified context")
  EoHS.assert(EoHS.context.unison_unit_tables, "EoHS.remove_unit called not during an event")
  local unit = retrieve_unit(x, y)
  if unit then
    EoHS.context.unison_unit_tables[x..","..y] = nil
    EoHS.context.unison_unit_tables[EoHS.unit_id(unit)] = nil
    EoHS.context.units_to_put[unit] = nil
    EoHS.context.unison_wunits[unit] = nil
  end
  wesnoth.units.erase(x,y)
  debug_check_unison_unit_tables()
end
local allowed_immediate_attributes = {
  side=true, attacks_left=true, extra_recruit=true, advances_to=true, hitpoints=true, experience=true,
  moves=true, resting=true, hidden=true, role=true, facing=true, }
  
EoHS.set_unit_attribute_immediate = function(unit, attr, val)
  EoHS.assert(allowed_immediate_attributes[attr], "EoHS.set_unit_attribute_immediate with invalid attr "..attr)
  unit[attr] = val
  local unison_wunits = EoHS.context.unison_wunits
  if not unison_wunits then return end
  local wunit = unison_wunits[unit]
  if not wunit then return end
  wunit[attr] = val
end
EoHS.set_unit_variable_immediate = function(unit, varname, val)
  EoHS.set_unit_variable(unit, varname, val)
  local unison_wunits = EoHS.context.unison_wunits
  if not unison_wunits then return end
  local wunit = unison_wunits[unit]
  if not wunit then return end
  EoHS.set_unit_variable(wunit, varname, val)
end
EoHS.set_unit_status_immediate = function(unit, status, val)
  EoHS.set_subtag_attribute(unit, "status."..status, val)
  local unison_wunits = EoHS.context.unison_wunits
  if not unison_wunits then return end
  local wunit = unison_wunits[unit]
  if not wunit then return end
  wunit.status[status] = val
end
EoHS.update_unit_overlays_immediate = function(unit)
  local changed = EoHS.update_unit_overlays(unit)
  local unison_wunits = EoHS.context.unison_wunits
  if not unison_wunits then return end
  local wunit = unison_wunits[unit]
  if not wunit then return end
  -- HACK: the attempted optimizations in this function actually just call back into lua in a way that is even slower.
  -- TODO 1.13: will celticminstrel have made a feature to optimize this?
  EoHS.update_wunit_overlays(wunit)
  -- if changed then EoHS.put_unit (unit) end
end

-- Returns a reference - if you want to modify the unit type, make your own copy
EoHS.get_unit_type = EoHS.memoized_one_argument(function(unit_type) return wesnoth.unit_types[unit_type].__cfg end)

-- Returns a reference - if you want to modify the unit type, make your own copy
EoHS.unit_type_with_gender_and_variation = EoHS.memoized_multi_argument(function(unit_type, gender, variation)
  local result = EoHS.get_unit_type(unit_type)
  for i,tag in ipairs(result) do
    if tag[1] == "base_unit" then EoHS.err("A base_unit was left around, do we need to handle it?") end
    if (tag[1] == gender) or ((tag[1] == "variation") and ((tag[2].variation_id or tag[2].variation_name) == variation)) then
      if tag[2].inherit then
        wml.variables["EoHS.LUA_TEMP"] = result
        wml.fire("set_variables", { name = "EoHS.LUA_TEMP", mode = "merge", { "literal", tag[2] }})
        result = wml.variables["EoHS.LUA_TEMP"]
        wml.variables["EoHS.LUA_TEMP"] = nil
      else
        result = tag[2]
      end
    end
  end
  return result
end)
EoHS.get_unit_type_generic_example = EoHS.memoized_multi_argument(function(unit_type, gender, variation)
  return EoHS.create_wunit({type=unit_type, random_traits=false, random_gender=false, generate_name=false, gender=gender, variation=variation}).__cfg end)

EoHS.unit_type_considering_variations = function(unit)
  return EoHS.unit_type_with_gender_and_variation(unit.type, unit.gender, unit.variation)
end
EoHS.unit_type_generic_example_considering_variations = function(unit)
  return EoHS.get_unit_type_generic_example(unit.type, unit.gender, unit.variation)
end

EoHS.get_unit_effects = function(unit, options)
  local result = {}
  local modifications = wml.get_child(unit, "modifications")
  if modifications then
    local wunit_
    local wunit = function()
      if not wunit_ then wunit_ = EoHS.create_wunit(unit) end
      return wunit_
    end
    local do_effects = function(modification_type, path)
      for modification in wml.child_range(modifications, modification_type) do
        if not (options and options.exclude_id and (modification.id == options.exclude_id)) then
          for effect in wml.child_range(modification, "effect") do
            local filter = EoHS.get_subtag(effect, "filter")
            if not (filter and not wesnoth.match_unit(wunit(), filter)) then
              if not (effect.unit_type and not EoHS.value_is_in_comma_separated_list(unit.type, effect.unit_type)) then --TODO implement
                if not (effect.unit_gender and (unit.gender ~= effect.unit_gender)) then --TODO remove these in 1.11
                  for i=1,((effect.times == "per level") and unit.level or 1) do
                    table.insert(result, effect)
                  end
                end
              end
            end
          end
        end
      end
    end
    do_effects("advancement")
    do_effects(  "trait")
    do_effects( "object")
  end
  return result
end
EoHS.has_unit_variable = function(varname, value)
  if value == nil then value = true end
  return  { "filter_wml", {
            { "variables", {
              ["EoHS_"..varname] = value
            }}
          }}
end

EoHS.has_trait = function(unit, trait_id)
  local modifications = EoHS.get_subtag(unit, "modifications")
  if modifications then
    for i,mod in ipairs(modifications) do
      if (mod[1] == "trait") and (mod[2].id == trait_id) then
        return true
      end
    end
  end
  return false
end
EoHS.is_fearless = function(unit)
  return EoHS.has_trait(unit, "fearless")
end

EoHS.kill_experience = function(level)
  if level == 0 then return math.floor(wesnoth.game_config.kill_experience / 2) end
  return level * wesnoth.game_config.kill_experience
end

EoHS.unit_is_immune_to_direct_spell_damage = function(unit)
  return EoHS.get_unit_variable(unit, "is_wizard") or EoHS.get_unit_variable(unit, "wizard_protection") or EoHS.get_unit_variable(unit, "ghost_protection")
end
EoHS.unit_is_immune_to_direct_spell_damage_description = function(unit)
  if EoHS.get_unit_variable(unit, "is_wizard") then
    return _"Wizards block all spell damage."
  --[[elseif EoHS.get_unit_variable(unit, "ghost_protection") then
    return _"Ghosts are immune to spell damage."]]
  else
    return _"That unit is immune to spell damage."
  end
end

EoHS.wunit_can_move_on_hex = function(wunit, x, y)
  local movement_cost = wesnoth.units.movement_on(wunit, wesnoth.current.map[{x, y}])
  local max_moves = wunit.max_moves
  
  -- Hack: work around my other hack to prevent displaying the footsteps during targeting
  local info = EoHS.current_targeting_info
  if info and EoHS.unit_id (wunit) == EoHS.unit_id (info.actor) then max_moves = info.actor_max_moves end
  
  if EoHS.contains_petrified_unit (x,y) then return false end
    
  return movement_cost and (movement_cost > 0) and (movement_cost <= max_moves)
end
EoHS.unit_can_move_on_terrain = function(unit, terrain_name)
  local movement_cost = EoHS.get_subtag_attribute(unit, "movement_costs."..terrain_name)
  return movement_cost and (movement_cost > 0) and (movement_cost <= unit.max_moves)
end
EoHS.unit_is_immobile = function(unit)
  if unit.max_moves <= 0 then return true end
  local movement_costs = EoHS.get_subtag(unit, "movement_costs")
  if not movement_costs then return true end
  for k,v in pairs(movement_costs) do
    if (v > 0) and (v <= unit.max_moves) then return false end
  end
  return true
end

EoHS.prepare_max_moves_change = function(unit)
  if unit.max_moves then
    local best_max_moves_this_turn = math.max(EoHS.get_unit_variable(unit, "best_max_moves_this_turn") or 0, unit.max_moves)
    EoHS.set_unit_variable(unit, "best_max_moves_this_turn", best_max_moves_this_turn)
    EoHS.set_unit_variable(unit, "moves_above_max", math.max(0, unit.moves - unit.max_moves))
  end
end
EoHS.finish_max_moves_change = function(unit)
  local best_max_moves_this_turn = EoHS.get_unit_variable(unit, "best_max_moves_this_turn")
  if best_max_moves_this_turn then
    if unit.max_moves > best_max_moves_this_turn then
      EoHS.set_unit_variable(unit, "best_max_moves_this_turn", unit.max_moves)
      if unit.moves ~= 0 then -- TODO hmm... is there any way we can cover the "walk your full five moves, then wraithform" case without allowing exploits?
        unit.moves = unit.moves + unit.max_moves - best_max_moves_this_turn
      end
    end
    local max_remaining = unit.max_moves + EoHS.get_unit_variable(unit, "moves_above_max")
    EoHS.set_unit_variable(unit, "moves_above_max")
    if unit.moves > max_remaining then
      unit.moves = max_remaining
    end
  end
end

EoHS.prepare_max_hitpoints_change = function(unit)
  if unit.max_hitpoints then
    EoHS.set_unit_variable(unit, "max_hitpoints_before_change", unit.max_hitpoints)
    EoHS.set_unit_variable(unit, "hitpoints_above_max", math.max(0, unit.hitpoints - unit.max_hitpoints))
  end
end
EoHS.finish_max_hitpoints_change = function(unit)
  local max_hitpoints_before_change = EoHS.get_unit_variable(unit, "max_hitpoints_before_change")
  if max_hitpoints_before_change then
    EoHS.set_unit_variable(unit, "max_hitpoints_before_change")
    EoHS.assert(max_hitpoints_before_change, "EoHS.finish_max_hitpoints_change called without EoHS.prepare_max_hitpoints_change first")
    if unit.max_hitpoints > max_hitpoints_before_change then
      unit.hitpoints = unit.hitpoints + unit.max_hitpoints - max_hitpoints_before_change
    end
    local max_remaining = unit.max_hitpoints + EoHS.get_unit_variable(unit, "hitpoints_above_max")
    EoHS.set_unit_variable(unit, "hitpoints_above_max")
    if unit.hitpoints > max_remaining then
      unit.hitpoints = max_remaining
    end
  end
end

-->>)}
