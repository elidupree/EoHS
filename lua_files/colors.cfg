this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- colors.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,gui,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,gui,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil


EoHS.validity_color = function(valid)
  if valid then
    return EoHS.valid_color
  else
    return EoHS.invalid_color
  end
end
EoHS.darkened_color = function (color)
  local fraction = 160/221
  return {red = math.floor (color.red*fraction + 0.5), green = math.floor (color.green*fraction + 0.5), blue = math.floor (color.blue*fraction + 0.5)}
end
EoHS.white_color = {red = 255, green = 255, blue = 255}
EoHS.black_color = {red = 0, green = 0, blue = 0}
EoHS.valid_color = {red = 221, green = 221, blue = 221}
EoHS.invalid_color = {red = 255, green = 0, blue = 0}
EoHS.bad_color = {red = 255, green = 200, blue = 0}
EoHS.mediocre_color = EoHS.darkened_color (EoHS.valid_color)
EoHS.nonfunctional_color = EoHS.darkened_color (EoHS.valid_color)
EoHS.immune_color = {red = 128, green = 128, blue = 255}
EoHS.mana_color = {red = 220, green = 150, blue = 255}
EoHS.action_point_color = {red = 120, green = 255, blue = 0}
EoHS.action_point_depleted_color = {red = 222, green = 70, blue = 0}
EoHS.action_point_inactive_color = {red = 120, green = 120, blue = 70}
EoHS.gold_depleted_color = {red = 200, green = 200, blue = 0}
EoHS.mana_depleted_color = {red = 210, green = 100, blue = 0}


EoHS.dialog_color = function (color)
  return string.format ("%d, %d, %d, 255", color.red, color.green, color.blue)
end
EoHS.label_color = function (color)
  return string.format ("%d,%d,%d", color.red, color.green, color.blue)
end
EoHS.element_color = function (color)
  return string.format ("#%02x%02x%02x", color.red, color.green, color.blue)
end

EoHS.colored_text = function (color, text)
  return '<span color="'.. EoHS.element_color (color) ..'">'..text..'</span>'
end

EoHS.colorizing_image_mod = function (colors, reference_average, source)
  source = source or "(red + green + blue)/3.0"
  if colors.red then colors = {mid = colors} end
  colors.max = colors.max or EoHS.white_color
  colors.min = colors.min or EoHS.black_color
  local color_formula = function (channel)
    local low_formula = colors.min [channel].."+ "..(colors.mid [channel] - colors.min [channel]).. "*(".. source..")/"..reference_average
    
    local high_difference = colors.max [channel] - colors.mid [channel]
    local high_formula = (colors.max [channel] + math.floor (0.5 + high_difference*255/(reference_average - 255))).."- "..high_difference.. "*(".. source..")/".. (reference_average-255)
    if reference_average == 0 then
      return high_formula
    elseif reference_average == 255 then
      return low_formula
    else
      return "if (("..source..") <= "..reference_average..","..
        low_formula..","..
        high_formula..
      ")"
    end
  end

  return "~CHAN("..
      color_formula ("red")..","..
      color_formula ("green")..","..
      color_formula ("blue")..
    ")"
end

EoHS.constant_color_image_mod = function (color)
  local color_formula = function (channel)
    return color [channel]
  end
  
  return "~CHAN("..
      color_formula ("red")..","..
      color_formula ("green")..","..
      color_formula ("blue")..
    ")"
end



EoHS.team_colors_by_id = {}
for i,entry in ipairs(wml.variables["EoHS.wesnoth_cfgs.team_colors"]) do
  if entry[1] == "color_range" then
    local colors = {mid = {}, max = {}, min = {}, ref = {}}
    colors.mid.red, colors.mid.green, colors.mid.blue, 
    colors.max.red, colors.max.green, colors.max.blue,
    colors.min.red, colors.min.green, colors.min.blue,
    colors.ref.red, colors.ref.green, colors.ref.blue
      = string.match(entry[2].rgb, "^(..)(..)(..),(..)(..)(..),(..)(..)(..),(..)(..)(..)")
    for key, value in pairs (colors) do
      for channel, intensity in pairs (value) do
        value [channel] = tonumber (intensity, 16)
      end
    end
    EoHS.team_colors_by_id [tostring(entry[2].id)] = colors
  end
end
EoHS.team_color = function(side)
  return EoHS.team_colors_by_id [wesnoth.sides[side].color]
end

-->>)}
