this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- debug.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

-- Change this to "true" to automatically start profiling at the beginning of the game.
-- This can be useful for profiling replays, by modifying the replay file to make it true.
if EoHS.profile_replay == nil then EoHS.profile_replay = false end

local pack = function(...) return {...} end
EoHS.dump_profiling = function()
  local cropnum = function(n)
    --[[local str = ""..n
    local int, low = string.match(n, "^([^%.]+)%.?(.?.?.?)")
    return int.."."..low..string.rep("0",3-string.len(low))]]
    return string.format("%.3f", n)
  end
  
  local dot = {"\n\n\n\n\n\n\n\n\n\ndigraph Prof {\n"}
  for k,v in pairs(EoHS.profiling) do
    if v.incl > 0.5 then
      local stack = string.match(k, "^stack: (.+)$")
      if stack then
        local up,here = string.match(stack, "^(.+)%.([^.]-)$")
        if not here then here = stack end
        table.insert(dot,'"'..stack..'"[label=<'..here..'<BR/>'..cropnum(v.incl)..', '..cropnum(v.self)..', '..v.calls..'>, shape=box]\n')
        if up then 
          table.insert(dot,'"'..up..'" -> "'..stack..'"\n')
        end
      end
    end
  end
  table.insert(dot, "}\n\n\n\n\n\n\n\n\n\n")
  wml.fire("wml_message", { logger="err", message=table.concat(dot) })
  
  --[[local sorted = {}
  for k,v in pairs(EoHS.profiling) do
    table.insert(sorted, {k,v})
  end]]
  --table.sort(sorted, function(a,b) return a[2].incl < b[2].incl end)
  --[[local cropnum = function(n)
    local str = ""..n
    local int, low = string.match(n, "([^%.])%.?(.?.?.?)")
    return string.rep(" ",math.max(0,4-string.len(int)))..int.."."..low..string.rep("0",3-string.len(low))
    
  end
  for i,kv in ipairs(sorted) do
    EoHS.debug(string.rep(" ",math.max(0,80-string.len(kv[1])))..kv[1]..": "..cropnum(kv[2].incl)..", "..cropnum(kv[2].self)..", "..kv[2].calls)
  end]]
end

EoHS.debug_benchmark = function(name, func, ...)
  local cl1 = os.clock()
  for i=1,1000 do local result = func(...) end
  local cl2 = os.clock()
  EoHS.debug(name.." took an average of "..(cl2-cl1).." milliseconds")
end

EoHS.verify_sync = function(a)
  if type(a) == "table" then
    local confirm = EoHS.synchronize_choice(a, a, {promise_already_valid_tag=true})
    if not confirm then
      EoHS.err("EoHS.verify_sync failed: we had a tag but received nothing")
      return false
    end
    local diff = EoHS.tag_diff(a, confirm)
    if diff then
      EoHS.err("EoHS.verify_sync failed with diff:\n"..diff)
      return false
    end
    return true
  else
    local confirm = EoHS.synchronize_choice(a)
    if confirm ~= a then
      EoHS.err("EoHS.verify_sync failed: we had "..EoHS.inspect(a).." locally, but received "..EoHS.inspect(confirm))
      return false
    end
    return true
  end
end

local check_rng_sync
do
  local no_recur = true
  check_rng_sync = function(k)
    if no_recur then
      no_recur = false
      if EoHS.context and EoHS.context.synchronized and EoHS.get_variable("settings_inited") then
        local r = EoHS.random("1..30000")
        if r ~= EoHS.synchronize_choice(r) then EoHS.err("RNG is desynchronized"..k); ({}).r.fail="bad" end
      end
      no_recur = true
    end
  end
end

EoHS.enable_sync_checking = function()
  for k,v in pairs(EoHS) do if type(v) == "function" then
    EoHS[k] = function(...)
      check_rng_sync(" before "..k)
      local results = pack(v(...))
      check_rng_sync(" after "..k)
      return table.unpack(results)
    end
  end end
end

-- Uncomment for a very slow system to track sync issues.
-- EoHS.soon(EoHS.enable_sync_checking)

do
  local r = math.random
  math.random = function(...)
    if EoHS.context then EoHS.assert(not EoHS.context.unison, "using math.random in a unison context") end
    return r(...)
  end
end

-- gfgtdf wrote this code for me to help search for accidentally passing in recursive tables
local function search_recursiveley(cfg, search)
    search = search or {}
    for k,v in pairs(cfg) do
        if type(k) == "table" then
            if search[k] then return true end
            search[k] = true
            if search_recursiveley(k, search) then return true end
            search[k] = nil
        end
        if type(v) == "table" then
            if search[v] then return true end
            search[v] = true
            if search_recursiveley(v, search) then return true end
            search[v] = nil
        end
    end
end
 
local wesnoth_tovconfig_old = wml.tovconfig
function wml.tovconfig(cfg)
    if search_recursiveley(cfg) then
        EoHS.err("recursive table: ".. EoHS.inspect (cfg))
        throw()
    end
    return wesnoth_tovconfig_old(cfg)
end

EoHS.debug_command = function(command_table)
  if (command_table.command == "enable_profiling") and not EoHS.profiling then
    EoHS.profiling = {}
    local profile_func = function(name, func)
      return function(...)
        local stack_name = EoHS.profiling_stack and EoHS.profiling_stack.stack_name.."."..name or "stack: "..name
        EoHS.profiling_stack = { func_name = name, stack_name = stack_name, up = EoHS.profiling_stack }
        local prof = EoHS.profiling[name] or {}
        EoHS.profiling[name] = prof
        local sprof = EoHS.profiling[stack_name] or {}
        EoHS.profiling[stack_name] = sprof
        sprof.calls = (sprof.calls or 0) + 1
        sprof.incl = (sprof.incl or 0)
        sprof.self = (sprof.self or 0)
        prof.calls = (prof.calls or 0) + 1
        prof.incl = (prof.incl or 0)
        prof.self = (prof.self or 0)
        local cl1 = os.clock()
        local results = pack(func(...))
        local cl2 = os.clock()
        prof.incl = prof.incl + (cl2 - cl1)
        prof.self = prof.self + (cl2 - cl1)
        sprof.incl = sprof.incl + (cl2 - cl1)
        sprof.self = sprof.self + (cl2 - cl1)
        EoHS.profiling_stack = EoHS.profiling_stack.up
        if EoHS.profiling_stack then
          local up_prof = EoHS.profiling[EoHS.profiling_stack.func_name]
          local up_sprof = EoHS.profiling[EoHS.profiling_stack.stack_name]
          up_prof.self = up_prof.self - (cl2 - cl1)
          up_sprof.self = up_sprof.self - (cl2 - cl1)
        end
        return table.unpack(results)
      end
    end
    for k,v in pairs(EoHS) do if type(v) == "function" then
      EoHS[k] = profile_func(k, v)
    end end
    for k,v in pairs(EoHS.game_action_simulations) do if type(v) == "function" then
      EoHS.game_action_simulations[k] = profile_func("sim!"..k, v)
    end end
    for id,a in pairs(EoHS.actions) do for k,v in pairs(a) do if type(v) == "function" then
      a[k] = profile_func(id.."!"..k, v)
    end end end
    local profile_wesnoth = function (name)
      wesnoth [name] = profile_func ("w!".. name, wesnoth [name])
    end
    local wesnoth_profiles = {"show_dialog", "fire", "fire_event", "get_unit", "get_units", "put_unit", "match_unit", "match_location", "simulate_combat"}
    for dummy, name in ipairs(wesnoth_profiles) do profile_wesnoth (name) end
  end

  local fighting_types = {"Dark Adept","Wose"}
  if command_table.command == "enable_fighting" then
    for i,unit in ipairs(EoHS.get_units({ EoHS.is_on_the_map })) do
      unit.attacks_left = 500
      unit.moves = 500
      unit.hitpoints = 100
      unit.experience = unit.max_experience - 6
      EoHS.put_unit(unit)
      for x,y in helper.adjacent_tiles(unit.x,unit.y) do
        if EoHS.location_is_passable(x,y) and not EoHS.get_unit(x,y) then
          EoHS.put_unit({ x=x, y=y, side=EoHS.random("1.."..#wesnoth.sides),
            type= fighting_types[EoHS.random("1.."..#fighting_types)],
            attacks_left = 500,
            hitpoints = EoHS.random("1..80"),
            moves = 500
          }, {allow_new_location=true})
        end
      end
    end
  end
end

EoHS.debug_unit_variables = function(unit)
  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  local l = function(label) return {"label",{label=label}} end
  local variables = EoHS.force_unit_variables(unit)
  local finished = false
  local retval
  while not finished do
    local d = EoHS.make_dialog_context(function()
      finished = true
      retval = true
    end, function()
      finished = true
      retval = false
    end)
    
    local rows={}
    for k in pairs(EoHS.all_EoHS_unit_variables) do
      if not string.match(k, "InPlaceCache") then
        local v = variables[k]
        if v and not ((type(v) == "string") and string.match(v, "InPlaceCache")) then
          d.postshow(function()
            local val = wesnoth.get_dialog_value("text_box"..k)
            if val ~= tostring(v) then variables[k]=val end
          end)
          table.insert(rows, r{c{l(k.." = ")},c{horizontal_alignment="left", {"text_box",{ id="text_box"..k, label=tostring(v) }}}})
        end
      end
    end
    table.insert(rows, r{
      c{horizontal_alignment="left", {"text_box",{ id= "new_attr_name_box" }}},
      c{horizontal_alignment="left", {"text_box",{ id="new_attr_value_box" }}},
    })
    d.postshow(function()
      local k = wesnoth.get_dialog_value("new_attr_name_box")
      if k ~= "" then variables[k]=wesnoth.get_dialog_value("new_attr_value_box") end
    end)
    d.show(g(rows))
  end
  
  return retval
end

EoHS.debug_table = function(input)
  local finished = false
  local retval
  local open_tables = {}
  while not finished do
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    local l = function(label) return {"label",{label=label}} end
    local d = EoHS.make_dialog_context(function()
      finished = true
      retval = true
    end, function()
      finished = true
      retval = false
    end)
    
    local last_id = 0
    local make_id = function()
      last_id = last_id + 1
      return last_id
    end
    
    local function table_grid(t, opennesses)
      local rows = {}
      local function entry_grid(k,v)
        local id = make_id()
        if type(v) == "table" then
          local is_tag = (type(v[1]) == "string") and (type(v[2]) == "table")
          local focus_button = ((opennesses.DEBUG_TABLE_GRID_FOCUS==k)
            and d.button({ label=_"unfocus" }, function()
                opennesses.DEBUG_TABLE_GRID_FOCUS = nil
              end)
            or d.button({ label=_"focus" }, function()
                opennesses[k] = opennesses[k] or {true,{}}
                opennesses[k][1] = true
                opennesses.DEBUG_TABLE_GRID_FOCUS = k
              end))
          if opennesses[k] and opennesses[k][1] then
            return g{
              r{c{horizontal_alignment="left", g{r{
                c{horizontal_alignment="left", l(is_tag and "["..v[1].."]" or "{")},
                c{horizontal_alignment="left", d.button({ label=_"close" }, function()
                  opennesses[k][1] = false
                  if opennesses.DEBUG_TABLE_GRID_FOCUS == k then opennesses.DEBUG_TABLE_GRID_FOCUS = nil end
                end)},
                c{horizontal_alignment="left", focus_button},
                c{horizontal_alignment="left", d.button({ label=_"delete" }, function()
                  if type(k) == "number" then table.remove(t,k) else t[k] = nil end
                  if opennesses.DEBUG_TABLE_GRID_FOCUS == k then opennesses.DEBUG_TABLE_GRID_FOCUS = nil end
                end)},
              }}}},
              r{c{horizontal_alignment="left", border="left", border_size=15, table_grid(is_tag and v[2] or v, opennesses[k][2])}},
              r{c{horizontal_alignment="left", l(is_tag and "[/"..v[1].."]" or "}")}},
            }
          else
            return g{r{
              c{horizontal_alignment="left", l(is_tag and "["..v[1].."]" or "{}")},
              c{horizontal_alignment="left", d.button({ label=_"open" }, function()
                opennesses[k] = opennesses[k] or {true,{}}
                opennesses[k][1] = true
              end)},
              c{horizontal_alignment="left", focus_button},
            }}
          end
        else
          d.postshow(function()
            local val = wesnoth.get_dialog_value("text_box"..id)
            if val ~= tostring(v) then t[k]=val end
          end)
          return g{r{
            c{horizontal_alignment="left", {"text_box",{ id="text_box"..id, label=tostring(v) }}},
          }}
        end
      end
      if opennesses.DEBUG_TABLE_GRID_FOCUS then
        table.insert(rows, r{c{horizontal_alignment="left",
          g{r{c{l(tostring(opennesses.DEBUG_TABLE_GRID_FOCUS).." = ")},c{entry_grid(opennesses.DEBUG_TABLE_GRID_FOCUS,t[opennesses.DEBUG_TABLE_GRID_FOCUS])}}}}})
      else
        for k,v in pairs(t) do
          if type(k) ~= "number" then
            table.insert(rows, r{c{horizontal_alignment="left", g{r{c{l(tostring(k).." = ")},c{entry_grid(k,v)}}}}})
          end
        end
        do
          local id = make_id()
          table.insert(rows, r{c{horizontal_alignment="left", g{r{
            c{horizontal_alignment="left",{"text_box",{ id="new_attr_name_box"..id }}},
            c{l(" = ")},
            c{horizontal_alignment="left", {"text_box",{ id="new_attr_value_box"..id }}},
          }}}})
          d.postshow(function()
            local k = wesnoth.get_dialog_value("new_attr_name_box"..id)
            if k ~= "" then t[k]=wesnoth.get_dialog_value("new_attr_value_box"..id) end
          end)
        end
        for i,v in ipairs(t) do
          table.insert(rows, r{c{horizontal_alignment="left", entry_grid(i,v)}})
        end
      end
      return g(rows)
    end
    d.show(table_grid(input, open_tables))
  end
  
  return retval
end

-->>)}
