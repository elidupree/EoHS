this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- metamorphosis.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local metamorphoses = {
  {
    id = "translucent",
    effects = {
      name = _"translucent",
      description = _"skirmisher, invisible,",
      {"effect",{
        apply_to = "new_ability",
        { "abilities",{
          -- skirmisher first because it's less obvious.
          EoHS.macros.ABILITY_SKIRMISHER[1],
          EoHS.abilities.invisible[1],
        }}
      }},
      {"effect",{
        apply_to = "attack",
        increase_damage = "-10%",
      }},
      {"effect",{
        apply_to = "image_mod",
        add = "~O(0.7)",
      }},
    },
  },
  {
    id = "extra_limbs",
    effects = {
      name = _"extra limbs",
      description = _"clumsy on all attacks,",
      {"effect",{
        apply_to = "attack",
        increase_attacks = 1,
        { "set_specials", {
          mode = "append",
          { "chance_to_hit", {
            id = "EoHS_clumsy",
            name = _"clumsy",
            description = _"This attack has -5% chance to hit.",
            add = -5,
          }},
        }},
      }},
      {"effect",{
        apply_to = "hitpoints",
        increase_total = "10%",
      }},
    },
  },
  {
    id = "gigantic",
    filter = function(unit)
      return not (EoHS.unit_is_immobile (unit))
    end,
    effects = {
      name = _"gigantic",
      description = _"slower on forest, swamp, reef, cave, and chasm,",
      {"effect",{
        apply_to = "movement",
        increase = 1,
      }},
      {"effect",{
        apply_to = "attack",
        increase_damage = "30%",
      }},
      {"effect",{
        apply_to = "hitpoints",
        increase_total = "30%",
      }},
      {"effect",{
        apply_to = "movement_costs",
        replace = false,
        {"movement_costs",{
          reef=1,
          swamp_water=1,
          forest=1,
          fungus=1,
          cave=1,
          unwalkable=1,
        }},
      }},
    },
  },
  {
    id = "stoneskin",
    effects = {
      name = _"stoneskin",
      description = _"+30% physical resistance, +20% other resistance,",
      {"effect",{
        apply_to = "movement",
        increase = -1,
      }},
      {"effect",{
        apply_to = "resistance",
        replace = false,
        {"resistance",{
          fire=-20,
          cold=-20,
          arcane=-20,
          blade=-30,
          pierce=-30,
          impact=-30,
        }},
      }},
    },
  },
  {
    id = "jittery",
    filter = function(unit)
      return not (EoHS.unit_is_immobile (unit))
    end,
    effects = {
      name = _"jittery",
      description = _"first strike on all attacks, +10% defense,",
      {"effect",{
        apply_to = "movement",
        increase = 1,
      }},
      {"effect",{
        apply_to = "attack",
        { "set_specials", {
          mode = "append",
          EoHS.macros.WEAPON_SPECIAL_FIRSTSTRIKE[1],
        }},
      }},
      {"effect",{
        apply_to = "defense",
        replace = false,
        {"defense",{
          deep_water=-10,
          shallow_water=-10,
          reef=-10,
          swamp_water=-10,
          flat=-10,
          sand=-10,
          forest=-10,
          hills=-10,
          mountains=-10,
          village=-10,
          castle=-10,
          frozen=-10,
          unwalkable=-10,
          cave=-10,
          fungus=-10,
        }},
      }},
      {"effect",{
        apply_to = "new_ability",
        { "abilities",{
          {"regenerate",{
            value = -1,
            id = "EoHS_jittery",
            name = _"jittery",
            description = _"The unit will lose 1 HP per turn.",
            affect_self = true,
          }}
        }}
      }},
    },
  },
  {
    id = "wings",
    filter = function(unit)
      return not (EoHS.unit_is_immobile (unit) or EoHS.unit_can_move_on_terrain(unit, "unwalkable"))
    end,
    effects = {
      name = _"winged",
      description = _"50% defense/1 move on all terrains except cave and fungus,",
      {"effect",{
        apply_to = "movement",
        increase = 2,
      }},
      {"effect",{
        apply_to = "movement_costs",
        replace = true,
        {"movement_costs",{
          deep_water=1,
          shallow_water=1,
          reef=1,
          swamp_water=1,
          flat=1,
          sand=1,
          forest=1,
          hills=1,
          mountains=1,
          village=1,
          castle=1,
          frozen=1,
          unwalkable=1,
        }},
      }},
      {"effect",{
        apply_to = "defense",
        replace = true,
        {"defense",{
          deep_water=50,
          shallow_water=50,
          reef=50,
          swamp_water=50,
          flat=50,
          sand=50,
          forest=50,
          hills=50,
          mountains=50,
          village=50,
          castle=50,
          frozen=50,
          unwalkable=50,
        }},
      }},
    },
  },
}
for i,m in ipairs(metamorphoses) do
  m.effects.id = "EoHS_metamorphosis_"..m.id
  metamorphoses[m.id] = m
end

EoHS.remove_metamorphosis = function(unit)
  EoHS.set_unit_variable(unit, "metamorphosis")
  for i,m in ipairs(metamorphoses) do
    EoHS.set_unit_variable(unit, "metamorphosis_"..m.id)
    EoHS.remove_subtags(unit, "modifications.trait", "EoHS_metamorphosis_"..m.id)
  end
  EoHS.update_all_type_adjustments(unit)
  -- TODO: HP check
end

EoHS.make_spell("metamorphosis", {
  image = "icons/jewelry_butterfly_pin.png",
  name = _"Metamorphosis",
  description = _"You enchant a unit to gain a random transformation. Each transformation is mostly helpful, but also has a downside. Each unit can only metamorphose once. You cannot metamorphose a wizard.",
  
  is_enchantment = true,
  
  base_cost = { action_points=5, mana=5 },
  base_range = 1,
  
  target_dependent_stuff = EoHS.simple_unit_target("help", function (unit)
    if EoHS.get_unit_variable(unit, "metamorphosis") then
      return _"That unit is already metamorphosed."
    end
    if EoHS.get_unit_variable(unit, "is_wizard") then
      return _"You cannot metamorphose a wizard."
    end
  end),
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    wesnoth.fire("animate_unit", {
      { "filter", { x=unit.x, y=unit.y }},
      flag="levelout"
    })
    
    local allowed = {}
    for i,m in ipairs(metamorphoses) do
      if not (m.filter and not m.filter(unit)) then
        table.insert(allowed, m.id)
      end
    end
    local chosen = metamorphoses[EoHS.random(table.concat(allowed, ","))]
    EoHS.set_unit_variable(unit, "metamorphosis", true)
    EoHS.set_unit_variable(unit, "metamorphosis_"..chosen.id, true)
    
    local modifications = EoHS.force_subtag(unit, "modifications")
    -- insert at the beginning because it's more important and should be listed first
    table.insert(modifications, 1, {"trait",chosen.effects})
    
    EoHS.update_all_type_adjustments(unit)
    
    EoHS.put_unit(unit, {immediate=true})
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "petrified.ogg" }) end)
    wesnoth.fire("animate_unit", {
      { "filter", { x=unit.x, y=unit.y }},
      flag="levelin"
    })
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
