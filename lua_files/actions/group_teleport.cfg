this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- group_teleport.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

local motion_list_func = function(parameters, known_or_actual)
  local result = {}
  local record = function(x,y)
    local unit = EoHS.get_seen_or_actual_unit(x,y,parameters.side,known_or_actual)
    if unit then
      local tx,ty = EoHS.same_relative_location(x,y,parameters.src_x,parameters.src_y,parameters.target_x,parameters.target_y)
      local cant_teleport, wont_teleport
      local wont_teleport_func = function(u)
        if EoHS.unit_is_immobile(u) then return _"Group Teleport doesn't move permanently immobile units." end
        if EoHS.get_unit_variable (u, "is_wizard") and wesnoth.is_enemy (u.side, parameters.side) then return _"Group Teleport doesn't move enemy wizards." end
        if EoHS.location_is_enemy_circle_of_protection(u.x,u.y,parameters.side) then return _"Group Teleport doesn't move units in enemy circles of protection." end
      end
      local wont_teleport = wont_teleport_func(unit)
      if not wont_teleport then
        if (tx == x) and (ty == y) then
          cant_teleport = _"There's point in teleporting to the same hex."
        elseif not EoHS.location_is_passable(tx,ty) then
          cant_teleport = _"This unit would be teleported into a wall."
        elseif EoHS.location_is_enemy_circle_of_protection(tx,ty,parameters.side) then
          cant_teleport = _"You can't teleport a unit into an enemy circle of protection."
        elseif not EoHS.wunit_can_move_on_hex(wesnoth.get_unit(x,y),tx,ty) then
          cant_teleport = _"This unit can't move on its destination terrain."
        elseif not EoHS.hex_is_unfogged(tx,ty,parameters.side) then
          cant_teleport = _"This unit might be teleported onto another unit."
        else
          local target_unit = EoHS.get_seen_or_actual_unit(tx,ty,parameters.side,known_or_actual)
          if target_unit and (EoHS.distance_between(parameters.src_x,parameters.src_y,tx,ty) <= 1)
             and not wont_teleport_func(target_unit) then target_unit = nil end
          if target_unit then
            cant_teleport = _"This unit would be teleported onto another unit."
          end
        end
      end
      table.insert(result, {x=x, y=y, tx=tx, ty=ty, wont_teleport=wont_teleport, cant_teleport=cant_teleport})
    end
  end
  record(parameters.src_x,parameters.src_y)
  for x,y in helper.adjacent_tiles(parameters.src_x,parameters.src_y) do
    record(x,y)
  end
  return result
end

table.insert(EoHS.universal_attack_specials, { "disable", {
  id="EoHS_just_teleported_1",
  name=_"just teleported",
  name_inactive="",
  active_on="offense",
  { "filter_self", { EoHS.has_unit_variable("just_teleported_ally") }}
}})
table.insert(EoHS.universal_attack_specials, { "disable", {
  id="EoHS_just_teleported_2",
  name="",
  name_inactive="",
  active_on="offense",
  { "filter_opponent", { EoHS.has_unit_variable("just_teleported_enemy") }}
}})

EoHS.at_side_turn("just_teleported_enemy", function(units)
  for i,unit in ipairs(units.with_variable.just_teleported_enemy or {}) do
    if unit.side == wesnoth.current.side then
      EoHS.set_unit_variable_immediate(unit, "just_teleported_enemy")
    end
  end
end)
EoHS.at_side_turn_end("just_teleported_ally", function(units)
  for i,unit in ipairs(units.with_variable.just_teleported_ally or {}) do
    if unit.side == wesnoth.current.side then
      EoHS.set_unit_variable_immediate(unit, "just_teleported_ally")
    end
  end
end)

EoHS.make_spell("group_teleport", {
  image = "halo/teleport-7.png",
  name = _"Group Teleport",
  description = _"You teleport yourself and every adjacent unit (friend or foe) to the target hex. Units can move after teleporting, but cannot attack or be attacked. (Specifically, teleported enemies can't be attacked until after their own turn, and teleported allies can't attack until after their own turn.) Group Teleport doesn't move enemy wizards or permanently immobile units.",
  
  base_cost = { action_points=7, mana=2, },
  base_range = 9,
  
  target_dependent_stuff = function(parameters)
    local motion_list = motion_list_func(parameters, "known")
    local result = {}
    for i,motion in ipairs(motion_list) do
      if motion.wont_teleport then
        table.insert(result, {"label",{
          x=motion.x, y=motion.y,
          text =motion.wont_teleport,
          color = EoHS.nonfunctional_color,
        }})
      else
        table.insert(result, {"item",{
          x=motion.x, y=motion.y,
          halo = "footsteps/teleport-out.png",
        }})
        table.insert(result, {"item",{
          x=motion.tx, y=motion.ty,
          halo = "footsteps/teleport-in.png",
          require_no_invisible_enemy = not EoHS.get_seen_unit(motion.tx,motion.ty,parameters.side),
        }})
        table.insert(result, {"item",{
          x=motion.tx, y=motion.ty,
          halo = EoHS.unit_thumbnail (EoHS.get_unit (motion.x, motion.y)).."~O(0.5)",
        }})
        if motion.cant_teleport then
          table.insert(result, {"label",{
            x=motion.tx, y=motion.ty,
            text = motion.cant_teleport,
            forbidden = true,
          }})
        end
      end
    end
    return result
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    local motion_list = motion_list_func(parameters, "known")
    for i,motion in ipairs(motion_list) do
      if not motion.wont_teleport then
        motion.unit = EoHS.get_unit(motion.x,motion.y)
        motion.unit.x, motion.unit.y = motion.tx, motion.ty
        EoHS.set_unit_variable(motion.unit, wesnoth.is_enemy(motion.unit.side, parameters.side) and "just_teleported_enemy" or "just_teleported_ally", true)
        EoHS.update_unit_graphics(motion.unit)
        EoHS.remove_unit(motion.x,motion.y)
      end
    end
    for i,motion in ipairs(motion_list) do
      if not motion.wont_teleport then
        EoHS.put_unit(motion.unit, {immediate=true,allow_new_location=true,allow_unknown_id=true}) -- TODO better interface for moving units
        wesnoth.float_label(motion.unit.x, motion.unit.y, "<span color='#ffffff'>".._"teleport".."</span>")
      end
    end
    for i,motion in ipairs(motion_list) do
      if not motion.wont_teleport then
        wesnoth.fire("redraw", { side = motion.unit.side })
      end
    end
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "fanfare-short.wav" }) end)
    for i,motion in ipairs(motion_list) do
      if not motion.wont_teleport then
        EoHS.fire_event("moveto", motion.unit.x, motion.unit.y)
      end
    end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
