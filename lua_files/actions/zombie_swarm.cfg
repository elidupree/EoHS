this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- zombie_swarm.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

local can_summon = function (x,y, parameters) return EoHS.location_is_passable(x,y,parameters.side) and not (EoHS.get_unit(x,y) or EoHS.swarm_is_present(x,y)) end
local relevant_hexes = function(parameters, known_or_actual)
  local result = {}
  for x,y in helper.adjacent_tiles(parameters.src_x, parameters.src_y) do
    if EoHS.location_is_passable(x,y,parameters.side) then
      table.insert(result, {x=x,y=y})
    end
  end
  return result
end

EoHS.summon_swarm_zombies = function (parameters, hexes)
    local actor = EoHS.get_unit(parameters.actor_id)
    local units = {}
    for i,hex in ipairs(hexes) do
      local terrain = wesnoth.get_terrain(hex.x,hex.y)
      local variation_possibilities = {"gryphon,drake,bat"}
      local landlubbers = "dwarf,goblin,mounted,saurian,troll,wose,default,default,default,default,default"
      if terrain == "Wwf" then table.insert(variation_possibilities, "swimmer,swimmer,swimmer,swimmer,swimmer,swimmer,"..landlubbers)
      elseif string.match(terrain, "^[WS]") then table.insert(variation_possibilities, "swimmer,swimmer,swimmer,swimmer,swimmer")
      elseif string.match(terrain, "^M") then table.insert(variation_possibilities, "dwarf,dwarf,dwarf,dwarf,dwarf,dwarf,dwarf,dwarf,dwarf,troll,troll,troll,goblin,goblin,gryphon,default")
      elseif string.match(terrain, "^Q") then --nothing
      else table.insert(variation_possibilities, landlubbers) end
      if string.match(terrain, "^U") then table.insert(variation_possibilities, "dwarf,dwarf,dwarf,dwarf,dwarf,troll,troll,troll,troll,troll") end
      if string.match(terrain, "^H") then table.insert(variation_possibilities, "dwarf,troll,troll,goblin,goblin,saurian") end
      if string.match(terrain, "^[GRI]") then table.insert(variation_possibilities, "mounted,mounted,mounted,mounted,default,default") end
      if string.match(terrain, "%^F") then table.insert(variation_possibilities, "wose,wose,wose,wose,wose,wose,wose,wose") end
      if string.match(terrain, "%^S") then table.insert(variation_possibilities, "saurian,saurian,saurian,saurian,saurian,saurian,drake,drake,drake") end
      local unit_table = {side=parameters.side,"Walking Corpse",variation=EoHS.random(table.concat(variation_possibilities,","))}
      
      local unit_table = hex.unit_table_override or {}
      unit_table.side = unit_table.side or parameters.side
      unit_table.type = unit_table.type or "Walking Corpse"
      unit_table.variation = EoHS.random(table.concat(variation_possibilities,","))
      local unit = EoHS.summon_unit(parameters, unit_table, hex.x, hex.y, nil, actor, true)
      if unit then
        EoHS.set_unit_variable(unit, "is_swarm", true)
        if parameters.side == wesnoth.current.side then
          unit.moves = unit.max_moves
          -- reduce ZoC-breaking
          for x,y in helper.adjacent_tiles(unit.x,unit.y) do
            local other = EoHS.get_unit(x,y)
            if other and other.zoc and wesnoth.sides.is_enemy(other.side, unit.side) then
              unit.moves = 0
              break
            end
          end
          unit.attacks_left = unit.max_attacks
          
          if EoHS.get_unit_variable(unit, "forceful_summon") then
            EoHS.set_unit_variable(unit, "forceful_summon_had_chance_to_move", true)
          end
        else
          -- it seems that units recover their movement at the beginning of each turn,
          -- EXCEPT for turn one, which is relevant if zombies are summoned before their own turn one,
          -- which does happen in Kill Literally 1000 Zombies.
          -- To avoid having tricky special cases, just give them max moves all the time off-turn.
          -- TODO: this should probably apply to ALL summons?
          unit.moves = unit.max_moves
          unit.attacks_left = unit.max_attacks
        end
      end
      table.insert(units, unit)
    end
    EoHS.fake_recruit(units)
    if parameters.side == wesnoth.current.side then EoHS.flatten_swarms(wesnoth.current.side) end

end

EoHS.make_spell("zombie_swarm", {
  image = {
    {image_modded="units/undead/zombie-mounted.png", offset={x=8,y=-2}},
    {image_modded="units/undead/zombie-attack.png", offset={x=4,y=9}},
    {image_modded="units/undead/zombie-saurian.png", offset={x=-12,y=4}},
    {image_modded="units/undead/zombie-bat-se-2.png", offset={x=-9,y=-8}},
  },
  name = _"Zombie Swarm",
  -- TODO separate out swarm description
  description = _"You summon an AI-controlled Walking Corpse onto each adjacent empty hex. They choose a random variation, partially depending on the terrain where they appear, and can attack the same turn they're summoned (and also move if you didn't summon them into an enemy zone of control). They are aggressive and always fight if they can; otherwise, they wander randomly unless they can capture a village or go for healing in one turn. These 'swarm' units move at the end of your turn, and during your turn, they are partially nonexistent, so that they don't get in the way of moving your regular units.",
  
  is_summon = true,
  
  base_cost = { action_points=7, mana=24 },
  
  no_target_but_show_UI = true,
  
  target_independent_stuff = function(parameters, extras)
    local result = {}
    local number = 0
    for i,hex in ipairs (relevant_hexes (parameters)) do
      local can = can_summon(hex.x, hex.y, parameters)
      table.insert (result, {"item", {
        x= hex.x, y= hex.y, halo = can and "help" or "potential_change",
      }})
      if can then number = number + 1 end
    end
    table.insert (result, {"aspect", {kind = _"Number summoned", value = number, forbidden = number == 0, doesnt_affect_scribing = true}})
    return result
  end,
  
  happen = function(parameters)
    EoHS.begin_casting(parameters.actor_id)
    
    local affected_hexes = relevant_hexes(parameters, "actual")
    EoHS.filter (affected_hexes, function (hex) return can_summon (hex.x, hex.y, parameters) end)
    EoHS.summon_swarm_zombies (parameters, affected_hexes)
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
