this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- train_apprentice.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,gui,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,gui,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

local prototypes = {}
local make_prototype = function(type_name)
  local prototype_spec = {
    type=type_name,
    random_traits=false, random_gender=false, generate_name=false,
    moves=0, attacks_left=0,
    {"modifications",{
        {"object",{
            id = "EoHS_apprentice_object",
            {"effect",{
              apply_to = "overlay",
              add = "misc/hero-icon.png",
            }},
            {"effect",{
              apply_to = "ellipse",
              ellipse = "misc/ellipse-hero",
            }}
        }}
    }}
  }
  local wprototype = EoHS.create_wunit(prototype_spec)
  local prototype = wprototype.__cfg
  EoHS.set_unit_variable(prototype, "is_wizard", true)
  EoHS.set_unit_variable(prototype, "wizard_protection", true)
  EoHS.set_unit_variable(prototype, "is_apprentice", true)
  EoHS.set_unit_variable(prototype, "wizard_level", 1)
  EoHS.update_all_type_adjustments(prototype, true)
  prototype.hitpoints = prototype.max_hitpoints
  EoHS.set_unit_dress_up_options(prototype, EoHS.normative_dress_up_options(prototype))
  
  prototypes[type_name] = prototype
  table.insert(prototypes, prototype)
end
make_prototype("Mage")
make_prototype("Elvish Lord")
make_prototype("Elvish Lady")
make_prototype("Dwarvish Runesmith")
make_prototype("Troll Shaman")
make_prototype("White Mage")
make_prototype("Silver Mage")
make_prototype("Dark Adept")
make_prototype("Saurian Augur")
make_prototype("Mermaid Initiate")
make_prototype("Mermaid Priestess")
local side_prototypes = {}
local get_side_prototype = function(side, type_name)
  return EoHS.disunified(function()
    local s = side_prototypes[side]
    if not s then s = {}; side_prototypes[side] = s end
    local sp = s[type_name]
    if sp then return sp end
    sp = EoHS.deep_copy(prototypes[type_name])
    sp.side = side
    EoHS.standardize_unit(sp)
    s[type_name] = sp
    return sp
  end)
end

local apprentices_allowed = function(recruits)
  local result = {}
  local mer = false
  for recruit in EoHS.comma_separated_values(recruits) do
    if wesnoth.unit_types [recruit] then
      local type_cfg = EoHS.get_unit_type(recruit)
      if type_cfg.race == "undead" then result["Dark Adept"] = true end
      if type_cfg.race == "elf" then result["Elvish Lord"] = true end
      if type_cfg.race == "dwarf" then result["Dwarvish Runesmith"] = true end
      if type_cfg.race == "troll" then result["Troll Shaman"] = true end
      if type_cfg.race == "lizard" then result["Saurian Augur"] = true end
      if type_cfg.race == "human" and type_cfg.alignment == "chaotic" and type_cfg.level > 0 then result["Silver Mage"] = true end
      if type_cfg.race == "human" and type_cfg.alignment == "lawful" and type_cfg.level > 0 then result["White Mage"] = true end
      if type_cfg.race == "merman" then mer = true end
    end
  end
  if mer then result[result["Elvish Lord"] and "Mermaid Priestess" or "Mermaid Initiate"] = true end
  if not next(result) then result["Mage"] = true end
  return result
end

EoHS.soon(function()
  for i,alliance in ipairs(EoHS.skills.alliances) do
    alliance.apprentices = apprentices_allowed(alliance.recruit)
  end
end)

local apprentice_allowed = function(actor, apprentice_type)
  local skills = EoHS.get_unit_skillset(actor)
  if not EoHS.skills.alliances[1] then
    if apprentices_allowed((actor.extra_recruit and (actor.extra_recruit..",") or "")..table.concat(wesnoth.sides[actor.side].recruit, ","))[apprentice_type] then return true end
  end
  for i,alliance in ipairs(EoHS.skills.alliances) do
    if alliance.apprentices[apprentice_type] and skills[alliance.id] then return true end
  end
  return false
end

local num_apprentices = function(trainer_id)
  return #wesnoth.units.find_on_map({ EoHS.has_unit_variable("apprentice_trainer", trainer_id) }) + #wesnoth.units.find_on_recall({ EoHS.has_unit_variable("apprentice_trainer", trainer_id) })
end
local num_apprentices_allowed = function(trainer)
  local skills = EoHS.get_unit_skillset (trainer)
  return skills.extra_apprentice_2 and 3 or skills.extra_apprentice_1 and 2 or 1
end
local apprentice_cost = function(unit_cost, extra_apprentices)
  return unit_cost - 5 + (((extra_apprentices or 0) > 0) and 20 or 0)
end

EoHS.make_action("train_apprentice", {
  image = "items/dummy.png",
  name = _"Train Apprentice",
  description = _"You recruit an apprentice in a castle, the way you normally recruit. The available apprentice types depend on your alliance(s). Your first apprentice costs about as much as a normal unit; later ones cost 20 gold more. Apprentices are level 1 wizards, but can't learn talents or alliances, can't spend gold on spells, and fewer skill points. (1 + 1/level less than full wizards.)",
  
  base_cost = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    return { gold=apprentice_cost(prototypes[parameters.apprentice_type or "Mage"].cost, EoHS.get_unit_variable(actor, "apprentices_trained")) }
  end,
  
  targeting_range_override = EoHS.recruit_hex_targeting_range,
  
  target_independent_stuff = function (parameters, extras)
    local result = EoHS.recruit_hex_target_independent_stuff (parameters, extras) or {}
    
    local actor = EoHS.get_unit(parameters.actor_id)
    local skills = EoHS.get_unit_skillset(actor)
    local has_alliance = false
    for i,alliance in ipairs(EoHS.skills.alliances) do
      if skills[alliance.id] then has_alliance = true end
    end
    if EoHS.skills.alliances[1] and not has_alliance then
      table.insert (result, {"text", {forbidden = true,text=_"You can't train apprentices without an alliance."}})
    end
    local current = num_apprentices (EoHS.unit_id (actor))
    local allowed = num_apprentices_allowed (actor)
    table.insert (result, {"aspect", {
      kind =_"Current apprentices",
      value = current,
      details = "out of ".. allowed,
      forbidden = current >= allowed,
    }})
    return result
  end,
  target_dependent_stuff = EoHS.recruit_hex_target_dependent_stuff,
  
  
  extra_parameters_dialog_grid = function(dialog_context, parameters)
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    local actor = EoHS.get_unit(parameters.actor_id)
    local rows = {}
    local num = EoHS.get_unit_variable(actor, "apprentices_trained")
    if not (parameters.apprentice_type and apprentice_allowed(actor, parameters.apprentice_type)) then parameters.apprentice_type = nil end
    for i,prototype in ipairs(prototypes) do
      if apprentice_allowed(actor, prototype.type) then
        if not parameters.apprentice_type then parameters.apprentice_type = prototype.type end
        prototype = get_side_prototype(actor.side, prototype.type)
        local label
        local image
        if prototype.type == "Elvish Lord" then
          label = _"Elvish Noble"
          image = EoHS.collapse_image_aggregate("image_modded", EoHS.image_aggregate_cropped(EoHS.image_aggregates_combined(
            EoHS.image_aggregate_translated(EoHS.unit_thumbnail(get_side_prototype(actor.side, "Elvish Lady"), true), {x=10}),
            EoHS.image_aggregate_translated(EoHS.unit_thumbnail(prototype, true), {x=-10})
          ), {size={x=72,y=72},offset={x=0,y=0}}))
        else
          label = EoHS.unit_typename(prototype)
          image = EoHS.unit_thumbnail(prototype, true)
        end
        table.insert(rows, r{c{ horizontal_grow=true, EoHS.fake_listbox_entry(dialog_context, "m\nm\nm\nm\nmmmmmmmmm"..label, {
        {"image",{
          x = 0,
          y = "((height/2)-(image_height/2))",
          w = "(if(height<72,height,72))",
          h = "(if(height<72,height,72))",
          name = image
        }},
        {"text",{
          x=72,
          y=EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
          w="(text_width)",
          h="(text_height)",
          font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
          color = EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT,
          text = EoHS.substitute(_"$1|\n$2| Gold", {label,apprentice_cost(prototype.cost, num)})
        }} }, parameters.apprentice_type == prototype.type, function() parameters.apprentice_type = prototype.type end) }})
      end
    end
    if rows[1] then
      return g{r{
        c{vertical_alignment="top",EoHS.unit_preview_pane(dialog_context, get_side_prototype(actor.side, parameters.apprentice_type))},
        c{vertical_alignment="top",g(rows)}
      }}
    end
  end,
  
  happen = function(parameters, extras)
    local actor = EoHS.get_unit(parameters.actor_id)
    if actor then
      EoHS.set_unit_variable_immediate(actor, "apprentices_trained", (EoHS.get_unit_variable(actor, "apprentices_trained") or 0) + 1)
    end
    local apprentice_type = parameters.apprentice_type
    if apprentice_type == "Elvish Lord" then
      if EoHS.side_is_angerpersonified(parameters.side) then apprentice_type = "Elvish Lady"
      else apprentice_type = EoHS.random("Elvish Lord,Elvish Lady") end
    end
    local unit = EoHS.deep_copy(get_side_prototype(parameters.side, apprentice_type))
    
    EoHS.set_unit_variable(unit, "id", nil)
    EoHS.set_unit_variable(unit, "apprentice_trainer", EoHS.unit_id (actor))
    unit.id = nil -- to make wesnoth assign a new different unique id=, so savefiles don't break(?!) and possibly other issues
    unit.underlying_id = nil -- just to suppress a warning message
    unit.x = parameters.target_x
    unit.y = parameters.target_y
    unit.gender = nil
    unit.random_traits = true
    unit.random_gender = true
    unit.generate_name = true
    local modifications = EoHS.force_subtag(unit, "modifications")
    table.insert(modifications, 1, {"trait",{
      id = "EoHS_wizard",
      name = _"apprentice",
      {"effect",{apply_to="max_experience", increase="150%"}},
    }})
    local settings = EoHS.get_wizard_settings(unit)
    settings.skill_points_per_level = EoHS.get_wizard_setting (actor, "skill_points_per_level") - 1
    settings.skill_points_at_level_0 = EoHS.get_wizard_setting (actor, "skill_points_at_level_0") - 1
    settings.can_spend_gold_on_spells = false
    
    EoHS.fake_recruit({unit})
  end,
})

-->>)}
