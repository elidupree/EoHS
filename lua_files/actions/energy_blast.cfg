this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- energy_blast.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,gui,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,gui,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

local get_energy_blast_attack = EoHS.skill_attack_func("evocation", function(attack)
  attack.description = _"energy blast"
  attack.type = "arcane"
  attack.damage = math.floor((attack.damage * attack.number * 2 + 5) / 10)
  attack.number = 3
end)


EoHS.at_turn_refresh("used_energy_blast", function(units)
  for i,unit in ipairs(units.with_variable.used_energy_blast or {}) do
    EoHS.set_unit_variable_immediate (unit, "used_energy_blast")
  end
end)

EoHS.make_spell("energy_blast", {
  image = "attacks/magic-missile.png",
  name = _"Energy Blast",
  description = _"You strike a unit with a magical arcane attack, which is 60% as powerful as your normal fireball attack. Although this spell costs 5 AP, you can never cast it more than once in the same turn. Also, Energy Blast can't target units less than 2 hexes away from you.",
  
  base_cost = { action_points = 5, mana = 3, once_per_turn = true },
  base_range = 3,
  is_attack_spell = true,
  
  target_dependent_stuff = EoHS.simple_unit_target("harm", function (unit, parameters, stuff, extras)
    if EoHS.distance_between (parameters.src_x, parameters.src_y, parameters.target_x, parameters.target_y) < 2 then
      return _"Energy Blast can't target units less than 2 hexes away from you."
    end
    
    if not extras.validity_only then
      EoHS.add_attack_stuff (stuff, parameters, parameters.target_x, parameters.target_y, EoHS.get_subtag(parameters, "attack"))
    end
  end),
  
  
  commit = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local attack = get_energy_blast_attack(actor)
    if attack then table.insert(parameters, {"attack", attack}) end
  end,
  
  
  happen = function(parameters)
    --EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.face_towards(actor, parameters.target_x, parameters.target_y) -- combat will also do this, but the animations need to see the correct facing
    --EoHS.set_unit_variable (actor, "used_energy_blast", true)
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    
    local casting_image_1 = EoHS.unit_casting_image_stuff(actor, 1)
    local casting_image_2, q, staffhead_offset = EoHS.unit_casting_image_stuff(actor, 2)
    local dx, dy = EoHS.pixels_to_hex(actor.x, actor.y, parameters.target_x, parameters.target_y)
    -- We have to reverse either dx (and use auto_hflip) or staffhead_offset.x (and not use auto_hflip). The choice is arbitrary.
    if (actor.facing == "nw") or (actor.facing == "sw") then dx = -dx end
    local mm_corner_yoffs = (staffhead_offset.y-54-(-20))
    -- Isaac got confused when the missile paused in the center of a hex with another unit on it.
    -- I'd like to round the corner to a place where it's not at a hex center, but I don't feel like
    -- messing with this many-details code now. TODO
    local halo_y_str = function(str) return string.gsub(str, "-%d+", function(s) return math.floor(0.5+(tonumber(s)*mm_corner_yoffs/-54)) end) end
    local convert_offset_str = function(str, addxstart, addystart, addxstop, addystop)
      addxstart = addxstart or 0
      addystart = addystart or 0
      addxstop = addxstop or 0
      addystop = addystop or 0
      local xs,ys={},{}
      str = string.gsub(str, "^[^:]+:([^,]+),", function(s)
        table.insert(xs, "0:"..s)
        table.insert(ys, "0:"..s)
        return ""
      end)
      local i=0
      for start,stop in string.gmatch(str, "([^~,]+)~([^~,]+)") do
        table.insert(xs, math.floor(0.5+(dx*tonumber(start))+((i*addxstop+(3-i)*addxstart)/3)).."~"..math.floor(0.5+(dx*tonumber(stop))+(((i+1)*addxstop+(2-i)*addxstart)/3)))
        table.insert(ys, math.floor(0.5+(dy*tonumber(start))+((i*addystop+(3-i)*addystart)/3)).."~"..math.floor(0.5+(dy*tonumber(stop))+(((i+1)*addystop+(2-i)*addystart)/3)))
        i=i+1
      end
      --EoHS.debug(str, addxstart, addystart, addxstop,addystop, xs, ys)
      return table.concat(xs,","), table.concat(ys,",")
    end
    local xm1,ym1 = convert_offset_str("0.001~-0.083,-0.083~-0.25,-0.25~-0.5", staffhead_offset.x, staffhead_offset.y, 0, mm_corner_yoffs)
    local xm2,ym2 = convert_offset_str("-0.5~-0.25,-0.25~0.25,0.25~1.0")
    local xt1,yt1 = convert_offset_str("0.001:40,-0.5~-0.25,-0.25~0.25,0.25~1.0")
    local xt2,yt2 = convert_offset_str("0.001:80,-0.5~-0.25,-0.25~0.25,0.25~1.0")
    local xt3,yt3 = convert_offset_str("0.001:120,-0.5~-0.25,-0.25~0.25,0.25~1.0")
    local add = function(y1,y2)
      local combined = {}
      for start,stop in string.gmatch(y1, "([^~,]+)~([^~,]+)") do
        table.insert(combined, {tonumber(start),tonumber(stop)})
      end
      local i = 1
      for start,stop in string.gmatch(y2, "([^~,]+)~([^~,]+)") do
        combined[i] = (combined[i][1]+tonumber(start)).."~"..(combined[i][2]+tonumber(stop))
        i = i + 1
      end
      return (string.match(y1, "^[^:]+:[^,]+,") or "")..table.concat(combined,",")
    end
    EoHS.add_temporary_anims(actor, { {"attack_anim",{
      base_score=10,
      
      offset=0,

      magic_missile_start_time=-750,

      magic_missile_trail_1_start_time=-350,
      magic_missile_trail_2_start_time=-350,
      magic_missile_trail_3_start_time=-350,

      {"magic_missile_frame",{
        duration=400,
        halo="halo/mage-halo1.png,halo/mage-halo2.png,halo/mage-halo3.png,halo/mage-halo4.png,halo/mage-halo5.png",
        halo_x=xm1,halo_y=ym1,
        auto_vflip=false,
        offset=0,
        --offset=0.001~-0.083,-0.083~-0.25,-0.25~-0.5
      }},
      {"magic_missile_frame",{
        duration=350,
        halo="halo/mage-halo1.png,halo/mage-halo2.png,halo/mage-halo3.png,halo/mage-halo4.png,halo/mage-halo5.png",
        halo_y=add(ym2, halo_y_str("-54~-45,-45~-27,-27~0")),
        halo_x=xm2,
        auto_vflip=false,
        offset=0,
        --offset=-0.5~-0.25,-0.25~0.25,0.25~1.0
      }},

      {"magic_missile_trail_1_frame",{
        duration=350,
        halo="misc/blank-hex.png:40,halo/mage-preparation-halo1.png,halo/mage-preparation-halo2.png,halo/mage-preparation-halo3.png,halo/mage-preparation-halo4.png,halo/mage-preparation-halo5.png,halo/mage-preparation-halo6.png,halo/mage-preparation-halo7.png",
        halo_y=add(yt1, halo_y_str("-54:40,-54~-45,-45~-27,-27~0")),
        halo_x=xt1,
        auto_vflip=false,
        offset=0,
        --offset=0.001:40,-0.5~-0.25,-0.25~0.25,0.25~1.0
      }},
      {"magic_missile_trail_2_frame",{
        duration=350,
        halo="misc/blank-hex.png:80,halo/mage-preparation-halo1.png,halo/mage-preparation-halo2.png,halo/mage-preparation-halo3.png,halo/mage-preparation-halo4.png,halo/mage-preparation-halo5.png,halo/mage-preparation-halo6.png,halo/mage-preparation-halo7.png",
        halo_y=add(yt2, halo_y_str("-54:80,-54~-45,-45~-27,-27~0")),
        halo_x=xt2,
        auto_vflip=false,
        offset=0,
        --offset=0.001:80,-0.5~-0.25,-0.25~0.25,0.25~1.0
      }},
      {"magic_missile_trail_3_frame",{
        duration=350,
        halo="misc/blank-hex.png:120,halo/mage-preparation-halo1.png,halo/mage-preparation-halo2.png,halo/mage-preparation-halo3.png,halo/mage-preparation-halo4.png,halo/mage-preparation-halo5.png,halo/mage-preparation-halo6.png,halo/mage-preparation-halo7.png",
        halo_y=add(yt3, halo_y_str("-54:120,-54~-45,-45~-27,-27~0")),
        halo_x=xt3,
        auto_vflip=false,
        offset=0,
        --offset=0.001:120,-0.5~-0.25,-0.25~0.25,0.25~1.0
      }},
      
      magic_missile_flare_start_time=-750,
      {"magic_missile_flare_frame",{
        duration=600,
        halo="halo/mage-preparation-halo1.png,halo/mage-preparation-halo2.png,halo/mage-preparation-halo3.png,halo/mage-preparation-halo4.png,halo/mage-preparation-halo5.png,halo/mage-preparation-halo6.png,halo/mage-preparation-halo7.png,misc/blank-hex.png:1",
        halo_x=staffhead_offset.x,
        halo_y=staffhead_offset.y,
        offset=0,
      }},

      {                      "frame", { image=casting_image_1, begin=-800, ["end"]=-700 }},
      {                      "frame", { image=casting_image_2, begin=-700, ["end"]=-350 }},
      {"if"  ,{hits="no" , { "frame", { image=casting_image_2, begin=-350, ["end"]=-100, sound="magic-missile-1-miss.ogg,magic-missile-2-miss.ogg,magic-missile-3-miss.ogg" }} }},
      {"else",{hits="yes", { "frame", { image=casting_image_2, begin=-350, ["end"]=-100, sound="magic-missile-1.ogg,magic-missile-2.ogg,magic-missile-3.ogg" }} }},
      {                      "frame", { image=casting_image_1, begin=-100, ["end"]= 100 }},
    }} })
    EoHS.put_unit(actor, {immediate=true})
    
    local info = EoHS.spell_attack_info(actor, parameters.target_x, parameters.target_y, EoHS.get_subtag(parameters, "attack"))
    if info then
      EoHS.game_action_simulations.attack_unit(info.context, info.extras)
    else
      wml.fire("animate_unit", {
        flag="attack",
        {"filter",{x=actor.x,y=actor.y}},
        hits = true,
        with_bars = true,
      })
    end
    
    actor = EoHS.get_unit(parameters.actor_id)
    if actor then
      EoHS.remove_temporary_anims(actor)
      EoHS.put_unit(actor, {immediate=true})
    end
    --EoHS.finish_casting(parameters.actor_id)
  end,
})



-->>)}
