this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- meteor_storm.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local meteor_radius = 2
local meteor_center_area_radius = 6
local meteor_total_radius = meteor_center_area_radius+meteor_radius
local affected_hexes = function(parameters, known_or_actual)
  local result = {}
  for i,hex in ipairs(EoHS.find_reach(parameters.target_x, parameters.target_y, EoHS.known_or_actual_passable_only(parameters.side, known_or_actual),
      meteor_total_radius)) do
    if not EoHS.get_circle_of_protection(hex.x, hex.y) then table.insert(result, {x=hex.x, y=hex.y, dist=hex.cost})end
  end
  return result
end
local get_meteor_attack = function(att, dist)
  local attack = EoHS.deep_copy(att)
    attack.description = _"meteor storm"
    EoHS.remove_subtags(attack, "specials.chance_to_hit", "magical")
    attack.type = "impact"
    local half_denom = 2*(meteor_radius+1)
    attack.damage = math.floor(((attack.damage*attack.number*3*(meteor_radius+1-dist)+half_denom)/(2*half_denom)))
    attack.number = 1
    if dist==0 then table.insert(EoHS.force_subtag(attack, "specials"), {"chance_to_hit",{value=100}}) end
  return attack
end

EoHS.make_ritual("meteor_storm", {
  image = "attacks/claws-fire-elemental.png",
  name = _"Meteor Storm",
  description = _"You call a dozen boulders to fall from the heavens near your target. Units and terrain in the area will be severely damaged, including destruction of villages and keeps. Damage to units is impact damage proportional to your normal fireball attack. The center of each strike cannot miss; the surrounding hexes do less damage and are non-magical.",
    
  base_cost = { mana=44 },
  turns = 3,
  base_range = 11,
  
  commit = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local attack = EoHS.skill_attack(actor, "evocation")
    if attack then table.insert(parameters, {"attack", attack}) end
  end,
     
  target_dependent_stuff = function(parameters, extras)
    local result = {}
    if extras and extras.validity_only then return result end
    for i,hex in ipairs(affected_hexes (parameters, "known")) do
      table.insert (result, {"item", {
        x= hex.x, y= hex.y, halo = "attack", halo_mods = "~O("..((meteor_total_radius+1-hex.dist) / (meteor_total_radius +2))..")"
      }})
    end
    for i,hex in ipairs(affected_hexes (parameters, "actual")) do
      table.insert (result, {"visible_effect", {
        x= hex.x, y= hex.y,
      }})
    end
    return result
  end,
    
  conclude = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local attack = EoHS.get_subtag(parameters, "attack")
    local possible_centers = EoHS.find_reach(parameters.target_x, parameters.target_y, EoHS.passable_only(parameters.side), meteor_center_area_radius)
    
    local total_chance = 0
    for i,hex in ipairs(possible_centers) do
      hex.chance = meteor_center_area_radius+1 - hex.cost
      total_chance = total_chance + hex.chance
    end
    
    for i=1,12 do
      local center_x
      local center_y
      if total_chance < 1 then break end
      local which = EoHS.random("1.."..total_chance)
      for i,hex in ipairs(possible_centers) do
        which = which - hex.chance
        if which <= 0 then
          center_x = hex.x
          center_y = hex.y
          -- don't strike twice in the same place
          total_chance = total_chance - hex.chance
          hex.chance = 0
          break
        end
      end
    
      local casting_image_2 = EoHS.unit_casting_image_stuff(actor, 2)
      local dx, dy = EoHS.pixels_to_hex(actor.x, actor.y, center_x, center_y)
      local animation = {
        base_score = 10,
        offset=0,
        start_time = -600,
        meteor_start_time = -600,
        { "frame", { image = casting_image_2, duration=700 }},
      }
      local meteor_image_size = EoHS.random("240..360")
      local meteor_flip_string = "~FL(vert)"
      if EoHS.random("1..2") == 1 then meteor_flip_string = "~FL(horiz,vert)" end
      for i=1,7 do
        table.insert(animation, { "meteor_frame", {
          layer = 70,
          duration = 100,
          image = "projectiles/icemissile-n-"..i..".png"..meteor_flip_string.."~CS(60,-30,-90)~SCALE("..meteor_image_size..","..math.floor(meteor_image_size*1.2)..")",
          auto_hflip = false,
          auto_vflip = false,
          x = dx,
          y = (dy-((8-i)*70)).."~"..(dy-((7-i)*70)),
          sound = (i==6) and "explosion.ogg,dragonstick.ogg" or nil,
        }})
      end
      table.insert(animation, { "meteor_frame", { image="misc/blank-hex.png", duration=1, }})
      -- TODO: center the animations near the target instead
      EoHS.add_temporary_anims(actor, { {"attack_anim", animation} })
      EoHS.put_unit(actor, {immediate=true})
      
      local attacks = {}
      local meteor_area = EoHS.find_reach(center_x, center_y, EoHS.passable_only(actor.side), meteor_radius)
      for i,hex in ipairs(meteor_area) do
        local unit = EoHS.get_unit(hex.x,hex.y)
        if unit and not EoHS.get_circle_of_protection(hex.x, hex.y) then
          local info = EoHS.spell_attack_info(actor, hex.x, hex.y, get_meteor_attack(attack, hex.cost))
          if info then table.insert(attacks, info) end
        end
      end
      EoHS.parallel_attacks_or_animate_once(parameters, attacks)
      for i,hex in ipairs(meteor_area) do
        if not EoHS.get_circle_of_protection(hex.x, hex.y) then
          if (hex.cost == 1) and string.match(wesnoth.get_terrain(hex.x,hex.y), "^[^QW].*%^V") then
            EoHS.place_item({ x=hex.x, y=hex.y, image="scenery/village-human-burned"..EoHS.random("1..4")..".png" })
          end
          if hex.cost == 0 then
            for i=1,4 do
              EoHS.remove_item({ x=hex.x, y=hex.y, image="scenery/village-human-burned"..EoHS.random("1..4")..".png" })
            end
          end
          local change_names = {"crater","ruin_greater","ruin_lesser"}
          EoHS.add_terrain_change(hex.x,hex.y,{ name=change_names[hex.cost+1] })
        end
      end
      EoHS.redraw()
      actor = EoHS.get_unit(parameters.actor_id)
      if actor then
        EoHS.remove_temporary_anims(actor)
        EoHS.put_unit(actor, {immediate=true})
      else
        break
      end
    end
    
    wesnoth.fire("sound", { name="ambient/birds"..EoHS.random("1..3")..".ogg" })
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
