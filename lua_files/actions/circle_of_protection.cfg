this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- circle_of_protection.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

-- Circle of Protection stuff has to be checked very frequently, so we make extra structures to optimize it.

EoHS.circle_of_protection_max_strength = 5

local circle_of_protection_overlay = function(side, strength)
  -- The circle has too many colors to TC the regular way, and I'm not sure I like its colors anyway...
  return "scenery/circle-magic-glow.png"..
    "~SCALE(120,144)~CROP (10, 20, 100, 104)~O(2.5)"..
    EoHS.colorizing_image_mod (EoHS.team_color (side), 128)..
    "~O("..(strength/EoHS.circle_of_protection_max_strength)..")"
end
EoHS.update_circle_of_protection_item = function(x,y)
  local previous = EoHS.get_hex_variable (x,y, "circle_of_protection_item")
  if previous then
    EoHS.remove_item({x=x,y=y,halo= previous})
  end
  local circle =EoHS.get_circle_of_protection (x,y)
  if circle then
    local next = circle_of_protection_overlay(circle, EoHS.get_hex_variable (x,y, "circle_of_protection_strength"))
    EoHS.place_item ({x=x,y=y,halo=next})
    EoHS.set_hex_variable (x,y, "circle_of_protection_item", next)
  end
end
local circle_of_protection_table = {}
EoHS.get_circle_of_protection = function(x, y)
  local idx = x..","..y
  local cached = circle_of_protection_table[idx]
  if cached then return (cached ~= 0) and cached end
  local gotten = EoHS.get_hex_variable(x, y, "circle_of_protection")
  circle_of_protection_table[idx] = gotten or 0
  return gotten
end
EoHS.set_circle_of_protection = function(x, y, val)
  local old_val = EoHS.get_circle_of_protection(x, y)
  if old_val ~= val then
    EoHS.set_hex_variable(x, y, "circle_of_protection", val)
    circle_of_protection_table[x..","..y] = val or 0
    local list = EoHS.get_scenario_variable("circle_of_protection_list") or ""
    if old_val then
      list = string.gsub(list, "%["..x..","..y..","..old_val.."%]", "")
      --EoHS.remove_item({x=x,y=y,halo=)})
    end
    if val then
      list = list.."["..x..","..y..","..val.."]"
      -- TODO use seven items so that it can be layered under units
      --EoHS.place_item ({x=x,y=y,halo=circle_of_protection_overlay(    val, EoHS.circle_of_protection_max_strength)})
    end
    EoHS.update_circle_of_protection_item(x,y)
    EoHS.set_scenario_variable("circle_of_protection_list", list)
    local ally_x_lists,ally_y_lists,enemy_x_lists,enemy_y_lists = {},{},{},{}
    for side in ipairs(wesnoth.sides) do ally_x_lists[side]={}; ally_y_lists[side]={}; enemy_x_lists[side]={}; enemy_y_lists[side]={} end
    for cx,cy,cside in string.gmatch(list,"%[([^,]+),([^,]+),([^%]]+)%]") do
      cside=tonumber(cside)
      for side in ipairs(wesnoth.sides) do
        if wesnoth.is_enemy(side, cside) then
          table.insert(enemy_x_lists[side], cx)
          table.insert(enemy_y_lists[side], cy)
        else
          table.insert(ally_x_lists[side], cx)
          table.insert(ally_y_lists[side], cy)
        end
      end
    end
    for side in ipairs(wesnoth.sides) do
      EoHS.set_scenario_variable("allied_circle_of_protection_x_list_"..side, table.concat(ally_x_lists[side],","))
      EoHS.set_scenario_variable("allied_circle_of_protection_y_list_"..side, table.concat(ally_y_lists[side],","))
      EoHS.set_scenario_variable("enemy_circle_of_protection_x_list_"..side, table.concat(enemy_x_lists[side],","))
      EoHS.set_scenario_variable("enemy_circle_of_protection_y_list_"..side, table.concat(enemy_y_lists[side],","))
    end
  end
end
EoHS.location_is_enemy_circle_of_protection = function(x, y, side)
  local circle = EoHS.get_circle_of_protection(x, y)
  return (circle and wesnoth.is_enemy(circle, side))
end
--[=[
EoHS.update_circle_of_protection_ability = function(unit)
  local abilities = EoHS.force_subtag(unit, "abilities")
  EoHS.remove_subtags(abilities, "resistance", "EoHS_circle_of_protection")
  for k,v in pairs(EoHS.get_subtag(unit, "resistance")) do
    if type(v) == "number" then -- WotG compatibility hack
      table.insert(abilities, {"resistance",{
        id = "EoHS_circle_of_protection",
        apply_to = k,
        affect_self = true,
        active_on = "defense",
            value = 100-math.ceil(v/3),
        max_value = 100-math.ceil(v/3),
        {"filter",{
          x="$EoHS.scenario_vars.allied_circle_of_protection_x_list_"..unit.side,
          y="$EoHS.scenario_vars.allied_circle_of_protection_y_list_"..unit.side,
        }}
      }})
    end
  end
end

table.insert(EoHS.events, {
  name = "moveto",
  first_time_only = "no",
  { "filter", {
    --lua_function = "EoHS_wunit_is_in_enemy_circle_of_protection",
    x="$EoHS.scenario_vars.enemy_circle_of_protection_x_list_$this_unit.side||",
    y="$EoHS.scenario_vars.enemy_circle_of_protection_y_list_$this_unit.side||",
  }},
  { "lua", {
    code = [[--circle_of_protection destruction event
EoHS.begin_event(true, true)
EoHS.set_circle_of_protection(wesnoth.current.event_context.x1, wesnoth.current.event_context.y1)
EoHS.end_event()]] -- TODO cooler animation?
  }},
})
]=]


-- TODO their facing, draw XP bar and overlays
--[[local item_image = function(unit) return "misc/blank-hex.png~BLIT("..EoHS.unit_thumbnail(unit)..",7,7)" end
EoHS.hide_unit_in_circle_of_protection = function(unit)
  EoHS.set_hex_variable(unit.x, unit.y, "circle_of_protection_hidden_unit", unit)
  EoHS.remove_unit(unit.x, unit.y)
  EoHS.place_item({x=unit.x, y=unit.y, image=item_image(unit), visible_in_fog=false})
end
EoHS.return_unit_in_circle_of_protection = function(unit)
  if EoHS.location_is_passable(unit.x, unit.y) and not wesnoth.units.get(unit.x, unit.y) then
    EoHS.set_hex_variable(unit.x, unit.y, "circle_of_protection_hidden_unit")
    EoHS.remove_item({x=unit.x, y=unit.y, image=item_image(unit)})
    EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
  end
end
EoHS.hide_circle_of_protection_unit = function(unit)
  EoHS.set_hex_variable(unit.x, unit.y, "circle_of_protection_unit", unit)
  EoHS.remove_unit(unit.x, unit.y)
end
EoHS.grab_circle_of_protection_unit = function(x, y, side)
  local unit = EoHS.get_hex_variable(x, y, "circle_of_protection_unit")
  if unit then
    EoHS.set_hex_variable(x, y, "circle_of_protection_unit")
  else
    unit = {
      x=x,
      y=y,
      side=side,
      type="Fire Guardian",
    }
    EoHS.set_unit_variable(unit, "is_circle_of_protection", true)
    EoHS.set_unit_variable(unit, "not_a_real_leader", true)
    EoHS.update_all_type_adjustments(unit)
  end
  unit.canrecruit = EoHS.get_hex_variable(x, y, "circle_of_protection_hidden_unit.canrecruit")
  return unit
end]]
EoHS.make_circle_of_protection_unit = function(x, y, side)
  local unit = {
    x=x,
    y=y,
    side=side,
    type="Fire Guardian",
  }
  EoHS.set_unit_variable(unit, "is_circle_of_protection", true)
  EoHS.update_all_type_adjustments(unit)
  return unit
end

EoHS.update_circle_of_protection_units = function()
  local w,h = wesnoth.get_map_size()
  for x=1,w do for y=1,h do
    local c = EoHS.get_circle_of_protection(x,y)
    if c then
      local unit = EoHS.get_unit(x,y)
      --[[if wesnoth.is_enemy(c, wesnoth.current.side) then
        if unit and not EoHS.get_unit_variable(unit, "is_circle_of_protection") then
          EoHS.hide_unit_in_circle_of_protection(unit)
        end
        if not (unit and EoHS.get_unit_variable(unit, "is_circle_of_protection")) then
          EoHS.put_unit(EoHS.grab_circle_of_protection_unit(x,y,c), {allow_unknown_id = true, allow_new_location = true})
        end
      else
        if unit and EoHS.get_unit_variable(unit, "is_circle_of_protection") then
          EoHS.hide_circle_of_protection_unit(unit)
        end
        local return_unit = EoHS.get_hex_variable(x, y, "circle_of_protection_hidden_unit")
        if return_unit then
          EoHS.return_unit_in_circle_of_protection(return_unit)
        end
        if c == wesnoth.current.side then
          local circle_unit = EoHS.get_hex_variable(x, y, "circle_of_protection_unit")
          if circle_unit and circle_unit.hitpoints < circle_unit.max_hitpoints then
            EoHS.set_hex_variable(x, y, "circle_of_protection_unit.hitpoints", math.min(circle_unit.max_hitpoints, circle_unit.hitpoints + 12))
          end
        end
      end]]
      
      if wesnoth.is_enemy(c, wesnoth.current.side) then
        if not unit then
          EoHS.put_unit(EoHS.make_circle_of_protection_unit(x,y,c), {allow_unknown_id = true, allow_new_location = true})
        end
      else
        if unit and EoHS.get_unit_variable(unit, "is_circle_of_protection") then
          EoHS.remove_unit (x,y)
        end
      end
      
      local enemy_neighbor = false
      for x,y in helper.adjacent_tiles (x,y) do
        local unit = EoHS.get_unit (x,y)
        if unit and wesnoth.is_enemy (unit.side, c) then
          enemy_neighbor = true
        end
      end
      if not enemy_neighbor then
        EoHS.set_hex_variable (x,y, "circle_of_protection_strength", EoHS.circle_of_protection_max_strength)
        EoHS.update_circle_of_protection_item(x,y)
      end
    end
  end end
end
EoHS.destroy_circle_of_protection = function(x,y)
  EoHS.set_circle_of_protection(x, y)
  local unit = EoHS.get_unit(x,y)
  if unit and EoHS.get_unit_variable(unit, "is_circle_of_protection") then
    EoHS.remove_unit (x,y)
  end
  --[[EoHS.remove_unit(unit.x,unit.y)
  local return_unit = EoHS.get_hex_variable(unit.x, unit.y, "circle_of_protection_hidden_unit")
  if return_unit then
    EoHS.return_unit_in_circle_of_protection(return_unit)
  end]]
end

EoHS.make_spell("circle_of_protection", {
  image = "icons/stone_ring.png",
  name = _"Circle of Protection",
  description = _"You enchant a hex with a circle of protection. The circle blocks enemy wizards' magic as if it was a solid wall, and also blocks the harmful effects of your own and allies' spells.\n\nThe circle also protects against ordinary attacks. Any attacks against the hex are negated (no combat takes place). However, the circle is destroyed after negating 5 attacks. A circle can regenerate back to its full strength at the beginning of each turn, if there are no enemies adjacent to it. You can't create a circle of protection adjacent to an enemy either.\n\nIf you don't leave a unit in the circle, it still acts as if there were a unit there on enemy turns. Enemies are blocked out, but they can attack it, and it even exerts zone of control.",
  
  is_enchantment = true,
  
  base_cost = { action_points=7, mana=12 },
  base_range = 1,
    
  target_dependent_stuff = function(parameters)
    local result = {}
    local find_hex = function (x,y)
      local unit = EoHS.get_seen_unit (x,y, parameters.side)
      if unit and wesnoth.is_enemy (unit.side, parameters.side) then
        table.insert (result, {"label", {
          x=x,y=y,
          forbidden = true, text = _"This enemy unit blocks you from creating the circle of protection.",
        }})
      end
      if not unit then
        table.insert (result, {"dummy", {
          x=x,y=y,require_no_invisible_enemy = true,
          hidden_from_enemies = true,
        }})
      end
    end
    find_hex (parameters.target_x, parameters.target_y)
    for x,y in helper.adjacent_tiles (parameters.target_x,parameters.target_y) do
      find_hex (x,y)
    end
    local circle = EoHS.get_circle_of_protection(parameters.target_x,parameters.target_y)
    if circle and not wesnoth.is_enemy(parameters.side, circle) then
      table.insert (result, {"label", {
        x= parameters.target_x,y= parameters.target_y,
        forbidden = true,
        text = _"There is already an allied circle of protection there.",
      }})
    end
    return result
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    extras.do_on_clients_who_see(function() wesnoth.fire("sound", { name = "magic-holy-miss-2.ogg" }) end)
    
    EoHS.set_hex_variable (parameters.target_x, parameters.target_y, "circle_of_protection_strength", EoHS.circle_of_protection_max_strength)
    EoHS.set_circle_of_protection(parameters.target_x, parameters.target_y, parameters.side)
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
