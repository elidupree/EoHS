this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- undying_army.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,gui,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,gui,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

local cannot_affect = function (parameters, unit)
  if wesnoth.sides.is_enemy(unit.side, parameters.side) then
    return true
  end
  if EoHS.get_unit_variable(unit, "undying") then
    return _"This unit is already undying."
  end
  if EoHS.get_unit_variable(unit, "is_wizard") then
    return _"Wizards can't be made undying."
  end
  if EoHS.get_unit_variable(unit, "is_crypt") then
    return _"Crypts can't be made undying."
  end
end

local relevant_hexes = function(parameters)
  local result = {}
  for x,y in helper.adjacent_tiles(parameters.src_x, parameters.src_y) do
    local unit = EoHS.get_unit(x,y)
    table.insert(result, {
      x=x, y=y,
      affected = unit and not cannot_affect (parameters, unit)
    })
  end
  return result
end

EoHS.make_spell("undying_army", {
  image = "attacks/axe-undead.png",
  name = _"Undying Army",
  description = _"You enchant all adjacent non-wizard allies. They become unkillable undead; if they are reduced to 0 HP, they return with 8 HP at the end of your next turn, or the next time the hex is empty. They become killable again if you die, even if you will respawn as a lich.",
  
  is_enchantment = true,
  
  base_cost = { action_points=6, mana=24 },
  
  no_target_but_show_UI = true,
  
  target_independent_stuff = function(parameters, extras)
    local result = {}
    local number = 0
    for i,hex in ipairs (relevant_hexes (parameters)) do
      local unit = EoHS.get_unit(hex.x, hex.y)
      local failure = unit and cannot_affect (parameters, unit)
      local success = (unit and not failure)
      table.insert (result, {"item", {
        x= hex.x, y= hex.y, halo = success and "help" or "potential_change",
      }})
      if type (failure) == "userdata" then table.insert (result, {"label", {
        x= hex.x, y= hex.y, text = failure,
        color = EoHS.nonfunctional_color,
      }}) end
      if success then number = number + 1 end
    end
    table.insert (result, {"aspect", {kind = _"Units affected", value = number, forbidden = number == 0, doesnt_affect_scribing = true}})
    return result
  end,
  
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local affected_hexes = relevant_hexes (parameters, true)
    local id = EoHS.unit_id(EoHS.get_unit(parameters.actor_id))
    for i,hex in ipairs(relevant_hexes (parameters)) do if hex.affected then
      local unit = EoHS.get_unit(hex.x, hex.y)
      EoHS.set_unit_variable(unit, "is_reanimated", true)
      EoHS.set_unit_variable(unit, "undying", true)
      EoHS.set_unit_variable(unit, "undyer_id", id)
      EoHS.update_all_type_adjustments(unit)
      EoHS.put_unit(unit, {immediate=true})
      wesnoth.float_label(unit.x, unit.y, "<span color='#000000'>".._"undying".."</span>")
    end end
    extras.do_on_clients_who_see(function() wml.fire("sound", { name = "lich-hit-2.ogg" }) end)
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-- TODO their facing, draw XP bar and overlays
local item_image = function(unit) return "misc/blank-hex.png~BLIT("..EoHS.unit_thumbnail(unit).."~SCALE(58,39),7,33)~BLIT(items/burial.png~CROP(5,0,67,72),0,0)" end
EoHS.at_side_turn_end(function()
  local list = EoHS.get_side_variable(wesnoth.current.side, "undying_units") or {}
  EoHS.remove_subtags(list, "unit", function(unit)
    if unit.respawn_delay > 0 then
      unit.respawn_delay = unit.respawn_delay - 1
    elseif EoHS.location_is_passable(unit.x, unit.y, unit.side) and not EoHS.get_unit(unit.x, unit.y) then
      unit.respawn_delay = nil
      EoHS.remove_item({x=unit.x, y=unit.y, image=item_image(unit)})
      EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
      return true
    end
    return false
  end)
  EoHS.set_side_variable(wesnoth.current.side, "undying_units", list)
end)
EoHS.move_undying_to_recall = function()
  for side, info in ipairs (wesnoth.sides) do
    local list = EoHS.get_side_variable(wesnoth.current.side, "undying_units") or {}
    EoHS.remove_subtags(list, "unit", function(unit)
      unit.respawn_delay = nil
      EoHS.remove_item({x=unit.x, y=unit.y, image=item_image(unit)})
      if info.__cfg.persistent then
        EoHS.scenario_over_cleanup_unit (unit)
        wesnoth.put_recall_unit(unit)
      end
      return true
    end)
    EoHS.set_side_variable(wesnoth.current.side, "undying_units", list)
  end
end
EoHS.unit_undies = function(unit)
  local list = EoHS.get_side_variable(unit.side, "undying_units") or {}
  unit.hitpoints = math.min(8, unit.max_hitpoints)
  unit.respawn_delay = (unit.side == wesnoth.current.side) and 1 or 0
  table.insert(list, {"unit",unit})
  EoHS.set_side_variable(unit.side, "undying_units", list)
  EoHS.remove_unit(unit.x, unit.y)
  EoHS.place_item({x=unit.x, y=unit.y, image=item_image(unit)})
end
EoHS.at_die(function(maybe_undyer)
  local id = EoHS.unit_id(maybe_undyer)
  if id then
    local list = EoHS.get_side_variable(maybe_undyer.side, "undying_units") or {}
    EoHS.remove_subtags(list, "unit", function(unit)
      if EoHS.get_unit_variable(unit, "undyer_id") == id then
        EoHS.remove_item({x=unit.x, y=unit.y, image=item_image(unit)})
        return true
      end
      return false
    end)
    EoHS.set_side_variable(maybe_undyer.side, "undying_units", list)
    local undyings_lost = EoHS.get_units({ EoHS.is_on_the_map, EoHS.has_unit_variable("undyer_id", id) })
    for i,unit in ipairs(undyings_lost) do
      EoHS.set_unit_variable(unit, "undying")
      EoHS.update_all_type_adjustments(unit)
      EoHS.put_unit(unit)
    end
  end
end)

-- A utility function used by the swarm AI to avoid standing on these locations. It doesn't need to be correct about locations where they wouldn't be able to stand
EoHS.update_undying_respawn_locations = function()
  EoHS.current_undying_respawn_locations = {}
  local list = EoHS.get_side_variable(wesnoth.current.side, "undying_units") or {}
  for index, unit in ipairs (EoHS.get_subtags(list, "unit")) do
    if unit.respawn_delay == 0 then
      EoHS.current_undying_respawn_locations[unit.x.."_"..unit.y] = true
    end
  end
end

-->>)}
