this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- compulsion.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,gui,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,gui,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

-- TODO: caching some of this stuff?
local cost_func = function(caster_side, victim, wvictim, optimism, attack_target_x, attack_target_y)
  return function(x, y, current_cost)
    if (attack_target_x==x) and (attack_target_y==y) then
      return 1
    end
    local unshrouded = EoHS.hex_is_unshrouded(x,y,caster_side)
    if optimism == "pessimistic" then
      if not (unshrouded and EoHS.wunit_can_move_on_hex(wvictim, x, y)) then
        return nil
      end
    else
      if unshrouded and (not EoHS.wunit_can_move_on_hex(wvictim, x, y)) then
        return nil
      end
    end
    local near_attack_target = attack_target_x and (EoHS.distance_between(x,y,attack_target_x,attack_target_y) <= 1)
    local seen_unit = EoHS.get_seen_unit(x,y,caster_side)
    if (seen_unit and (wesnoth.sides.is_enemy(caster_side, seen_unit.side) or near_attack_target)) or
        ((optimism == "pessimistic") and not EoHS.hex_is_unfogged(x,y,caster_side)) then
      return nil
    end
    local cost = unshrouded and wesnoth.units.movement_on(wvictim, wesnoth.current.map[{x, y}]) or 1
    local zoc = false
    for x2,y2 in helper.adjacent_tiles(x,y) do
      if (optimism == "pessimistic") and not EoHS.hex_is_unfogged(x2,y2,caster_side) then
        zoc = true
        break
      end
      local unit = EoHS.get_seen_unit(x2,y2,caster_side)
      if unit and unit.zoc and wesnoth.sides.is_enemy(caster_side, unit.side) and not ((x2==victim.x) and (y2==victim.y)) then
        zoc = true
        break
      end
    end
    if zoc then
      if near_attack_target then
        zoc = false
      end
      -- TODO: handling selective skirmisher abilities better
      for i,ability in ipairs(EoHS.game_action_simulations.abilities_affecting_unit_wunit(victim, wvictim)) do
        if ability[1] == "skirmisher" then
          zoc = false
          break
        end
      end
    end
    if zoc then
      cost = math.max(cost, victim.max_moves - current_cost)
    end
    return cost
  end
end

local find_path = function(caster_side, victim, wvictim, target_x, target_y, optimism)
  local adjust_max = 0
  local attack_target_x, attack_target_y = nil, nil
  local attacking = EoHS.get_seen_unit(target_x,target_y,caster_side)
  if attacking then
    adjust_max = 1
    attack_target_x, attack_target_y = target_x, target_y
  end
  local path = EoHS.find_path(victim.x,victim.y,target_x,target_y,cost_func(caster_side, victim, wvictim, optimism, attack_target_x, attack_target_y),victim.max_moves+adjust_max)
  return path
end

local find_reach = function(caster_side, victim, wvictim, optimism)
  local initial = EoHS.find_reach(victim.x,victim.y,cost_func(caster_side, victim, wvictim, optimism),victim.max_moves)
  local result = {}
  local found = {}
  for index, location in ipairs (initial) do
    local unit = EoHS.get_unit (location.x, location.y)
    if (not unit) or unit == victim then
      table.insert (result, location)
      for x, y in helper.adjacent_tiles (location.x, location.y) do
        local index = x..","..y
        if EoHS.get_seen_unit (x, y, caster_side) and not found [index] then
          found [index] = true
          table.insert (result, {x=x,y=y})
        end
      end
    end
  end
  return result
end

local stuff = function(parameters)
  local result = {}
  result.victim = EoHS.get_unit(parameters.target_x, parameters.target_y)
  result.wvictim = wesnoth.units.get(parameters.target_x, parameters.target_y)

  result.optimistic = find_path(parameters.side, result.victim, result.wvictim, parameters.dst_x, parameters.dst_y, "optimistic")
  result.optimistic = result.optimistic[1] and result.optimistic
  if not result.optimistic then
    return result
  end
  result.pessimistic = find_path(parameters.side, result.victim, result.wvictim, parameters.dst_x, parameters.dst_y, "pessimistic")
  result.pessimistic = result.pessimistic[1] and result.pessimistic
  result.projected = result.pessimistic or result.optimistic
  result.attacking = EoHS.get_seen_unit(parameters.dst_x,parameters.dst_y,parameters.side)
  return result
end



EoHS.make_spell("compulsion", {
  image = "attacks/gaze.png",
  name = _"Compulsion",
  description = _"You enchant an enemy unit to move and possibly attack. If you send it to attack a unit, it will use whichever attack does the most damage. You can make it attack a unit on any side; while moving, it is subject to your enemies' ZoC and not to your allies'. If the unit would have to pass through fog or shroud, you may attempt to cast Compulsion; this will clear the fog/shroud, but if the unit still can't reach the target in one turn, it doesn't move at all. Compulsion doesn't work on wizards or dragons unless you're at least two levels higher than them.",
  
  is_enchantment = true,
  
  base_cost = { action_points=7, mana=4 },
  base_range = 1,
  
  target_dependent_stuff = EoHS.simple_unit_target ("change", function (unit, parameters)
    if parameters.side and not wesnoth.sides.is_enemy (unit.side, parameters.side) then
      return _"Compulsion only works on enemies."
    end
    if (EoHS.get_unit_variable(unit, "is_wizard") or (unit.type == "Fire Dragon") or (unit.type == "Skeletal Dragon")) and (unit.level > parameters.actor_level - 2) then
      return _"Compulsion doesn't work on wizards or dragons unless you're at least two levels higher than them."
    end
    if EoHS.get_unit_variable(unit, "lightning_paralysis") then
      return _"You can't make a paralyzed unit move."
    end
  end),
  
  after_targeting = function (parameters)
    local options = {}
    local victim = EoHS.get_unit(parameters.target_x, parameters.target_y)
    local wvictim = wesnoth.units.get(parameters.target_x, parameters.target_y)
    
    options.actor = victim
    options.name =_"Casting Compulsion"
    
    options.legal_targets = find_reach (parameters.side, victim, wvictim, "optimistic")
    options.dependent_stuff_function = function (x,y)
      if (x== parameters.target_x) and (y== parameters.target_y) then
        return {{"label",{
          x=x,y=y, forbidden = true,
          text =_"You can't make a unit attack itself.",
        }}}
      end
      local result = {}
      local targeted_parameters = EoHS.deep_copy (parameters)
      targeted_parameters.dst_x, targeted_parameters.dst_y =x,y
      local thingy = stuff (targeted_parameters)
      if thingy.projected then
        local potential = (thingy.projected == thingy.pessimistic) and "" or "potential_"
        for i,l in ipairs(thingy.projected) do
          local x,y = l[1], l[2]
          table.insert(result, {"item",{
            x=x, y=y,
            halo= potential..((result.attacking and (i==#projected)) and "attack" or "change"),
          }})
        end
      end
      return result
    end
    
    local dst_x, dst_y = EoHS.choose_target (options)
    if dst_x then
      parameters.dst_x, parameters.dst_y = dst_x, dst_y
    else
      return false
    end
  end,
    
  happen = function(parameters, extras)
    local s = stuff(parameters)
    EoHS.begin_casting(parameters.actor_id, s.victim.x, s.victim.y)
    extras.do_on_clients_who_see(function() wml.fire("sound", { name = "magic-dark.ogg" }) end)
    
    local old_side = s.wvictim.side
    s.wvictim.side = parameters.side
    wml.fire("redraw",{clear_shroud=true,side=parameters.side})
    s.wvictim.side = old_side
    -- Try the known route first, so it's what we showed the player. Try harder only if there isn't one.
    local path = s.pessimistic or find_path(parameters.side, s.victim, s.wvictim, parameters.dst_x, parameters.dst_y, "pessimistic")
    if not path[1] then
      EoHS.message(_"The compelled unit wasn't able to reach that destination!")
    else
      local xs,ys = {},{}
      for i,l in ipairs(path) do
        local x,y = l[1], l[2]
        if not ((i==1) or (s.attacking and (i==#path))) then
          table.insert(xs, x)
          table.insert(ys, y)
          local ambushed = false
          for x2,y2 in helper.adjacent_tiles(x,y) do
            local unit = EoHS.get_unit(x2,y2)
            if unit and EoHS.game_action_simulations.unit_wunit_is_hidden(unit, wesnoth.units.get(x2,y2), parameters.side) then
              ambushed = true
              EoHS.set_unit_status_immediate(unit, "uncovered", false)
            end
          end
          if ambushed then
            if i < #path - 1 then
              s.attacking = nil
            end
            break
          end
        end
      end
      local attacker_id = EoHS.unit_id(s.victim)
      local defender_id = s.attacking and EoHS.unit_id(s.attacking)
      if xs[1] then
        EoHS.unsafe_code_may_fire_events(function() wml.fire("move_unit", {
          x=s.victim.x, y=s.victim.y,
          to_x = table.concat(xs, ","),
          to_y = table.concat(ys, ","),
          check_passability = false,
          fire_event = true,
        }) end)
      end
      if defender_id then
        local attacker = EoHS.get_unit(attacker_id)
        local defender = EoHS.get_unit(defender_id)
        if attacker and defender and (EoHS.distance_between(attacker.x, attacker.y, defender.x, defender.y) == 1) then
          local wattacker = wesnoth.units.get(attacker.x, attacker.y)
          local wdefender = wesnoth.units.get(defender.x, defender.y)
          local attack_num = 1
          local best_num
          local best_priority = -math.huge
          for attack in wml.child_range(attacker, "attack") do
            local att_stats, def_stats = wesnoth.simulate_combat(wattacker, attack_num, wdefender)
            local priority = EoHS.synchronize_choice(math.floor(100 * ((defender.hitpoints-def_stats.average_hp)/defender.max_hitpoints + def_stats.hp_chance[0])))
            if priority > best_priority then
              best_priority = priority
              best_num = attack_num
            end
            attack_num = attack_num + 1
          end
          if best_num then
            -- Hack: this counts as a regular attack, not a special action
            EoHS.during_action = nil
            EoHS.game_action_simulations.attack_unit({
              attacker = { x=attacker.x, y=attacker.y, weapon_index_zero_based = best_num - 1 },
              defender = { x=defender.x, y=defender.y, weapon_index_zero_based = "choose"     },
            })
            EoHS.units_may_advance_now()
            EoHS.during_action = true
          end
        end
      end
    end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
