this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- poison_ground.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

local poison_overlay = "terrain/alphamask.png~G(255)~O(0.2)~BLIT(items/potion-poison.png)"
EoHS.get_ground_poisoned = function(x,y)
  return EoHS.get_hex_variable(x, y, "poison_ground")
end
EoHS.set_ground_poisoned = function(x,y,val)
  if EoHS.get_ground_poisoned(x,y) ~= val then
    EoHS.set_hex_variable(x, y, "poison_ground", val)
    if val then
      EoHS.place_item ({x=x,y=y,image=poison_overlay})
    else
      EoHS.remove_item({x=x,y=y,image=poison_overlay})
    end
  end
end

EoHS.at_init_scenario(function()
  EoHS.set_scenario_variable("poison_ground", {})
end)
EoHS.at_side_turn_end(function()
  -- "You don't need to iterate the map! You can use pairs()!"
  -- Yeah, if I want to risk OOS when systems have different hash functions. Even for this, I'm not willing to risk it.
  local w,h = wesnoth.get_map_size()
  for x=1,w do for y=1,h do
    if EoHS.get_ground_poisoned(x,y) then
      local unit = EoHS.get_unit(x,y)
      if unit and not EoHS.get_subtag_attribute(unit, "status.unpoisonable") then EoHS.set_unit_status_immediate(unit, "poisoned", true) end
      EoHS.add_terrain_change(x,y,{name="poison"})
    end
  end end
end)

local affected_hexes_func = function(parameters, known_or_actual)
  local result = {}
  for i,hex in ipairs(EoHS.find_reach(parameters.target_x, parameters.target_y, EoHS.known_or_actual_passable_only(parameters.side, known_or_actual), 2)) do
    if not EoHS.get_circle_of_protection(hex.x, hex.y) then table.insert(result, {x=hex.x, y=hex.y, visual="harm"}) end
  end
  return result
end
local get_stuff = function(affected_hexes)
  local unpoisoned = {}
  for i,hex in ipairs(affected_hexes) do
    if not EoHS.get_ground_poisoned(hex.x,hex.y) then
      table.insert(unpoisoned, hex)
    end
  end
  local approximate_num_to_poison = math.min(#unpoisoned, #affected_hexes * 3 / 4)
  local chance = math.floor((100 * approximate_num_to_poison / #unpoisoned) + 0.5) -- only for UI, so unsafe math is OK
  local minimum_poisoned = math.min(#unpoisoned, math.floor(#affected_hexes * 3 / 4))
  local chance_of_extra = (minimum_poisoned < #unpoisoned) and ((#affected_hexes * 3) % 4) or 0
  
  return unpoisoned,chance,minimum_poisoned,chance_of_extra
end

EoHS.make_spell("poison_ground", {
  image = "icons/potion_green_medium.png",
  name = _"Poison Ground",
  description = _"You permanently corrupt most hexes in a diameter-5 circle around the target. Units on the corrupted hexes become poisoned at the end of any turn. This spell affects 75% of the hexes in the area, chosen at random, but favoring hexes that are not yet poisoned (so a second casting reliably fills the remaining area). Poisoned ground is visible through fog and makes some cosmetic changes to the terrain.",
  
  base_cost = { action_points=6, mana=10 },
  base_range = 3,
  
  target_dependent_stuff = function(parameters, extras)
    local affected_hexes = affected_hexes_func(parameters, "known")
    local unpoisoned,chance = get_stuff(affected_hexes)
    local result = {}
    for index, hex in ipairs (affected_hexes) do
      if not EoHS.get_ground_poisoned(hex.x,hex.y) then
        table.insert (result, {"label", {
          x = hex.x, y= hex.y,
          text = EoHS.substitute (_"$1|%", {chance}),
        }})
      end
    end
    return result
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    extras.do_on_clients_who_see(function() wml.fire("sound", { name = "poison.ogg" }) end)
    local unpoisoned,chance,minimum_poisoned,chance_of_extra = get_stuff(affected_hexes_func(parameters, "actual"))
    local num_to_poison = minimum_poisoned + ((EoHS.random ("0..3") < chance_of_extra) and 1 or 0)
    while num_to_poison > 0 do
      local which = EoHS.random("1.."..#unpoisoned)
      EoHS.set_ground_poisoned(unpoisoned[which].x, unpoisoned[which].y, true)
      table.remove(unpoisoned, which)
      num_to_poison = num_to_poison - 1
    end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-->>)}
