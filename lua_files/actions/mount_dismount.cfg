this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- mount_dismount.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

local mountable_units={
  ["Wolf"]=true,["Great Wolf"]=true,["Direwolf"]=true,
  ["Wose"]=true,["Elder Wose"]=true,["Ancient Wose"]=true,
  ["Water Serpent"]=true,["Gryphon"]=true,["Sea Serpent"]=true,
  ["Fire Dragon"]=true,["Yeti"]=true,["Skeletal Dragon"]=true
}

EoHS.get_mount = function(unit)
  return EoHS.get_subtag(unit, "variables.EoHS_mount")
end
EoHS.get_mount_effects = function(unit)
  return EoHS.get_subtag(unit, "variables.EoHS_mount_effects")
end
EoHS.set_mount = function(unit, mount)
  local literal_variables = EoHS.get_subtag(unit, "variables")
  EoHS.remove_subtags(literal_variables, "EoHS_mount")
  if mount then table.insert(literal_variables, {"EoHS_mount",mount}) end
end
EoHS.set_mount_effects = function(unit, mount_effects)
  local literal_variables = EoHS.get_subtag(unit, "variables")
  EoHS.remove_subtags(literal_variables, "EoHS_mount_effects")
  if mount_effects then table.insert(literal_variables, {"EoHS_mount_effects",mount_effects}) end
end

EoHS.update_mount_hitpoints = function(unit)
  -- Essentially, each HP change applies to just the rider or just the mount, based on which would make their %HP more similar,
  --   until they're balanced, at which point it stays that way.
  local mount = EoHS.get_mount(unit)
  if mount then
    local last_hitpoints = EoHS.get_unit_variable(unit, "remembered_mounted_hitpoints")
    local gain = unit.hitpoints - last_hitpoints
    if gain ~= 0 then
      local desired_mount_hitpoints = math.floor((mount.max_hitpoints*unit.hitpoints*2 + unit.max_hitpoints) / (2*unit.max_hitpoints))
      local diff1 = mount.hitpoints      - desired_mount_hitpoints
      local diff2 = mount.hitpoints+gain - desired_mount_hitpoints
      if (diff1 * diff2) <= 0 then
        mount.hitpoints = desired_mount_hitpoints
      else
        if math.abs(diff2) < math.abs(diff1) then
          mount.hitpoints = mount.hitpoints+gain
        end
      end
      EoHS.set_unit_variable(unit, "remembered_mounted_hitpoints", unit.hitpoints)
      return true
    end
  end
  return false
end
-- It's confusing to dismount something you've been riding for a while only to find that it's still poisoned.
-- So we cure poison for mounts, even though we don't apply most other rules.
EoHS.at_side_turn("is_mounted", function(units)
  for i,unit in ipairs(units.with_variable.is_mounted or {}) do
    if wesnoth.get_terrain_info(wesnoth.get_terrain(unit.x,unit.y)).healing then -- I guess all healing terrains cure? TODO verify
      local mount = EoHS.get_mount(unit)
      EoHS.set_subtag_attribute(mount, "status.poisoned")
      EoHS.put_unit(unit)
    end
  end
end)
local dismount = function(actor, ap_bonus)
  EoHS.assert(not EoHS.update_mount_hitpoints(actor), "mount hitpoints should be up-to-date per standardize_units from the code that invokes mount/dismount, but they're not")
  local mount = EoHS.get_mount(actor)
  EoHS.set_unit_variable(actor, "is_mounted")
  EoHS.set_mount(actor)
  mount.moves = actor.moves
  actor.hitpoints = actor.hitpoints - mount.hitpoints
  mount.x = actor.x
  mount.y = actor.y
  EoHS.put_unit(mount, {immediate=true,allow_new_location=true,allow_unknown_id=true,allow_overwrite=true})
  EoHS.set_unit_action_points_immediate(mount, EoHS.get_unit_action_points(actor) + (ap_bonus or 0))
end
EoHS.make_spell("mount", {
  image = "units/goblins/direwolver-moving.png",
  name = _"Mount",
  description = _"You mount an adjacent unit. You can mount Wolves, Woses, Water Serpents, Gryphons, Yetis, Sea Serpents, Dragons, and Skeletal Dragons. While mounted, your movement and defense is replaced with that of your mount. You also gain your mount's attacks, max hitpoints, and abilities (except invisibility) on top of your own. Otherwise, you retain all your normal stats. Mounting also reduces your moves to zero.\n\nYou can only mount units from your own side, and you can't mount a unit that is higher-level than you are, or one that is riding another unit itself.",
  base_cost = { action_points = 6 },
  base_range = 1,
                
  target_dependent_stuff = EoHS.simple_unit_target("change", function (unit, parameters, stuff)
    local actor = EoHS.get_unit(parameters.actor_id)
    if unit == actor then
      return _"You can't mount yourself."
    elseif unit.side ~= actor.side then
      return _"You can only mount your own unit."
    elseif unit.type == "Giant Mudcrawler" then
      return _"You refuse to climb on top of something so disgusting."
    elseif not mountable_units[unit.type] then
      return _"This unit isn't a type you can ride."
    elseif EoHS.get_unit_variable(unit, "is_mounted") then
      return _"You can't mount a unit that's already riding something else."
    elseif unit.level > actor.level then
      return _"You can't mount a unit that is higher-level than you are."
    elseif EoHS.get_unit_variable(unit, "is_skeletal_dragon") and not EoHS.get_unit_variable(unit, "is_active_skeletal_dragon") then
      return _"You must command the skeletal dragon before riding it."
    end
  end),             
                
  --[[use_message = function(parameters)
    local target_unit = EoHS.get_unit(parameters.target_x,parameters.target_y)
    return _"$actor.name| ($actor.x|,$actor.y|) mounts a $mount| ($target.x|,$target.y|).", {mount=EoHS.unit_typename(target_unit)}
  end,]]
  
  happen = function(parameters, extras)
    local actor = EoHS.get_unit(parameters.actor_id)
    if EoHS.get_unit_variable(actor, "is_mounted") then
      -- hack: the mount doesn't pay the AP cost
      dismount(actor, extras.cost_paid.action_points)
    else
      EoHS.remove_unit(actor.x, actor.y)
    end
    
    local mount = EoHS.get_unit(parameters.target_x,parameters.target_y)
    -- Hack(?): Just remove forceful immediately from mounts
    if EoHS.get_unit_variable(mount, "forceful_summon") then
      EoHS.remove_forceful(mount)
    end
    EoHS.set_unit_variable(actor, "is_mounted", true)
    EoHS.set_mount(actor, mount)
    local combined_hp = actor.hitpoints + mount.hitpoints
    EoHS.set_unit_variable(actor, "remembered_mounted_hitpoints", actor.hitpoints)
    EoHS.set_unit_variable(actor, "mount_type", mount.type)
    EoHS.set_unit_variable(actor, "mount_gender", mount.gender) -- TODO minor, maybe make these a fake_subtag like unit_attribute_memory
    EoHS.set_unit_variable(actor, "mount_variation", mount.variation)
    EoHS.set_unit_variable(actor, "mount_image_mods", EoHS.get_unit_variable(mount, "image_mods"))
    
    local mount_effects = { id="EoHS_mount_object" }
    local mount_base = EoHS.deep_copy(mount)
    for i,info in ipairs(EoHS.dispellable_unit_variables) do
      if info.remove_after_scenario and EoHS.get_unit_variable(mount_base, info.varname) then
        info.remove_func(mount_base)
      end
    end
    local effect_movement_costs = EoHS.deep_copy(EoHS.get_subtag(mount_base, "movement_costs"))
    local effect_defense        = EoHS.deep_copy(EoHS.get_subtag(mount_base, "defense"       ))
    -- Hack - because non-present values don't overwrite properly
    for i,terrain in ipairs({"deep_water","shallow_water","reef","swamp_water","flat","sand","forest","hills","mountains","village","castle","cave","frozen","unwalkable","fungus"}) do
      if not effect_movement_costs[terrain] then
        effect_movement_costs[terrain] = 99
        effect_defense       [terrain] = 100
      end
    end
    table.insert(mount_effects, {"effect",{ apply_to = "hitpoints"     , increase_total = mount_base.max_hitpoints }})
    table.insert(mount_effects, {"effect",{ apply_to = "movement"      , set = mount_base.max_moves }})
    table.insert(mount_effects, {"effect",{ apply_to = "movement_costs", replace = true, { "movement_costs", effect_movement_costs } }})
    table.insert(mount_effects, {"effect",{ apply_to = "defense"       , replace = true, { "defense"       , effect_defense        } }})
    for attack in wml.child_range(mount_base, "attack") do
      attack.apply_to = "new_attack"
      table.insert(EoHS.force_subtag(attack, "specials"), { "dummy", { id = "EoHS_granted_by_mount" }})
      table.insert(mount_effects, {"effect",attack})
    end
    
    -- remove movement-related abilities from the rider.
    -- It's not actually obvious what the correct way to do this is.
    -- For instance, maybe we shouldn't it remove abilities granted by objects from the map?
    -- It's even inconsistent to remove custom abilities granted by traits and advancements â€“
    -- because then whether the ability is removed depends on whether you mounted
    -- before after you gained the ability.
    -- Thus, we only remove abilities from your unit type itself,
    -- along with some standard abilities from Default and EoHS.
    -- Also remove hiding abilities, mostly for flavor reasons.
    local removed_abilities = {
      EoHS.macros.ABILITY_SKIRMISHER[1],
      EoHS.macros.ABILITY_TELEPORT[1],
      EoHS.macros.ABILITY_AMBUSH [1],
      EoHS.macros.ABILITY_NIGHTSTALK [1],
      EoHS.macros.ABILITY_CONCEALMENT [1],
      EoHS.macros.ABILITY_SUBMERGE [1],
      EoHS.abilities.underfoot[1],
      EoHS.abilities.invisible [1],
    }
    local analyze_ability = function (ability)
      if ability [1] == "skirmisher" or ability [1] == "teleport" or ability [1] == "hides" then
        table.insert (removed_abilities, ability)
      end
    end
    --[[
    oops, doesn't work because of nondeterministic ordering
    for dummy, ability in ipairs (EoHS.abilities) do
      analyze_ability (ability[1])
    end]]
    local example = EoHS.unit_type_generic_example_considering_variations(actor)
    local abilities = EoHS.get_subtag (example, "abilities")
    if abilities then for dummy, ability in ipairs (abilities) do
      analyze_ability (ability)
    end end
    table.insert(mount_effects, {"effect",{ apply_to = "remove_ability", { "abilities", removed_abilities } }})
    
    local abilities = EoHS.get_subtag(mount_base, "abilities")
    EoHS.remove_subtags(abilities, "*", function(ability, kind)
      return (kind == "hides") or (ability.id == "EoHS_summon")
    end)
    table.insert(mount_effects, {"effect",{ apply_to = "new_ability", { "abilities", abilities } }})
    
    EoHS.set_mount_effects(actor, mount_effects)
    
    EoHS.update_all_type_adjustments(actor)
    actor.hitpoints = combined_hp
    actor.moves = 0
    
    actor.x = parameters.target_x
    actor.y = parameters.target_y
    EoHS.put_unit(actor, {immediate=true,allow_unknown_id=true,allow_new_location=true,allow_overwrite=true})
  end,
})
EoHS.make_action("dismount", {
  image = "units/goblins/direwolver-moving.png",
  name = _"Dismount",
  description = _"You part with your mount and step off onto an adjacent hex. Dismounting does not cost AP. When you dismount, your mount retains its movement and AP, you get off with your current moves or your normal max moves (whichever is less), and then you pay your normal movement cost to enter the target hex.",
  base_cost = {},
  base_range = 1,

  target_dependent_stuff = function (parameters)
    local result = {}
    if EoHS.get_seen_unit(parameters.target_x,parameters.target_y,parameters.side) then
      table.insert(result, {"label",{
        x=parameters.target_x, y=parameters.target_y,
        text = _"You must dismount to an empty hex.",
        forbidden = true,
      }})
      return result
    end
    local actor = EoHS.get_unit(parameters.actor_id)
    local unmounted_actor = EoHS.deep_copy(actor)
    EoHS.set_unit_variable(unmounted_actor, "is_mounted")
    EoHS.update_all_type_adjustments(unmounted_actor, true)
    -- TODO don't waste time creating a wunit...
    local movement_cost = wesnoth.unit_movement_cost(EoHS.create_wunit(unmounted_actor), wesnoth.get_terrain(parameters.target_x, parameters.target_y))
    if not (movement_cost and (movement_cost > 0) and (movement_cost <= unmounted_actor.max_moves)) then
      table.insert(result, {"label",{
        x=parameters.target_x, y=parameters.target_y,
        text = _"You can't move on this terrain.",
        forbidden = true,
      }})
    else     
      if movement_cost <= unmounted_actor.moves then
        table.insert(result, {"label",{
          x=parameters.target_x, y=parameters.target_y,
          text = EoHS.substitute (_"You will have $1| moves left after dismounting.", {unmounted_actor.moves - movement_cost}),
        }})
      else
        table.insert(result, {"label",{
          x=parameters.target_x, y=parameters.target_y,
          text = _"You don't have enough moves left to enter this hex.",
          forbidden = true
        }})
      end
    end
    return result
  end,              
                
  use_message = function(parameters)
    return _"$actor.name| ($actor.x|,$actor.y|) dismounts to ($target_x|,$target_y|)."
  end,
  
  happen = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.assert(EoHS.get_unit_variable(actor, "is_mounted"), "a unit dismounted when it wasn't mounted!")
    
    dismount(actor)
    local keep_hp = actor.hitpoints
    EoHS.update_all_type_adjustments(actor)
    actor.hitpoints = keep_hp
    actor.x = parameters.target_x
    actor.y = parameters.target_y
    actor.moves = math.min(actor.moves, actor.max_moves)
    EoHS.put_unit(actor, {immediate=true,allow_new_location=true,allow_unknown_id=true})
    
    local wactor = wesnoth.get_unit(actor.x,actor.y)
    local zoc = false
    for x,y in helper.adjacent_tiles(actor.x,actor.y) do
      local unit = EoHS.get_unit(x,y)
      if unit and unit.zoc and wesnoth.is_enemy(actor.side, unit.side) then
        zoc = true
        break
      end
    end
    if zoc then
      for i,ability in ipairs(EoHS.game_action_simulations.abilities_affecting_unit_wunit(actor, wactor)) do
        if ability[1] == "skirmisher" then
          zoc = false
          break
        end
      end
    end
    if zoc then
      wactor.moves = 0
    else
      wactor.moves = wactor.moves - wesnoth.unit_movement_cost(wactor, wesnoth.get_terrain(actor.x, actor.y))
    end
    actor.moves = wactor.moves
    wesnoth.fire("redraw", { side = actor.side })
    EoHS.fire_event("moveto", actor.x, actor.y)
  end,
})
        
-->>)}