this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- renounce_life.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.make_ritual("renounce_life", {
  image = "scenery/mausoleum01.png",
  name = _"Renounce Life",
  description = _"You die and return as a Lich. When you complete the ritual, an immobile Crypt unit appears in your place, and as long as the crypt survives, you will reappear next to it at the beginning of your turn after any time you die. As a lich, doing a normal attack costs only 4 AP. When you become a lich, your living alliances (if any) abandon you, although you may keep any units you have already recruited, and you regain any skill points you spent on them. If your crypt is on a keep, it can recruit undead on your behalf. You can cast Renounce Life again to move or replace your crypt.",
  
  turns = 5,
  
  no_targeting = true,
  
  conclude = function(parameters, extras)
    local actor = EoHS.get_unit(parameters.actor_id)

    EoHS.animate_unit({ {"filter",{x=actor.x,y=actor.y}}, flag="death" })
    EoHS.remove_unit(actor.x, actor.y)
    
    local skillset = EoHS.get_unit_skillset(actor)
    if (not EoHS.replace_alliances_with_era) and (not EoHS.get_unit_variable(actor, "is_apprentice")) then
      for i,alliance in ipairs(EoHS.skills.alliances) do
        skillset[alliance.id] = (alliance.id == "petty_necromancer")
      end
    end
    EoHS.set_unit_variable(actor, "is_casting_a_spell")
    EoHS.set_unit_variable(actor, "is_lich", true)
    EoHS.update_all_type_adjustments(actor)
    local lich_id = EoHS.unit_id(actor)
    local old_crypts = EoHS.get_units({ EoHS.is_on_the_map, EoHS.has_unit_variable("lich_id", lich_id) })
    for i,unit in ipairs(old_crypts) do EoHS.remove_unit(unit.x, unit.y) end
    EoHS.put_unit({
      x=actor.x, y=actor.y, side=actor.side,
      type = "Revenant",
      canrecruit = actor.canrecruit, extra_recruit = actor.extra_recruit,
      upkeep = 0,
      {"modifications",{{"object",{ -- because putting this in the [advance] doesn't work for some reason
        { "effect", {
          apply_to="zoc",
          value=false,
        }},
      }} }},
    }, {allow_unknown_id = true, allow_new_location = true})
    local crypt = EoHS.get_unit(actor.x, actor.y)
    EoHS.set_unit_action_points_immediate(crypt, 0)
    EoHS.set_unit_variable(crypt, "is_crypt", true)
    EoHS.set_unit_variable(crypt, "lich_id", lich_id)
    EoHS.set_unit_variable(crypt, "not_a_real_leader", true)
    EoHS.set_variable("dead_lich_"..lich_id, actor)
    EoHS.update_all_type_adjustments(crypt)
  end,
})

EoHS.at_die(function(unit)
  if EoHS.get_unit_variable(unit, "is_lich") then
    EoHS.set_mount(unit)
    EoHS.set_unit_variable(unit, "is_mounted")
    EoHS.set_variable("dead_lich_"..EoHS.unit_id(unit), unit)
  end
end)

EoHS.has_crypt = function(unit)
  return wesnoth.units.find_on_map({ EoHS.has_unit_variable("lich_id", EoHS.unit_id(unit)) })[1] and true or false
end

EoHS.place_lich = function(lich, is_wunit, crypt_x, crypt_y, animate)
  local wlich = is_wunit and lich or EoHS.create_wunit(lich)
  local path = EoHS.space_making_path(crypt_x, crypt_y, function(unit, x, y, wunit)
    if EoHS.location_is_passable(x,y,lich.side) then
      if unit.x == crypt_x and unit.y == crypt_y then
        if not EoHS.wunit_can_move_on_hex(wlich,x,y) then
          -- spawning on a chasm is somewhat bad; push a couple units for it
          return 25000
        end
        -- Prefer higher lich defense, but not at any real cost
        local defense = wesnoth.unit_defense(wlich, wesnoth.current.map[{x,y}])
        return math.floor(defense/10)
      else
        local step_cost = 10000 -- cost of moving a unit
        if EoHS.wunit_can_move_on_hex(wunit,x,y) then
          -- very slightly prefer easier moves
          step_cost = step_cost + math.floor(100 * wesnoth.units.movement_on(wunit, wesnoth.current.map[{x,y}]) / unit.max_moves)
        else
          -- don't make an illegal move unless you absolutely have to
          step_cost = step_cost + 1000000
        end
        -- pushing any wizard is also fairly undesirable
        if EoHS.get_unit_variable(unit, "wizard") then
          step_cost = step_cost + 200000
        end
        -- Unfavorable to the lich's team - don't punish enemies for attacking crypt!
        if wesnoth.sides.is_enemy(unit.side, lich.side) then
          step_cost = step_cost * 4
        end
        return step_cost
      end
    end
  end)
  if path then
    for i,h in ipairs(path) do
      if path[i+2] then
        local prev = path[i+1]
        local unit = EoHS.get_unit(prev.x,prev.y)
        EoHS.remove_unit(unit.x,unit.y)
        unit.x,unit.y = h.x,h.y
        EoHS.put_unit(unit, {allow_unknown_id = true, allow_new_location = true})
      else
        lich.x,lich.y = h.x,h.y
        if is_wunit then wesnoth.units.to_map(lich) else EoHS.put_unit(lich, {allow_unknown_id = true, allow_new_location = true}) end
        if animate then EoHS.animate_unit({ {"filter",{x=lich.x,y=lich.y}}, flag="recruited" }) end
        return true
      end
    end
    EoHS.err("bad path: "..EoHS.inspect(path))
  end
end

EoHS.at_side_turn("is_crypt", function(units)
  for i,unit in ipairs(units.with_variable.is_crypt or {}) do
    if unit.side == wesnoth.current.side then
      local lich_id = EoHS.get_unit_variable(unit, "lich_id")
      local dead_lich = EoHS.get_variable("dead_lich_"..lich_id)
      if dead_lich then
        dead_lich.type = "Lich"
        EoHS.set_unit_variable(dead_lich, "original_type", "Lich")
        EoHS.update_all_type_adjustments(dead_lich)
        dead_lich.hitpoints = math.floor(dead_lich.max_hitpoints / 2)
        if EoHS.place_lich(dead_lich, false, unit.x, unit.y, true) then EoHS.set_variable("dead_lich_"..lich_id) end
      end
    end
  end
end)

EoHS.replace_lich_with_recall_crypt = function(lich)
  if EoHS.get_unit_variable(lich, "is_lich") then
    local wcrypt = wesnoth.units.find_on_recall({ EoHS.has_unit_variable("lich_id", EoHS.unit_id(lich)) })[1]
    if wcrypt then
      EoHS.remove_unit(lich.x, lich.y)
      wesnoth.extract_unit(wcrypt)
      wcrypt.x = lich.x
      wcrypt.y = lich.y
      wesnoth.units.to_map(wcrypt)
      EoHS.place_lich(lich, false, lich.x, lich.y)
    end
  end
end

EoHS.place_recall_lich_near_crypt = function(crypt)
  if EoHS.get_unit_variable(crypt, "is_crypt") then
    local wlich = wesnoth.units.find_on_recall({ EoHS.has_unit_id(EoHS.get_unit_variable(crypt, "lich_id")) })[1]
    if wlich then
      wesnoth.extract_unit(wlich)
      EoHS.place_lich(wlich, true, crypt.x, crypt.y)
    end
  end
end

EoHS.at_init_scenario(function()
  local liches = EoHS.get_units({ EoHS.is_on_the_map, EoHS.has_unit_variable("is_lich") })
  local crypts = EoHS.get_units({ EoHS.is_on_the_map, EoHS.has_unit_variable("is_crypt") })
  for i,unit in ipairs(liches) do
    EoHS.replace_lich_with_recall_crypt(unit)
  end
  for i,unit in ipairs(crypts) do
    EoHS.place_recall_lich_near_crypt(unit)
  end
end)

-->>)}
