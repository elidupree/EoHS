this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- summons.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.make_summoning_spell("summon_fire_guardian", {type="Fire Guardian"}, {
  base_cost = { action_points = 6 },
})

EoHS.make_summoning_spell("summon_arctic_drake", {type="Drake Fighter"}, {
  base_cost = { action_points = 6 },
  description_addendum = _"Arctic Drakes are Drake Fighters with 20% cold resistance, 10% arcane resistance, and 1 move/40% defense on snow and ice.",
})

EoHS.make_summoning_spell("summon_sea_serpent", {type="Sea Serpent"}, {
  image = { offset={x=-3,y=2} },
  base_cost = { action_points = 7 },
  description_addendum = _"These Sea Serpents start at level 2 with 76 hitpoints.",
})

EoHS.make_summoning_spell("summon_wolf", {type="Wolf"}, {
  image = { offset={x=-6,y=-5} },
  base_cost = { action_points = 5 },
})

EoHS.make_summoning_spell("summon_giant_scorpion", {type="Giant Scorpion"}, {
  name = _"Summon Scorpion",
  image = { offset={x=-1,y=-4} },
  base_cost = { action_points = 6 },
})

local wose_spec = {type="Wose", {"status",{ uncovered=false }} }
local wose_starts_invisible = function(parameters)
  for x,y in helper.adjacent_tiles(parameters.target_x,parameters.target_y) do
    local unit = EoHS.get_unit(x,y)
    if unit and wesnoth.sides.is_enemy(unit.side, wesnoth.current.side) then
      return false
    end
  end
  return true
end
EoHS.make_summoning_spell("summon_wose", wose_spec, {
  image = { offset={x=0,y=2} },
  base_cost = { action_points = 6 },
  base_range = 4,
  
  target_dependent_stuff = function(parameters)
    local stuff = {}
    local problem
    if (not string.match(wesnoth.get_terrain(parameters.target_x,parameters.target_y), "%^F")) then
      problem = _"Woses can only be summoned in forests."
    elseif not EoHS.hex_is_unfogged(parameters.target_x, parameters.target_y, parameters.side) then
      problem = _"This hex might already be occupied."
    elseif EoHS.get_seen_unit(parameters.target_x, parameters.target_y, parameters.side) then
      problem = _"This hex is already occupied."
    end
    table.insert (stuff, {"item", {
      x=parameters.target_x,y=parameters.target_y,
      halo = EoHS.actions.summon_wose.summon_prototype_image,
      require_no_invisible_enemy=true,
      hidden_from_enemies=wose_starts_invisible(parameters),
    }})
    if problem then
      table.insert (stuff, {"label", {
        x=parameters.target_x,y=parameters.target_y,
        text= problem,
        forbidden = true,
      }})
    end
    return stuff
  end,
  
  description_addendum = _"This spell doesn't indicate its target to your enemies, and the wose is invisible when it appears (if it is not adjacent to an enemy unit).",
  use_message = function(parameters)
    local hidden_message = _"$actor.name| ($actor.x|,$actor.y|) casts Summon Wose. Where could it be...?"
    if wose_starts_invisible(parameters) then
      return hidden_message
    end
    -- Also show the hidden message for clients that can't see the wose in the fog,
    -- because otherwise we would be revealing the secret information of whether the wose was
    -- invisible *as well as* being in the fog
    local knows_where_wose_is = false
    for side in ipairs(wesnoth.sides) do
      EoHS.do_only_on_client_controlling_human_side(side, function()
        if EoHS.hex_is_unfogged(parameters.target_x,parameters.target_y,side) then
          knows_where_wose_is = true
        end
      end)
      if knows_where_wose_is then return nil end
    end
    return hidden_message
  end,
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id)
    
    EoHS.summon_unit(parameters, wose_spec, parameters.target_x, parameters.target_y, extras.cost_paid, EoHS.get_unit(parameters.actor_id))
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

EoHS.make_summoning_spell("summon_water_serpent", {type="Water Serpent"}, {
  image = { offset={x=-8,y=1} },
  base_cost = { action_points = 6 },
})

EoHS.make_summoning_spell("summon_gryphon", {type="Gryphon"}, {
  image = { offset={x=-3,y=-6} },
  base_cost = { action_points = 7 },
})

EoHS.make_summoning_spell("summon_vampire_bat", {type="Vampire Bat"}, {
  base_cost = { action_points = 4 },
  description_addendum = _" You can also absorb these bats later to recover their cost."
})

EoHS.make_summoning_spell("black_cat", {
  type="Rogue",
  generate_name = false,
  {"variables",{EoHS_is_black_cat=true}},
}, {
  description_addendum = _"Black Cats are weak units that can teleport to any of your other units.",
  base_cost = { action_points = 6 },
})

EoHS.make_summoning_spell("summon_ghost", {type="Ghost",{"variables",{EoHS_ghost_protection=true}}}, {
  base_cost = { action_points = 6 },
  description_addendum = _"Ghosts are immune to direct damage from spells."
})

EoHS.make_conditional_ability("ghost_protection", function(unit)
  if EoHS.get_unit_variable(unit, "ghost_protection") then
    return { "dummy", {
      name = _"ethereal",
      description = _"Ghosts are immune to direct damage from spells.",
    }}
  end
end)

EoHS.make_summoning_spell("summon_skeleton", {type="Skeleton"}, {
  image = { offset={x=5,y=0} },
  base_cost = { action_points = 5 },
})
EoHS.make_summoning_spell("summon_skeleton_archer", {type="Skeleton Archer"}, {
  image = { offset={x=-3,y=0} },
  base_cost = { action_points = 5 },
})

EoHS.make_summoning_spell("summon_chocobone", {type="Chocobone"}, {
  image = { offset={x=-4,y=8} },
  base_cost = { action_points = 5 },
})

EoHS.get_resummonable_wunits = function(side)
  return wesnoth.get_recall_units({ side=side, EoHS.has_unit_variable("is_summon") })
end
local which_resummon = function(parameters, resummonable_wunits)
  if not parameters.which_resummon then return 1 end
  if parameters.which_resummon > #resummonable_wunits then return 1 end
  return parameters.which_resummon
end
EoHS.make_spell("resummon", {
  image = { image_modded="scenery/well.png", offset={x=-2,y=4} },
  name = _"Re-summon",
  description = _"You re-summon a summoned unit from your recall list.",
  
  is_summon = true,
  forbid_scrolls = true,
  
  base_cost = { action_points=6, mana=20 },
  base_range = 1,
  
  target_dependent_stuff = function(parameters)
    local stuff = {}
    local problem
    local resummonable_wunits = EoHS.get_resummonable_wunits(parameters.side)
    local wunit = resummonable_wunits[which_resummon(parameters, resummonable_wunits)]
    if not EoHS.wunit_can_move_on_hex(wunit, parameters.target_x, parameters.target_y) then
      problem = _"You can only summon a unit onto a hex where it can move."
    elseif not EoHS.hex_is_unfogged(parameters.target_x, parameters.target_y, parameters.side) then
      problem = _"You can't tell if this hex is occupied."
    elseif EoHS.get_seen_unit(parameters.target_x, parameters.target_y, parameters.side) then
      problem = _"This hex is already occupied."
    end
    table.insert (stuff, {"item", {
      x=parameters.target_x,y=parameters.target_y,
      halo = EoHS.unit_thumbnail (wunit),
      require_no_invisible_enemy=true,
    }})
    if problem then
      table.insert (stuff, {"label", {
        x=parameters.target_x,y=parameters.target_y,
        text= problem,
        forbidden = true,
      }})
    end
    return stuff
  end,
  
  extra_parameters_dialog_grid = function(dialog_context, parameters)
    local g = function(contents) return { "grid", contents } end
    local r = function(contents) return { "row", contents } end
    local c = function(contents) return { "column", contents } end
    local actor = EoHS.get_unit(parameters.actor_id)
    
    local resummonable_wunits = EoHS.get_resummonable_wunits(parameters.side)
    local rows = {}
    for i,wunit in ipairs(resummonable_wunits) do
      local unit = wunit.__cfg -- TODO cached
      local label = EoHS.unit_typename(unit)
      local image = EoHS.unit_thumbnail(unit, true)
      table.insert(rows, r{c{ horizontal_grow=true, EoHS.fake_listbox_entry(dialog_context, "m\nm\nm\nm\nmmmmmmmmm"..label, {
      {"image",{
        x = 0,
        y = "((height/2)-(image_height/2))",
        w = "(if(height<72,height,72))",
        h = "(if(height<72,height,72))",
        name = image
      }},
      {"text",{
        x=72,
        y=EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
        w="(text_width)",
        h="(text_height)",
        font_size = EoHS.macros.GUI_NORMAL__FONT_SIZE__SMALL,
        color = EoHS.macros.GUI__FONT_COLOR_ENABLED__DEFAULT,
        text = label
      }} }, which_resummon(parameters, resummonable_wunits) == i, function() parameters.which_resummon = i end) }})
    end
    return g{r{
      c{vertical_alignment="top",EoHS.unit_preview_pane(dialog_context, resummonable_wunits[which_resummon(parameters, resummonable_wunits)].__cfg)},
      c{vertical_alignment="top",g(rows)}
    }}
  end,
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    
    local actor = EoHS.get_unit(parameters.actor_id)
    local resummonable_wunits = EoHS.get_resummonable_wunits(parameters.side)
    local wunit = resummonable_wunits[which_resummon(parameters, resummonable_wunits)]
    wesnoth.extract_unit(wunit)
    wunit.moves = 0
    wunit.attacks_left = 0
    wunit.variables.EoHS_extra_action_points = 0
    wunit.x = parameters.target_x
    wunit.y = parameters.target_y
    wesnoth.units.to_map(wunit)
    EoHS.fire_event("prerecall", wunit.x, wunit.y)
    if wunit.valid then
      EoHS.animate_unit({ flag = "recruited", { "filter", { x=wunit.x, y=wunit.y }} }, {dont_redraw_first=true})
      EoHS.fire_event("recall", wunit.x, wunit.y)
      if wunit.valid then
        wml.fire("redraw", { side = wunit.side })
      end
    end
    
    EoHS.finish_casting(parameters.actor_id)
  end,
})

local generic_dragon = {
  alignment = "chaotic",
  type = "fire",
  ability = "leadership",
  breath_cth = "marksman",
  breath_swings = 4,
  breath_damage = 14,
  breath_length = 6,
  breath_spread = 30,
  breath_mana   = 30,
  movetype = "drake",
  moves = 8,
  hitpoints = 101,
}
local dragon_movement_power = function(dragon)
  local movement_power = dragon.moves
  if dragon.movetype ~= "walk" then movement_power = movement_power * 7 / 5 end
  return movement_power
end
local dragon_breath_attack_power = function(dragon)
  local breath_attack_power = dragon.breath_swings * dragon.breath_damage
  if dragon.alignment == "liminal" then breath_attack_power = breath_attack_power * 5 / 6 end
  if dragon.breath_cth ~= "normal" then breath_attack_power = breath_attack_power * 4 / 3 end
  if dragon.type == "acid" then breath_attack_power = breath_attack_power + 10 end
  if dragon.type == "lightning" then breath_attack_power = breath_attack_power + 20 end
  if dragon.type == "spirit" then breath_attack_power = breath_attack_power + 4 end
  return breath_attack_power
end
local dragon_breath_usage_power = function(dragon)
  local breath_attack_power = dragon_breath_attack_power(dragon)
  local breath_footprint = dragon.breath_length * (dragon.breath_spread * (2*math.pi / 360) / 2) * (10 / dragon.breath_mana)
  local breath_usage_power = breath_attack_power +
    (breath_attack_power*breath_footprint/10) *
    ((dragon_movement_power(dragon)+dragon_movement_power(generic_dragon))/(2*dragon_movement_power(generic_dragon)))
  return breath_usage_power
end
local dragon_ability_usage_power = function(dragon)
  return dragon_movement_power(dragon)
end
local dragon_toughness_power = function(dragon)
  local result = dragon.hitpoints
  if dragon.movetype == "fly" then result = result * 7 / 5 end
  return result
end
local dragon_power = function(dragon)
  local  breath_usage_power_proportional =  dragon_breath_usage_power(dragon) /  dragon_breath_usage_power(generic_dragon)
  local ability_usage_power_proportional = dragon_ability_usage_power(dragon) / dragon_ability_usage_power(generic_dragon)
  local     toughness_power_proportional =     dragon_toughness_power(dragon) /     dragon_toughness_power(generic_dragon)
  return breath_usage_power_proportional*3 + ability_usage_power_proportional*2 + toughness_power_proportional
end
local generic_dragon_power = dragon_power(generic_dragon)
local generic_dragon_breath_attack_power = dragon_breath_attack_power(generic_dragon)
local alignments = {"lawful","lawful","lawful","chaotic","chaotic","chaotic","neutral","neutral","liminal"}
local types = {"fire","ice","water","acid","spirit","lightning"}
local abilities = {"leadership","despair","protection","light_control"}
local breath_cths = {"magical","marksman","marksman","normal","normal"}
local movetypes = {"fly","drake","walk"}
local function random_dragon()
  local dragon = {
    alignment = alignments[math.random(#alignments)],
    type = types[math.random(#types)],
    ability = abilities[math.random(#abilities)],
    breath_cth = breath_cths[math.random(#breath_cths)],
    breath_swings = math.random(2,7),
    breath_damage = math.random(2,40),
    breath_length = math.random(3,9),
    breath_spread = math.random(15,45),
    breath_mana   = math.random(15,80),
    movetype = movetypes[math.random(#movetypes)],
    moves = math.random(5,13),
    hitpoints = math.random(66,300)
  }
  if (dragon.ability == "light_control") and (dragon.alignment == "neutral") then dragon.alignment = "liminal" end
  local power = dragon_power(dragon)
  if (power < 0.9*generic_dragon_power) or (power > 1.1*generic_dragon_power) then return random_dragon() end
  local breath_attack_power = dragon_breath_attack_power(dragon)
  if (breath_attack_power < 0.6*generic_dragon_breath_attack_power) or
     (breath_attack_power > 1.6*generic_dragon_breath_attack_power) then return random_dragon() end
  return dragon
end
EoHS.make_summoning_ritual("call_dragon", {type="Fire Dragon"}, {
  name=_"Call Dragon",
  description=_"You summon a mighty dragon with an area breath attack. You can never be sure what kind of dragon will answer your summons - different dragons have different abilities.",
  turns = 5,
  base_cost = { mana=50 },
  image = { offset={x=-45,y=18} },
  finish_unit = function(unit)
    local variables = EoHS.get_fake_subtag(EoHS.force_unit_variables(unit), "dragon")
    local stats = EoHS.synchronize_choice(random_dragon)
    for k,v in pairs(stats) do variables[k] = v end
    EoHS.set_unit_variable(unit, "mana", stats.breath_mana)
  end,
})

EoHS.make_summoning_ritual("summon_yeti", {type="Yeti"}, {
  turns = 3,
  base_cost = { mana=32 },
  image = { offset={x=-6,y=8} },
})

EoHS.make_summoning_ritual("vex_dragon_bones", {type="Skeletal Dragon",{"variables",{EoHS_is_skeletal_dragon=true,EoHS_is_active_skeletal_dragon=true}}}, {
  name=_"Vex Dragon Bones",
  description=_"You twist the bones of a long-dead dragon into a semblance of life. It is so powerful that you must continually spend your energy to keep it active; on any turn when you do not cast Command Dragon Bones for 5 AP, it loses its moves, attacks, retaliation, zone of control, and upkeep until your next turn.",
  turns = 4,
  base_cost = { mana=31 },
  image = { offset={x=-54,y=5} },
})

EoHS.deactivate_skeletal_dragon = function(unit)
  EoHS.set_unit_variable(unit, "is_active_skeletal_dragon", false)
  table.insert(EoHS.force_subtag(unit, "modifications"), {"object",{
    id="EoHS_deactivate_skeletal_dragon",
    { "effect", {
      apply_to="zoc",
      value=false,
    }},
    { "effect", {
      apply_to="remove_attacks",
    }},
    { "effect", {
      apply_to = "image_mod",
      add = "~GS()",
    }},
  }})
  unit.zoc = false
  unit.upkeep = 0
  EoHS.remove_subtags(unit, "attack")
  EoHS.update_unit_graphics(unit)
end
EoHS.activate_skeletal_dragon = function(unit)
  EoHS.set_unit_variable(unit, "is_active_skeletal_dragon", true)
  EoHS.remove_subtags(unit, "modifications.object", "EoHS_deactivate_skeletal_dragon")
  unit.zoc = nil
  unit.upkeep = nil
end

EoHS.at_turn_refresh("is_skeletal_dragon", function(units)
  for i,unit in ipairs(units.with_variable.is_skeletal_dragon or {}) do
    if unit.side == wesnoth.current.side then
      if EoHS.get_unit_variable(unit, "is_active_skeletal_dragon") then
        EoHS.deactivate_skeletal_dragon(unit)
      end
      unit.moves = 0
      EoHS.set_unit_action_points_immediate(unit, 0)
      EoHS.put_unit(unit)
    end
  end
end)
  -- hack: deal with the case of mounts
EoHS.at_turn_refresh("is_mounted", function(units)
  for i,unit in ipairs(units.with_variable.is_mounted or {}) do
    if unit.side == wesnoth.current.side then
      local mount = EoHS.get_mount(unit)
      if EoHS.get_unit_variable(mount, "is_skeletal_dragon") then
        EoHS.set_unit_action_points_immediate(unit, EoHS.get_unit_action_points(unit) - EoHS.actions.command_dragon_bones.base_cost.action_points)
      end
    end
  end
end)

EoHS.make_spell("command_dragon_bones", {
  image = EoHS.actions.vex_dragon_bones.image,
  name = _"Command Dragon Bones",
  description = _"You activate a Skeletal Dragon for one turn.",
  
  base_cost = { action_points=5 },
  base_range = 9,
  
  target_dependent_stuff = EoHS.simple_unit_target ("help", function (unit, parameters)
    if not EoHS.get_unit_variable(unit, "is_skeletal_dragon") then
      return _"This spell can only command Skeletal Dragons."
    elseif unit.side ~= parameters.side then
      return _"You can only command your own unit."
    elseif EoHS.get_unit_variable(unit, "is_active_skeletal_dragon") then
      return _"This dragon is already active."
    end
  end),
  
  happen = function(parameters, extras)
    EoHS.begin_casting(parameters.actor_id, parameters.target_x, parameters.target_y)
    local unit = EoHS.get_unit(parameters.target_x, parameters.target_y)
    EoHS.activate_skeletal_dragon(unit)
    unit.moves = nil
    EoHS.set_unit_action_points_immediate(unit, EoHS.unit_base_action_points(unit))
    EoHS.put_unit(unit, {immediate=true})
    extras.do_on_clients_who_see(function() wml.fire("sound", { name = "skeleton-big-hit-2.ogg" }) end)
    EoHS.finish_casting(parameters.actor_id)
  end,
})

-- EoHS.make_conditional_ability("is_active_skeletal_dragon", function(unit)
--   if not EoHS.get_unit_variable(unit, "is_active_skeletal_dragon") then
--     return { "dummy", {
--       name = _"dormant",
--       description = _".",
--     }}
--   end
-- end)

EoHS.make_summoning_ritual("swarm_nest", {type="Giant Spider",{"variables",{EoHS_is_swarm_nest=true}}}, {
  name=_"Swarm Nest",
  -- TODO not duplicating the swarm description.
  description=_"You summon an immobile nest that spawns an AI-controlled unit onto each adjacent empty hex every turn. The units are Giant Rats if on land, and Tentacles of the Deep if in water. They fight if they see a good opportunity; otherwise, they wander randomly unless they can capture a village or go for healing in one turn. These 'swarm' units move at the end of your turn, and during your turn, they are partially nonexistent, so that they don't get in the way of moving your regular units.",
  turns = 4,
  base_cost = { mana=43 },
  image = { offset={x=0,y=-10} },
})

EoHS.at_side_turn_end("is_swarm_nest", function(units)
  for i,unit in ipairs(units.with_variable.is_swarm_nest or {}) do
    if unit.side == wesnoth.current.side then
      local swarms = {}
      for x,y in helper.adjacent_tiles(unit.x, unit.y) do
        if EoHS.location_is_passable(x,y,unit.side) and not (EoHS.get_unit(x,y) or EoHS.swarm_is_present(x,y)) then
          local terrain = wesnoth.get_terrain(x,y)
          if not string.match(terrain, "^Q") then
            local swarm = {
              x=x, y=y,
              side = unit.side,
            }
            if string.match(terrain, "^[WS]") then
              swarm.type = "Tentacle of the Deep"
              EoHS.give_random_traits(swarm, {"QUICK"}, 1)
            else
              swarm.type = "Giant Rat"
              EoHS.give_random_traits(swarm, {"STRONG","QUICK","RESILIENT"}, 2)
            end
            local swarm_vars = EoHS.force_unit_variables(swarm)
            local nest_vars = EoHS.force_unit_variables(unit)
            swarm_vars.is_swarm = true
            swarm_vars.is_reanimated = nest_vars.is_reanimated -- hee hee hee
            swarm_vars.disappears_after_turns = nest_vars.disappears_after_turns and (nest_vars.disappears_after_turns + 1) -- correct for ordering issue
            EoHS.update_unit_overlays(swarm)
            table.insert(swarms, swarm)
          end
        end
      end
      EoHS.fake_recruit(swarms)
      --EoHS.flatten_swarms(wesnoth.current.side)
    end
  end
end)

EoHS.make_summoning_spell("create_portal", {
  type="Transport Galleon",
  {"variables",{EoHS_is_portal=true}},
}, {
  name=_"Create Portal",
  description=_"You summon an immobile portal that allows all allied units to travel instantly to any other portal.",
  image = { offset={x=0,y=7} },
  base_cost = { action_points = 6 },
})

EoHS.update_portal_tunnels = function()
  local portals = EoHS.get_units({EoHS.has_unit_variable("is_portal")})
  for side in ipairs(wesnoth.sides) do
    local in_xs = {}
    local in_ys = {}
    local out_xs = {}
    local out_ys = {}
    for i,portal in ipairs(portals) do
      if not wesnoth.sides.is_enemy(side, portal.side) then
        table.insert(in_xs,portal.x)
        table.insert(in_ys,portal.y)
        for x,y in helper.adjacent_tiles(portal.x,portal.y) do
          table.insert(out_xs,x)
          table.insert(out_ys,y)
        end
      end
    end
    local tunnel_id = "EoHS_portal_tunnel_"..side
    wml.fire("tunnel", {
      id = tunnel_id,
      remove = true,
    })
    wml.fire("tunnel", {
      id = tunnel_id,
      bidirectional=false,
      {"filter",{ side=side }},
      {"source",{ x=table.concat(in_xs, ","), y=table.concat(in_ys, ",") }},
      {"target",{
        x=table.concat(out_xs, ","), y=table.concat(out_ys, ","),
        {"not",{ {"filter",{}} }} -- Moving onto units is disallowed anyway, but we need this to stop the pathfinding from choosing bogus routes.
      }},
    })
  end
end

EoHS.at_turn_refresh(EoHS.update_portal_tunnels)
EoHS.at_die(function(unit)
  if EoHS.get_unit_variable(unit, "is_portal") then
    EoHS.update_portal_tunnels()
  end
end)

-->>)}
