this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- dragon_breath.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

local affected_hexes_func = function(parameters, known_or_actual)
  local actor = EoHS.get_unit(parameters.actor_id)
  local dragon = EoHS.get_fake_subtag(EoHS.force_unit_variables(actor), "dragon")
  local result = {}
  local aex,aey = EoHS.euclidean_coordinates(actor.x, actor.y)
  local angle_from_actor = EoHS.angle_between(actor.x, actor.y, parameters.target_x, parameters.target_y)
  for i,hex in ipairs(EoHS.find_reach(actor.x, actor.y, ((known_or_actual == "actual") and EoHS.passable_only or EoHS.known_passable_only)(actor.side), dragon.breath_length+1)) do
    local ex,ey = EoHS.euclidean_coordinates(hex.x, hex.y)
    if (aex-ex)*(aex-ex) + (aey-ey)*(aey-ey) <= (1.5*(dragon.breath_length+0.5)*1.5*(dragon.breath_length+0.5)) then
      local angle = EoHS.angle_between(actor.x, actor.y, hex.x, hex.y)
      local angle_difference = angle-angle_from_actor
      if angle_difference > math.pi then angle_difference = angle_difference - 2*math.pi end
      if angle_difference < -math.pi then angle_difference = angle_difference + 2*math.pi end
      if math.abs(angle_difference) <= dragon.breath_spread*2*math.pi/360 then
        if (hex.x~=actor.x or hex.y~=actor.y) and not EoHS.get_circle_of_protection(hex.x, hex.y) then table.insert(result, {x=hex.x, y=hex.y, visual="harm"}) end
      end
    end
  end
  return result
end
local affected_hexes_func_synced = function(parameters, known_or_actual)
  if known_or_actual == "known" then return affected_hexes_func(parameters, known_or_actual) end
  local affected_hexes = EoHS.synchronize_choice(function()
    local result = {}
    for i,h in ipairs(affected_hexes_func(parameters, known_or_actual)) do
      table.insert(result, {"hex",h})
    end
    return result
  end)
  
  for i,h in ipairs(affected_hexes) do affected_hexes[i] = h[2] end
  return affected_hexes
end

-- TODO cold/blade attack
-- TODO un-duplicate with EoHS.skill_attack_func
local get_breath_attack = function(actor)
  for attack in wml.child_range(actor, "attack") do
    if string.find(attack.name, "breath") then
      local result = EoHS.deep_copy(attack)
      EoHS.remove_subtags(result, "specials.*", "EoHS_lightning_paralysis")
      EoHS.remove_subtags(result, "specials.*", "EoHS_just_teleported_1")
      EoHS.remove_subtags(result, "specials.*", "EoHS_just_teleported_2")
      result.damage = math.ceil(result.damage / 2)
      result.is_spell = true
      return result
    end
  end
end

-- TODO un-duplicate 0310k
EoHS.dragon_attack_anim = function(image_modded, dragon)
  local animation = { start_time=-500, offset=0, base_score = 6,
  {"filter_attack",{name=dragon.breath_names,}},
    {"frame",{
        duration=1000, primary=false, auto_vflip=false,
        image=image_modded,
        sound="flame-big.ogg",}}
    }
  local id = "dragon_breath_"
  animation[id.."start_time"] =-500
  local images1={}
  local images2={}
  for f=1,16 do table.insert((f > 8) and images2 or images1, "projectiles/fireball-impact-"..f..".png~GS()"..dragon.breath_cs) end
  table.insert(animation, {id.."frame",{
    duration=500,
    image=table.concat(images1, ","),
    layer=90,
    auto_vflip=false,auto_hflip=false,
    offset="0~1",
  }})
  table.insert(animation, {id.."frame",{
    duration=500,
    image=table.concat(images2, ","),
    layer=90,
    auto_vflip=false,auto_hflip=false,
    offset=1,
  }})
  return {"attack_anim", animation}
end

EoHS.make_action("dragon_breath", {
  image = "attacks/fire-breath-drake.png",
  name = _"Dragon Breath",
  description = _"You strike every unit in the target area with your breath attack, at half damage. Different dragons' breath attacks have different costs and different areas of effect.",
  
  base_cost = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local dragon = EoHS.get_fake_subtag(EoHS.force_unit_variables(actor), "dragon")
    return { action_points=6, mana=dragon.breath_mana }
  end,
  
  commit = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local attack = get_breath_attack(actor)
    if attack then table.insert(parameters, {"attack", attack}) end
  end,
  
  target_dependent_stuff = function (parameters, extras)
    local result = {}
    if not extras.validity_only then
      for index, location in ipairs (affected_hexes_func (parameters, "known")) do
        EoHS.add_attack_stuff (result, parameters, location.x, location.y, EoHS.get_subtag(parameters, "attack"))
      end
      -- note, the visible effects will be desynchronized, but that just doesn't matter very much (like the problem is that very occasionally the spell wouldn't be announced when it should be)
      for i,hex in ipairs(affected_hexes_func (parameters, "actual")) do
        table.insert (result, {"visible_effect", {
          x= hex.x, y= hex.y,
        }})
      end
    end
    return result
  end,
  
  happen = function(parameters)
    local affected_hexes = affected_hexes_func_synced(parameters, "actual")
    local actor = EoHS.get_unit(parameters.actor_id)
    local dragon = EoHS.get_fake_subtag(EoHS.force_unit_variables(actor), "dragon")
    local attacks = {}
    
    -- TODO un-duplicate 0310k
    local animation = { start_time=-1200, offset=0,
      base_score = 10,
        {"frame",{
            duration=2000, primary=false, auto_vflip=false,
            image=EoHS.unit_default_image_stuff(actor),
            sound="flame-big.ogg",}}
       }
    local aex,aey = EoHS.euclidean_coordinates(actor.x, actor.y)
    for i,hex in ipairs(affected_hexes) do
      local ex,ey = EoHS.euclidean_coordinates(hex.x, hex.y)
      local dx, dy = EoHS.pixels_to_hex(actor.x, actor.y, hex.x, hex.y)
      local id = "dragon_breath_"..hex.x.."_"..hex.y.."_"
      animation[id.."start_time"] =-1200
      local images1={}
      local images2={}
      for f=1,16 do table.insert((f > 8) and images2 or images1, "projectiles/fireball-impact-"..f..".png~GS()"..dragon.breath_cs) end
      local delay = math.floor(math.sqrt(((aex-ex)*(aex-ex) + (aey-ey)*(aey-ey))*70*70))
      table.insert(animation, {id.."frame",{
        duration=1000+delay,
        image=table.concat(images1, ","),
        layer=90,
        auto_vflip=false,auto_hflip=false,
        x="0~"..dx,
        y="0~"..dy,
      }})
      table.insert(animation, {id.."frame",{
        duration=1000-delay,
        image=table.concat(images2, ","),
        layer=90,
        auto_vflip=false,auto_hflip=false,
        x=dx,
        y=dy,
      }})
    end
    
    EoHS.add_temporary_anims(actor, { {"attack_anim", animation} })
    EoHS.put_unit(actor, {immediate=true})
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_unit(hex.x,hex.y)
      if unit then
        table.insert(attacks, {context={
          attacker={x=actor.x,y=actor.y},
          defender={x=unit.x,y=unit.y}
        }, extras={spend_moves_and_attacks = false, update_context_func = function(attack_context)
          local actor = EoHS.get_unit(parameters.actor_id)
          attack_context.attacker.attack = actor and get_breath_attack(actor)
        end}})
      end
    end
    EoHS.parallel_attacks(attacks)
    actor = EoHS.get_unit(parameters.actor_id)
    if actor then
      EoHS.remove_temporary_anims(actor)
      EoHS.put_unit(actor, {immediate=true})
    end
  end,
})

-->>)}
