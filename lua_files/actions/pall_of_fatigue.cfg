this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- pall_of_fatigue.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

local radius = function(parameters)
  return EoHS.apply_farseer(9, parameters)
end
local relevant_hexes = function(parameters, known_or_actual)
  local result = {}
  for i,hex in ipairs(EoHS.find_reach(parameters.src_x, parameters.src_y, EoHS.known_or_actual_passable_only(parameters.side, known_or_actual), radius(parameters))) do
    local unit = EoHS.get_seen_or_actual_unit(hex.x, hex.y, parameters.side, known_or_actual)
    table.insert(result, {
      x=hex.x, y=hex.y,
      dist=hex.cost,
    })
  end
  return result
end
local get_fatigue_attack = function(att)
  local attack = EoHS.deep_copy(att)
  attack.description = _"pall of fatigue"
  attack.damage = 40+attack.damage*attack.number
  attack.number = 1
  return attack
end



local add_attack_stuff = function(stuff, parameters, defender_x, defender_y, damage)
  local attacker = EoHS.get_unit (parameters.actor_id)
  local defender = EoHS.get_seen_unit(defender_x, defender_y, parameters.side)
  if defender and not EoHS.get_circle_of_protection (defender_x, defender_y) then
    local name = EoHS.unit_appellation(defender)
    table.insert (stuff, {"item", {
      x=defender_x, y=defender_y,
      halo="attack",
    }})
    if EoHS.unit_is_immune_to_direct_spell_damage(defender) then
      table.insert (stuff, {"label", {
        x=defender_x, y=defender_y,
        text = EoHS.unit_is_immune_to_direct_spell_damage_description(defender),
        color = EoHS.label_color (EoHS.immune_color),
      }})
    else
      table.insert (stuff, {"label", {
        x=defender_x, y=defender_y,
        text = damage,
        color = EoHS.label_color (wesnoth.sides.is_enemy (parameters.side, defender.side) and EoHS.valid_color or EoHS.bad_color),
      }})
    end
  else
    table.insert (stuff, {"item", {
      x=defender_x, y=defender_y,
      halo=EoHS.get_circle_of_protection (defender_x, defender_y) and "potential_change" or "potential_attack",
    }})
  end
end

local power_amount = function (parameters)
  local actor = EoHS.get_unit(parameters.actor_id)
  local attack = EoHS.get_subtag(parameters, "attack")
  local attack_context = EoHS.game_action_simulations.fleshed_out_attack_context({
              attacker={x=actor .x,y=actor .y,attack=attack},
              defender="generic"})
  return attack_context.attacker.damage
end
local damage_amount = function (power, dist, max_dist)
  local rel = max_dist*max_dist*3
  return math.floor((power*2*(rel-(dist*dist*2)) +(rel*7)) / (rel*14))
end

EoHS.make_spell("pall_of_fatigue", {
  image = "attacks/staff-necromantic.png",
  name = _"Pall of Fatigue",
  description = _"Every enemy unit within nine hexes of you loses some hitpoints. This can't kill units (like poison). The damage is highest near the middle and lower at the edges. You can't move on the same turn you cast Pall of Fatigue.",
  
  base_cost = { action_points=6, mana=6 },
  is_attack_spell = true,
  
  no_target_but_show_UI = true,
  
  commit = function(parameters)
    local actor = EoHS.get_unit(parameters.actor_id)
    local attack = get_fatigue_attack (EoHS.skill_attack(actor, "necromancy"))
    if attack then table.insert(parameters, {"attack", attack}) end
  end,
  
  target_independent_stuff = function(parameters, extras)
    local result = {}
    local actor = EoHS.get_unit(parameters.actor_id)
    if actor.moves < actor.max_moves then
      table.insert (result, {"text", {forbidden = true, doesnt_affect_scribing = true, text =_"You already moved to this turn, so you can't cast Pall of Fatigue."}})
    end
        
    if not (extras and extras.targeting_UI_unneeded) then
      local power = power_amount(parameters)
      local max_dist = radius(parameters)
      for i,hex in ipairs(relevant_hexes(parameters, "known")) do
        local unit = EoHS.get_seen_unit (hex.x, hex.y)
        if not (unit and not wesnoth.sides.is_enemy (unit.side, parameters.side)) then
          local damage = damage_amount (power, hex.dist, max_dist)
          add_attack_stuff (result, parameters, hex.x, hex.y, damage)
        end
      end
      for i,hex in ipairs(relevant_hexes (parameters, "actual")) do
        table.insert (result, {"visible_effect", {
          x= hex.x, y= hex.y,
        }})
      end
    end
    return result
  end,
  
  happen = function(parameters)
    local affected_hexes = relevant_hexes(parameters, "actual")
    local actor = EoHS.get_unit(parameters.actor_id)
    local attack = EoHS.get_subtag(parameters, "attack")
    actor.moves = 0
    
    local casting_image_1 = EoHS.unit_casting_image_stuff(actor, 1)
    local casting_image_2 = EoHS.unit_casting_image_stuff(actor, 2)
    local animation = {
      base_score = 10,
      offset=0,
      start_time = -600,
      { "frame", { image=casting_image_1, duration=200, }},
      { "frame", { image=casting_image_2, duration=800, sound = "wail-long.wav", }},
      { "frame", { image=casting_image_1, duration=200, }},
      fatigue_start_time = -600,
      { "fatigue_frame", { image="halo/fire-aura.png~CS(-255,-255,-255)~SCALE(1400,1400)", duration=1200, alpha="0~1,1~0" }},
    }
    EoHS.add_temporary_anims(actor, { {"attack_anim", animation} })
    EoHS.put_unit(actor, {immediate=true})
    
    EoHS.animate_units({{
      flag="attack",
      {"filter",{x=actor.x,y=actor.y}},
      hits = true,
      with_bars = true,
    }}, {force_center=parameters.target_x and {x=parameters.target_x,y=parameters.target_y}})
    
    EoHS.remove_temporary_anims(actor)
    EoHS.put_unit(actor, {immediate=true})
    
    EoHS.shuffle(affected_hexes)
    
    local power = power_amount(parameters)
    local max_dist = radius(parameters)
    for i,hex in ipairs(affected_hexes) do
      local unit = EoHS.get_unit (hex.x, hex.y)
      if unit and wesnoth.sides.is_enemy(unit.side, parameters.side) and not EoHS.unit_is_immune_to_direct_spell_damage(unit) then
        local damage = damage_amount (power, hex.dist, max_dist)
        local old_hitpoints = unit.hitpoints
        unit.hitpoints = math.max (1, unit.hitpoints - damage)
        damage = old_hitpoints - unit.hitpoints
        wesnoth.float_label(unit.x, unit.y, "<span color='#000000'>"..damage.."</span>")
        EoHS.put_unit(unit)
      end
    end
  end,
})

-->>)}
