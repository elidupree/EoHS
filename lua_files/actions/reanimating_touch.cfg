this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- reanimating_touch.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.make_touch_enchantment("reanimating_touch", {
  image = "attacks/touch-zombie.png",
  name = _"Reanimating Touch",
  description = _"You enchant your default melee attack. The next time you kill any unit on offense, you reanimate it on your side with (half plus 10) of its max hitpoints. If it wasn't undead before, it becomes an undead version of its unit type. However, reanimated leaders are no longer leaders, and reanimated wizards are no longer wizards. While you hold a Reanimating Touch, you can also use it on your own or allies' units for 1 AP. (If you reanimate an ally's unit, your ally retains control of it.)",
  
  base_cost = { action_points=6, mana=7 },
  
  sound = "zombie-attack.wav",
})

EoHS.reanimating_touch_special = { "dummy", {
  id = "EoHS_reanimating_touch",
  name = _"reanimating touch",
  description = _"The next time this attack kills a unit on offense, that unit is reanimated and its current hitpoints are restored to (half plus 10) of its max hitpoints. If it wasn't undead before, it becomes an undead version of its unit type."
}}

EoHS.hitpoints_after_reanimating = function(unit)
  return math.min(unit.max_hitpoints, math.floor(unit.max_hitpoints/2) + 10)
end

EoHS.make_action("use_reanimating_touch", {
  image = "attacks/touch-zombie.png",
  name = _"Use Reanimating Touch",
  description = _"You use up your Reanimating Touch to kill and reanimate an ally.",
  
  base_cost = { action_points=1 },
  base_range = 1,
  
  target_dependent_stuff = EoHS.simple_unit_target("change",function(unit,parameters,stuff)
    if wesnoth.is_enemy(unit.side, parameters.side) then
      return _"You can't reanimate an enemy unit except by attacking it."
    elseif EoHS.unit_id(unit) == parameters.actor_id then
      return _"You can't reanimate yourself."
    elseif unit.canrecruit or EoHS.get_unit_variable(unit, "is_wizard") then
      return _"Wizards and leaders refuse to lose their powers by being reanimated."
    else
      table.insert(stuff, {"label",{
        x=parameters.target_x, y=parameters.target_y,
        text = EoHS.substitute (_"This unit will have $1| HP after reanimating.", {EoHS.hitpoints_after_reanimating(unit)})
      }})
    end
  end),
  
  use_message = function(parameters)
    return _"$actor.name| ($actor.x|,$actor.y|) uses their Reanimating Touch on $target.name| ($target.x|,$target.y|)"
  end,
  
  happen = function(parameters)
    -- TODO animate more
    local actor = EoHS.get_unit(parameters.actor_id)
    EoHS.set_unit_variable(actor, "touch_enchantment")
    EoHS.update_all_type_adjustments(actor) -- TODO should dummy abilities really be type adjustments? Seems like overkill when nothing else changes
    EoHS.put_unit(actor)
    EoHS.make_unit_reanimated(EoHS.get_unit(parameters.target_x,parameters.target_y), EoHS.get_unit(parameters.actor_id), true)
  end,
})

EoHS.make_unit_reanimated = function(unit, reanimator, do_on_map)
  if do_on_map then
    -- Momentary use of underlying_id to check if the unit has been replaced,
    -- much the way wesnoth's internals use it: probably safe.
    local id = unit.underlying_id
    EoHS.fire_event("last breath", unit.x, unit.y, reanimator.x, reanimator.y) -- TODO minor: attacks?
    unit = EoHS.get_unit(unit.x, unit.y)
    if not (unit and unit.underlying_id == id) then return false end
    EoHS.animate_unit({{"filter",{x=unit.x,y=unit.y}}, flag="death", with_bars = false,})
    EoHS.fire_event("die", unit.x, unit.y, reanimator.x, reanimator.y)
    unit = EoHS.get_unit(unit.x, unit.y)
    if not (unit and unit.underlying_id == id) then return false end
  end
  if unit.canrecruit then
    --[[local side_recruits = wesnoth.sides[unit.side].recruit
    for i,recruit in ipairs(side_recruits) do
      unit.extra_recruit = (unit.extra_recruit and unit.extra_recruit.."," or "")..recruit
    end]]
    unit.canrecruit = false
  end
  
  -- strip the unit of a lot of special attributes
  EoHS.set_unit_variable(unit, "is_wizard")
  EoHS.set_unit_variable(unit, "is_apprentice")
  EoHS.set_unit_variable(unit, "apprentice_trainer")
  EoHS.set_unit_variable(unit, "wizard_protection")
  EoHS.set_unit_variable(unit, "wizard_level")
  EoHS.set_unit_variable(unit, "ritual")
  EoHS.set_unit_variable(unit, "is_casting_a_spell")
  EoHS.set_unit_variable(unit, "summoner_id")
  EoHS.remove_subtags(unit, "modifications.trait", "EoHS_wizard")
  
  EoHS.set_unit_variable(unit, "is_reanimated", true)
  EoHS.update_all_type_adjustments(unit)
  if wesnoth.is_enemy(unit.side, reanimator.side) then unit.side = reanimator.side end
  EoHS.set_unit_action_points_immediate(unit, 0)
  unit.moves = 0
  unit.hitpoints = EoHS.hitpoints_after_reanimating(unit)
  if EoHS.get_unit_variable(unit, "is_mounted") then
    local mount = EoHS.get_mount(unit)
    EoHS.make_unit_reanimated(mount, reanimator, false)
  end
    
  -- compatibility: make the reanimated unit technically be a different unit
  local new_id = EoHS.make_new_unit_id()
  EoHS.set_unit_variable (unit, "id", new_id)
  unit.id = "EoHS_reanimated_unit_"..new_id
  
  if do_on_map then
    EoHS.put_unit(unit, {allow_unknown_id = true, allow_overwrite = true})
    -- TODO wesnoth.fire("sound", {name="lich-hit-1.ogg"})
    wesnoth.float_label(unit.x, unit.y, "<span color='#000000'>"..(_"Reanimated!").."</span>")
    wesnoth.fire("redraw", { side=unit.side })
  end
  return true
end

-->>)}
