this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- settings.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.pvp_settings = {
  eliminate_upkeep = true,
  limit_berserk = true,
  can_spend_gold_on_spells = true,
  can_recruit = true,
  non_redmage_leaders = (EoHS.replace_alliances_with_era) and "wizards" or "protected",
  redmage_leaders = "wizards",
  wizard_starting_level = 2,
  skill_points_per_level = 5,
  skill_points_at_level_0 = 1,
  summon_duration = "infinite",
  summon_cost_multiplier = 100,
  mana_income_per_level = 2,
  mana_income_at_level_0 = 1,
  mana_capacity_per_level = "infinite",
}
EoHS.survival_settings = EoHS.deep_copy(EoHS.pvp_settings)
EoHS.survival_settings.eliminate_upkeep = false
EoHS.campaign_settings = EoHS.deep_copy(EoHS.survival_settings)
EoHS.campaign_settings.can_spend_gold_on_spells = false
EoHS.campaign_settings.non_redmage_leaders = "wizards"
EoHS.campaign_settings.wizard_starting_level = 1
EoHS.campaign_settings.skill_points_per_level = 3
EoHS.rpg_settings = EoHS.deep_copy(EoHS.pvp_settings)
EoHS.rpg_settings.can_spend_gold_on_spells = false
EoHS.rpg_settings.can_recruit = false
EoHS.rpg_settings.wizard_starting_level = 1
EoHS.rpg_settings.summon_duration = 3
EoHS.rpg_settings.summon_cost_multiplier = 50
EoHS.rpg_settings.mana_income_per_level = 2
EoHS.rpg_settings.mana_income_at_level_0 = 4
EoHS.rpg_settings.mana_capacity_per_level = 15
EoHS.not_even_eohs_settings = {
  eliminate_upkeep = false,
  limit_berserk = false,
  can_spend_gold_on_spells = false,
  can_recruit = true,
  non_redmage_leaders = "unprotected",
  redmage_leaders = "normal",
  wizard_starting_level = 2,
  skill_points_per_level = 0,
  skill_points_at_level_0 = 0,
  summon_duration = "infinite",
  summon_cost_multiplier = 100,
  mana_income_per_level = 0,
  mana_income_at_level_0 = 0,
  mana_capacity_per_level = "infinite",
}

EoHS.map_specific_default_settings = function()
  if not EoHS.get_variable ("actual_magic_loaded") then
    return EoHS.not_even_eohs_settings, false
  end
  
  -- hack - Creep War
  if wml.variables["cw_creeps"] then
    return EoHS.rpg_settings, false
  end  
  
  local leaders = EoHS.get_units({ canrecruit=true })
  local recruiting_leader = false
  local walled_leader = false
  local sides_with_leaders = {}
  for i,unit in ipairs(leaders) do
    sides_with_leaders[unit.side] = true
    if wesnoth.get_terrain_info(wesnoth.get_terrain(unit.x, unit.y)).keep then
      for x,y in helper.adjacent_tiles(unit.x, unit.y) do
        local info = wesnoth.get_terrain_info(wesnoth.get_terrain(x, y))
        if info.castle and (not info.keep) and (not wesnoth.units.get(x, y)) then
          -- Leader in a keep next to an empty non-keep castle? Almost certainly intended to recruit
          recruiting_leader = true
          break
        end
      end
    end
  end
  for i,unit in ipairs(leaders) do
    local walls = true
    for x,y in helper.adjacent_tiles(unit.x, unit.y) do
      if EoHS.location_is_passable(x, y) or wesnoth.get_terrain_info(wesnoth.get_terrain(x, y)).castle then walls = false end
    end
    if walls then walled_leader = true end
  end
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  local all_leaders_are_allied = true
  local rogue_opposes_leader = false
  local connected_enemy_leaders = false
  for i,unit in ipairs(units) do
    local has_leader_enemy = false
    for side in pairs(sides_with_leaders) do
      if wesnoth.sides.is_enemy(side, unit.side) then
        has_leader_enemy = true
      end
    end
    if has_leader_enemy and not sides_with_leaders[unit.side] then
      -- Enemy of a leader and not a minion of another? Probably an RPG adversary
      rogue_opposes_leader = true
    end
    if has_leader_enemy and sides_with_leaders[unit.side] then
      all_leaders_are_allied = false
    end
  end
  for i,unit in ipairs(leaders) do
    local wleader = wesnoth.units.get(unit.x, unit.y)
    for i,unit2 in ipairs(leaders) do
      if wesnoth.sides.is_enemy(unit.side, unit2.side) and EoHS.find_path(unit.x, unit.y, unit2.x, unit2.y, function(x,y) return EoHS.wunit_can_move_on_hex(wleader, x, y) and 1 or nil end)[1] then
        connected_enemy_leaders = true
      end
    end
  end
  
  if recruiting_leader and EoHS.in_campaign then
    return EoHS.campaign_settings, false
  end
  
  if (all_leaders_are_allied or walled_leader or rogue_opposes_leader) and not connected_enemy_leaders then
    if recruiting_leader then
      return EoHS.survival_settings, false
    else
      return EoHS.rpg_settings, false
    end
  else
    return EoHS.pvp_settings, false
  end
end

EoHS.create_settings_picking_event = function()
  wml.fire("event", { name = "side_turn",
    { "lua", { code = 'EoHS.settings_picking_event()' }}
  })
end

EoHS.settings_dialog_grid = function(dialog_context, settings, mutable)
  local g = function(contents) return { "grid", contents } end
  local r = function(contents) return { "row", contents } end
  local c = function(contents) return { "column", contents } end
  local gr = function(contents) return g{r(contents)} end
  local cg = function(contents) return c{g(contents)} end
  local rc = function(contents) return r{c(contents)} end
  local rcg = function(contents) return r{c{g(contents)}} end
  local rcgr = function(contents) return rc{horizontal_alignment = "left", gr(contents)} end
  local l = function(label) return {"label",{label=label}} end
  
  local presets = {
    {
      image = "attacks/fireball.png",
      name = _"PvP settings",
      settings = EoHS.pvp_settings,
    },
    {
      image = "attacks/fire-breath-drake.png",
      name = _"Survival settings",
      settings = EoHS.survival_settings,
    },
    {
      image = "attacks/sword-flaming.png",
      name = _"Campaign settings",
      settings = EoHS.campaign_settings,
    },
    {
      image = "attacks/longsword.png",
      name = _"RPG settings",
      settings = EoHS.rpg_settings,
    },
    {
      image = "attacks/club.png",
      name = _"Not even EoHS",
      settings = EoHS.not_even_eohs_settings,
    },
    {
      image = "attacks/fist-human.png",
      name = _"Custom settings",
      settings = "custom",
    },
  }
  
  local custom = false
  local ts = {}
  local xs = {}
  local update = function(preset)
    local ok = true
    for k,v in pairs(settings) do
      local t_id = ts[k]
      local x_id = xs[k]
      if x_id and (not preset) and not (t_id and v == "infinite") then
        local choice = wesnoth.get_dialog_value(x_id)
        local num = tonumber(choice)
        if num then
          num = math.floor(num)
          if ""..num == choice then
            settings[k] = num
            v = num
          else
            ok = false
          end
        else
          ok = false
        end
      end
      if t_id and x_id then
        if v == "infinite" then
          wesnoth.set_dialog_active(mutable and custom, t_id)
          wesnoth.set_dialog_value(false, t_id)
          wesnoth.set_dialog_active(false, x_id)
          wesnoth.set_dialog_value("", x_id)
        else
          wesnoth.set_dialog_active(mutable and custom, t_id)
          wesnoth.set_dialog_value(true, t_id)
          wesnoth.set_dialog_active(mutable and custom, x_id)
          wesnoth.set_dialog_value(v, x_id)
        end
      elseif t_id then
        if type(t_id) == "table" then
          for i,tp in ipairs(t_id) do
            wesnoth.set_dialog_active(mutable and custom, tp.id)
            wesnoth.set_dialog_value(v == tp.val, tp.id)
          end
        else
          wesnoth.set_dialog_active(mutable and custom, t_id)
          wesnoth.set_dialog_value(v, t_id)
        end
      elseif x_id then
        wesnoth.set_dialog_active(mutable and custom, x_id)
        wesnoth.set_dialog_value(v, x_id)
      end
    end
    return ok
  end
  local t = function(setting_id,val)
    local t_id = "settings_dialog_grid_toggle_"..setting_id.."="..(val or "true")
    if val then
      ts[setting_id] = ts[setting_id] or {}
      table.insert(ts[setting_id], {id=t_id,val=val})
    else
      ts[setting_id] = t_id
    end
    dialog_context.preshow(function()
      wesnoth.set_dialog_callback(function()
        if val then
          settings[setting_id] = val
        elseif xs[setting_id] then
          settings[setting_id] = wesnoth.get_dialog_value(t_id) and 0 or "infinite"
        else
          settings[setting_id] = wesnoth.get_dialog_value(t_id)
        end
        update()
      end, t_id)
    end)
    return {"toggle_button",{id=t_id,label=""}}
  end
  local x = function(setting_id)
    local x_id = "settings_dialog_grid_text_"..setting_id
    xs[setting_id] = x_id
    return { "text_box", { id = x_id } }
  end
  local cl = function(label) return c{l(label)} end
  local ct = function(setting_id,val) return c{t(setting_id,val)} end
  local cx = function(setting_id) return c{x(setting_id)} end
  
  local custom_idx
  local chosen_idx
  --local preset_rows = {}
  local p = function(image, name)
    return rc{horizontal_grow = true, {"toggle_panel",{id="the_panel",gr{
      c{horizontal_alignment = "left", {"image",{id="the_image",label=image}}},
      c{horizontal_alignment = "left", border="left,right", border_size=8, {"label",{id="the_label",label=name }}},
    }}}}
  end
  for i,preset in ipairs(presets) do
    --table.insert(preset_rows, p(preset.image, preset.name))
    if preset.settings == "custom" then
      custom_idx = i
    elseif EoHS.tags_are_identical(settings, preset.settings) then
      chosen_idx = i
    end
  end
  if not chosen_idx then
    chosen_idx = custom_idx
  end
  
  local choose_preset = function(index)
    wesnoth.set_dialog_value(mutable and index or 1, "settings_listbox")
    local preset = presets[index].settings
    custom = (preset == "custom")
    if preset ~= "custom" then
      EoHS.deep_overwrite(settings, preset)
    end
    update(true)
  end
  
  dialog_context.preshow(function()
    if mutable then
      for i,preset in ipairs(presets) do
        wesnoth.set_dialog_value(preset.name, "settings_listbox", i, "the_label")
        wesnoth.set_dialog_value(preset.image, "settings_listbox", i, "the_image")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_panel")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_label")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_image")
      end
    else
      wesnoth.set_dialog_value(presets[chosen_idx].name, "settings_listbox", 1, "the_label")
      wesnoth.set_dialog_value(presets[chosen_idx].image, "settings_listbox", 1, "the_image")
    end
    --wesnoth.set_dialog_active(mutable, "settings_listbox")
    wesnoth.set_dialog_callback(function()
      if mutable then
        choose_preset(wesnoth.get_dialog_value("settings_listbox"))
      --[[else
        wesnoth.set_dialog_value(chosen_idx, "settings_listbox")
        wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_panel")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_label")
        --wesnoth.set_dialog_active(mutable, "settings_listbox", i, "the_image")]]
      end
    end, "settings_listbox")
    choose_preset(chosen_idx)
  end)
  
  local result = g{
    rc{ gr{
      c{ {"horizontal_listbox",{
        id = "settings_listbox",
        {"list_definition",{
          p()
        }},
        --{"list_data",preset_rows},
      }} },
      mutable and c{ border="left", border_size=30, {"button",{id="ok",label=_" \nDone\n "}} } or nil,
    }},
    rc{ border="top,bottom", border_size=15, g{
      rcgr{ cl(_"Non-Red Mage leaders become... "),ct("non_redmage_leaders","unprotected"),cl(_"Unprotected non-wizards "),ct("non_redmage_leaders","protected"),cl("Protected non-wizards "),ct("non_redmage_leaders","wizards"),cl(_"Wizards "),ct("non_redmage_leaders","redmages"),cl(_"Red Mage leaders (as below)") },
      rcgr{ cl(_"Red Mage leaders are... "),ct("redmage_leaders","normal"),cl(_"Like other leaders "),ct("redmage_leaders","wizards"),cl(_"Wizards") },
      rcgr{ cl(_"Wizards start at level "),cx("wizard_starting_level") },
      
      rcgr{ ct("can_spend_gold_on_spells"),cl(_"Wizards can spend gold on spells") },
      rcgr{ ct("can_recruit"),cl(_"Wizards can recruit") },
      rcgr{ ct("eliminate_upkeep"),cl(_"Eliminate upkeep") },
      rcgr{ ct("limit_berserk"),cl(_"Limit berserk abilities to 3 rounds") },
      rcgr{ cl(_"Wizards have"),cx("skill_points_at_level_0"),cl(_" skill points, plus "),cx("skill_points_per_level"),cl(_" per level") },
      rcgr{ cl(_"Each turn, wizards earn "),cx("mana_income_at_level_0"),cl(_" mana, plus "),cx("mana_income_per_level"),cl(_" per level") },
      rcgr{ ct("mana_capacity_per_level"),cl(_"Wizards have a maximum of "),cx("mana_capacity_per_level"),cl(_" mana per level") },
      rcgr{ ct("summon_duration"),cl(_"Summoned creatures disappear "),cx("summon_duration"),cl(_" turns after they are summoned") },
      rcgr{ cl(_"Summoning spells cost "),cx("summon_cost_multiplier"),cl(_" percent of their normal cost") },
    }},
  }
  local ok_tab = {}
  dialog_context.postshow(function()
    ok_tab.ok = update()
  end)
  --EoHS.err(EoHS.inspect(result))
  return result, ok_tab
end

--[[
  local customize_skillset_func = function(side)
  
  local customize_buttons_rows = {}
  local customize_skillset_button_name
  if mutable then
    local customize_skillset_button = dialog_context.button({label=_"Customize starting skills"}, customize_skillset_func("default"))
    local decustomize_skillset_button = {"spacer",{}}
    if EoHS.get_subtag(settings, "side_default.starting_skillset") then decustomize_skillset_button = dialog_context.button({label=_"Customize starting skills"}, customize_skillset_func("default")) end
    table.insert(customize_buttons_rows, r{c{customize_skillset_button}, r{c{decustomize_skillset_button}}}
  else
    if EoHS.get_subtag(settings, "side_default.starting_skillset") then
      table.insert(customize_buttons_rows, r{c{dialog_context.button({label=_"View starting skills"}, customize_skillset_func("default"))}})
    end
  end
  local ]]

EoHS.current_player_picks_settings = function()
  local map_default_settings, separate_map_default = EoHS.map_specific_default_settings()
  
  local choice = EoHS.synchronize_choice(function()
    local current_settings = EoHS.deep_copy(map_default_settings)
    local function show_dialog()
      local d = EoHS.make_dialog_context(function() end, show_dialog)
      local grid, ok_tab = EoHS.settings_dialog_grid(d, current_settings, true)
      d.show(grid)
      if not ok_tab.ok then show_dialog() end
    end
    show_dialog()
    return current_settings
  end)
  
  EoHS.set_variable("settings", choice)
end
--[[
EoHS.settings_picking_event = function()
  local choice = EoHS.synchronize_choice(EoHS.current_player_picks_settings, function() return { ai_chose=true } end)
  
  if choice.ai_chose then
    EoHS.create_settings_picking_event()
  else
    choice.inited = true
    EoHS.set_variable("settings", choice)
    EoHS.init_campaign_with_settings()
  end
end]]

EoHS.get_setting = function(name)
  return EoHS.get_variable("settings."..name)
end
EoHS.get_wizard_settings = function(unit)
  return EoHS.get_fake_subtag(EoHS.force_unit_variables(unit), "wizard_settings")
end
EoHS.get_wizard_setting = function(unit, name)
  local result = EoHS.get_wizard_settings(unit)[name]
  if result ~= nil then return result end
  return EoHS.get_setting(name)
end
--[[EoHS.init_wizard_settings = function(wizard_settings)
  local defaults = EoHS.get_variable("settings.wizard_default")
  for k,v in pairs(defaults) do
    if wizard_settings[k] == nil then wizard_settings[k] = v end
  end
end]]
--[[
EoHS.get_settings_for_side = function(side)
  local settings = EoHS.get_variable("settings")
  if not settings then EoHS.err("EoHS.get_settings_for_side called, no settings found") end
  if not settings.inited then EoHS.err("EoHS.get_settings_for_side called, settings not inited") end
  local side_specific = EoHS.get_subtag(settings, "side_"..side)
  if side_specific then return side_specific else return EoHS.get_subtag(settings, "side_default") end
end]]

-->>)}
