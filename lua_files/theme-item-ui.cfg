this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- theme-item-ui.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

EoHS.update_attack_action_cost_indicator = function (unit, target)
  if EoHS.current_attack_action_cost_indicator then EoHS.remove_item (EoHS.current_attack_action_cost_indicator) end
  
  if unit and target and wesnoth.is_enemy (target.side, unit.side) then
    local depleted = EoHS.attack_AP_cost (unit)
    EoHS.current_attack_action_cost_indicator = {
      x = unit.x,y = unit.y,
      halo = EoHS.action_points_overlay (unit, depleted)
    }
    EoHS.place_item (EoHS.current_attack_action_cost_indicator)
  end
end

EoHS.set_action_selection_tutorial_prompt = function(unit)
  if wesnoth.current.turn == 1 and unit.side == wesnoth.current.side and wesnoth.sides [unit.side].is_local and wesnoth.sides [unit.side].controller == "human" and not EoHS.action_selection_tutorial_prompt then
    EoHS.action_selection_tutorial_prompt = {
      x= unit.x,y = unit.y,
      team_name = wesnoth.sides [unit.side].team_name,
      text =_"Try clicking me twice!",
      color = EoHS.label_color (EoHS.white_color)
    }
    wesnoth.fire ("label", EoHS.action_selection_tutorial_prompt)
  end
end
EoHS.remove_action_selection_tutorial_prompt = function()
  if type(EoHS.action_selection_tutorial_prompt) == "table" then
    EoHS.action_selection_tutorial_prompt.text = ""
    EoHS.action_selection_tutorial_prompt.immutable = false
    wesnoth.fire ("label", EoHS.action_selection_tutorial_prompt)
    EoHS.action_selection_tutorial_prompt = "completed"
  end
end

local ui_context = {
  on_click = function(x,y)
    local unit = EoHS.get_unit (x,y)
    if EoHS.action_selection_possible (unit) then
      wesnoth.select_unit()
      EoHS.action_selection_triggered_at = wesnoth.get_time_stamp()
    end
  end,
  on_mouse_move = function (x,y)
    local selected_x, selected_y = wesnoth.get_selected_tile()
    local unit = selected_x and wesnoth.get_unit (selected_x, selected_y)
    local target = unit and EoHS.action_selection_possible (unit) and EoHS.get_seen_unit (x,y, unit.side)
    EoHS.update_attack_action_cost_indicator (unit, target)
  end,
  on_deselect = function (x,y)
    EoHS.update_attack_action_cost_indicator ()
  end,
}
EoHS.top_level_ui_context = ui_context

--[[
  when running EoHS.accept_ui_input(),
  UI interactions are within a recursive call (e.g. on_mouse_action calls EoHS.accept_ui_input calls [delay] calls on_mouse_action again).
  Wesnoth often has memory errors when messing around in recursive UI callbacks.
  To avoid this, we do as little logic in them as possible,
  by having their logic be deferred into a queue that gets run by
  the caller's stack frame instead of its own.
  ]]
EoHS.queue_ui = function (time_sensitive, func)
  -- however, at the top level, there's no caller, so we have to run things immediately.
  -- Previous versions of EoHS used wesnoth.theme_items.report_countdown
  -- as a top-level queue, but still often encountered memory errors.
  if ui_context == EoHS.top_level_ui_context then
    func()
    return
  end
  ui_context.queue = ui_context.queue or {}
  table.insert (ui_context.queue, {
    time = wesnoth.get_time_stamp(),
    time_sensitive = time_sensitive,
    func=func
  })
end

EoHS.accept_ui_input = function (context)
  local old_context = ui_context
  ui_context = context
  context.last_began_accepting_input_at = wesnoth.get_time_stamp()
  
  EoHS.capture_errors (function()
    wesnoth.fire ("redraw")
    while not context.exiting do
      wesnoth.fire ("delay", {time = 10})
      --wesnoth.fire ("redraw")
      EoHS.check_for_deselect()
      
      -- swap them in case more is added to the queue during the execution
      local executing = context.queue or {}
      context.queue = {}
      
      for index, thing in ipairs (executing) do
        if not (thing.time_sensitive and wesnoth.get_time_stamp() > thing.time + 500) then
          thing.func()
        end
        if context.exiting then break end
      end
      if context.exiting then break end
      
      if context.frequently then
        --if not (context.last_frequent_call and wesnoth.get_time_stamp() < context.last_frequent_call + 100) then
        --  context.last_frequent_call = wesnoth.get_time_stamp()
          context.frequently()
        --end
      end
    end  
  end)
  
  old_context.last_began_accepting_input_at = wesnoth.get_time_stamp()
  ui_context = old_context
end

EoHS.exit_ui_input = function()
  ui_context.exiting = true
end

EoHS.suppress_ui_input_during = function (inner_func)
  local old_context = ui_context
  ui_context = {suppressed=true}
  
  EoHS.capture_errors (inner_func)
  
  old_context.last_began_accepting_input_at = wesnoth.get_time_stamp()
  ui_context = old_context
end

EoHS.theme_ui_safe = function() return (not (ui_context.in_callbacks or ui_context.exiting or ui_context.suppressed)) and EoHS.comfortably_during_turn and (not EoHS.during_move) and (not EoHS.in_theme_item) and (not EoHS.to_sync_soon) and (not wesnoth.view_locked()) and (not (ui_context.last_began_accepting_input_at and ui_context.last_began_accepting_input_at+200 > wesnoth.get_time_stamp())) end


local old_on_event = wesnoth.game_events.on_event
wesnoth.game_events.on_event = EoHS.filter_func(function()
  local name = wesnoth.current.event_context.name
  EoHS.most_recent_event_name = name
  -- suppress "clicks" that straddle a event boundary
  if name ~= "select" then EoHS.recent_redraws = {} end
  EoHS.fast_update_all_siphon_strength_graphics()
  -- This part is purely responsible for UI stuff. Avoid doing it during generated events, like swarm movement.
  if not EoHS.event_stack then
    if name == "exit_hex" or name == "attack" or name == "advance" or name == "prerecruit" or name == "prerecall" then
      EoHS.during_move = true
    end
    if name == "moveto" or name == "attack_end" or name == "post_advance" or name == "recruit" or name == "recall" then
      EoHS.during_move = false
    end
    EoHS.view_should_not_be_locked()
  end
  if old_on_event then old_on_event() end
end)


local old_selected_x, old_selected_y
local most_recent_deselect = wesnoth.get_time_stamp()
local most_recent_click = wesnoth.get_time_stamp()
EoHS.check_for_deselect = function()
  local current_selected_x, current_selected_y = wesnoth.get_selected_tile()
  if old_selected_x and not current_selected_x then
    if ui_context.on_deselect then EoHS.queue_ui(true, function() ui_context.on_deselect (old_selected_x, old_selected_y) end) end
    most_recent_deselect = wesnoth.get_time_stamp()
  end
  old_selected_x = current_selected_x
  old_selected_y = current_selected_y
end

  local old_mouse_move = wesnoth.game_events.on_mouse_move or (function() end)
  wesnoth.game_events.on_mouse_move = EoHS.filter_func(function(x,y)
    EoHS.mouse_x, EoHS.mouse_y = x,y
    if ui_context.on_mouse_move then
      EoHS.queue_ui(true, function() ui_context.on_mouse_move(x,y) end)
    end
    EoHS.check_for_deselect()
    old_mouse_move(x,y)
  end)
  
  local old_mouse_action = wesnoth.game_events.on_mouse_action or (function() end)
  wesnoth.game_events.on_mouse_action = EoHS.filter_func(function(x,y)
    local click_recorded_at = wesnoth.get_time_stamp()
    EoHS.queue_ui(true, function()
      local click_confirmed_at = wesnoth.get_time_stamp()
      if most_recent_deselect < click_recorded_at and click_confirmed_at < click_recorded_at + 100 then
        if ui_context.on_double_click and click_recorded_at < most_recent_click - 500 then
          ui_context.on_double_click(x,y)
        elseif ui_context.on_click then
          ui_context.on_click (x,y)
        end
      end
      most_recent_click = click_confirmed_at
    end)
    --EoHS.debug ("click"..x..","..y..","..EoHS.inspect({wesnoth.get_selected_tile()}))
    old_mouse_action(x,y)
  end, function() if ui_context == EoHS.top_level_ui_context and wesnoth.current.user_can_invoke_commands then
        EoHS.may_do_synced_now()
      end end)



EoHS.theme_item = function (name, impl)
  local default = wesnoth.theme_items [name]
  wesnoth.theme_items [name] = EoHS.filter_func(function()
    if EoHS.in_theme_item then
      EoHS.err ("Recursive theme item detected!")
      return default()
    end
    if EoHS.redraw_unexpected then
      EoHS.err ("Unexpected redraw detected.")
    end

    EoHS.in_theme_item = true
    
    local result = EoHS.capture_errors (impl, default) or {}
    
    EoHS.in_theme_item = nil
    return result
  end)
end

EoHS.theme_item ("gold", function(old_gold)
  local result = old_gold()
  if result and result[1] and result[1][2] and result[1][2].text then
    local current_selected_x, current_selected_y = wesnoth.get_selected_tile()
    if current_selected_x then
      local unit = wesnoth.get_unit (current_selected_x, current_selected_y)
      if unit and unit.side == wesnoth.current.side and wesnoth.sides [unit.side].is_local and wesnoth.sides [unit.side].controller == "human" then
        local mana_income = EoHS.unit_mana_income(unit)
        if mana_income then
          local displayed_gold_depletion, displayed_mana_depletion
          if EoHS.current_targeting_info then
            local observe_stuff = function (stuffs)
              for i,stuff in ipairs (stuffs) do if not (stuff and stuff [2]) then EoHS.debug (stuff) end
                if stuff [2].displayed_gold_depletion then displayed_gold_depletion = stuff [2].displayed_gold_depletion end
                if stuff [2].displayed_mana_depletion then displayed_mana_depletion = stuff [2].displayed_mana_depletion end
              end
            end
            
            local choice = EoHS.current_targeting_info.legal_targets_map [EoHS.mouse_x..","..EoHS.mouse_y]
            
            observe_stuff (EoHS.current_targeting_info.stuff.independent)
            -- note: can't use EoHS.current_targeting_info.stuff.dependent
            -- because it hasn't been updated yet when this theme item runs
            if choice and choice.stuff then
              observe_stuff (choice.stuff)
            end
          end
        
          -- local text = tostring (result[1][2].text)
          local gold = wesnoth.sides [unit.side].gold
          local gold_color = EoHS.white_color
          if displayed_gold_depletion then
            gold = gold - displayed_gold_depletion
            gold_color = EoHS.gold_depleted_color
          end
          if gold < 0 then gold_color = EoHS.invalid_color end
          gold = EoHS.colored_text (gold_color, gold)
          
          local mana = (EoHS.get_unit_variable (unit, "mana") or 0)
          local mana_color = EoHS.mana_color
          if displayed_mana_depletion then
            mana = mana - displayed_mana_depletion
            mana_color = EoHS.mana_depleted_color
          end
          if mana < 0 then mana_color = EoHS.invalid_color end
          mana = EoHS.colored_text(mana_color, mana)
          --EoHS.debug (gold..mana)
          
          result[1][2].text = gold.. EoHS.colored_text (EoHS.nonfunctional_color, "+")..mana
        end
      end
    end
  end
  return result
end)

EoHS.theme_item ("income", function(old_income)
  local result = old_income()
  if result and result[1] and result[1][2] and result[1][2].text then
    local current_selected_x, current_selected_y = wesnoth.get_selected_tile()
    if current_selected_x then
      local unit = wesnoth.get_unit (current_selected_x, current_selected_y)
      if unit and unit.side == wesnoth.current.side and wesnoth.sides [unit.side].is_local and wesnoth.sides [unit.side].controller == "human" then
        local mana_income = EoHS.unit_mana_income(unit)
        if mana_income then
          local text = tostring (result[1][2].text)
          result[1][2].text = text..EoHS.colored_text (EoHS.nonfunctional_color, "+")..EoHS.colored_text(EoHS.mana_color, mana_income)
        end
      end
    end
  end
  return result
end)

EoHS.theme_item ("upkeep", function(old_upkeep)
  -- always invoke it even if we don't use the result, in case another add-on is using it to invoke unrelated scripts
  local old_result = old_upkeep()
  if EoHS.get_variable("settings_inited") and EoHS.get_variable("settings.eliminate_upkeep") then
    return { { "element", { text = _"EoHS" }} }
  else
    return old_result
  end
end)

EoHS.theme_item ("unit_type", function(old_unit_type)
  -- always invoke it even if we don't use the result, in case another add-on is using it to invoke unrelated scripts
  local old_result = old_unit_type()
  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  local override = EoHS.get_unit_variable(wunit, "type_name_override")
  if override then
    return { { "element", {
      text = override,
      tooltip = EoHS.substitute(_"Type: <b>$1|</b>\n$2|", {override, EoHS.get_unit_variable(wunit, "type_description_override") or ""})
    }} }
  end
  return old_result
end)

EoHS.theme_item ("unit_race", function(old_unit_race)
  -- always invoke it even if we don't use the result, in case another add-on is using it to invoke unrelated scripts
  local old_result = old_unit_race()
  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  local custom = EoHS.get_unit_variable(wunit, "race")
  if custom then
    local override = EoHS.custom_races[custom].name
    return { { "element", {
      text = override,
      tooltip = EoHS.substitute(_"Race: <b>$1|</b>", {override})
    }} }
  end
  return old_result
end)



--[[wesnoth.theme_items.unit_moves = function()
  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  return { {"element",{ text=EoHS.substitute(_"$1|/$2|, $3| AP", {wunit.moves, wunit.max_moves, EoHS.get_unit_action_points(wunit)})}} }
end]]
-- TODO rename filter_func so this is correct usage
-- TODO: improve descriptions of Soul Bind weapons, lightning attacks
EoHS.theme_item ("unit_weapons", function(old_unit_weapons)
  -- always invoke it even if we don't use the result, in case another add-on is using it to invoke unrelated scripts
  local old_result = old_unit_weapons()

  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  if not EoHS.get_variable("settings_inited") then return old_result end
  local result = {}
  local action_points = EoHS.get_unit_action_points(wunit)
  local action_point_color = (action_points >= EoHS.attack_AP_cost (wunit)) and EoHS.action_point_color or EoHS.darkened_color (EoHS.action_point_color)
  table.insert(result, {"element",{ text= EoHS.colored_text (action_point_color, EoHS.substitute(_"AP: $1|", {action_points}))..'\n' }})
  EoHS.do_if_local_client_has_total_knowledge_of_side(wunit.side, function()
    local unit = EoHS.get_unit(wunit.x, wunit.y)
    if unit then
      local mana_income = EoHS.unit_mana_income(unit)
      if mana_income then
        local mana = EoHS.get_unit_variable(unit, "mana") or 0
        local mana_cap = EoHS.unit_mana_cap(unit)
        local mana_entry = EoHS.substitute(mana_cap and _'<span color="$4|">mana: $1|/$2|</span><span color="$5|">, +$3|/turn</span>\n' or _'<span color="$4|">mana: $1|</span><span color="$5|">, +$3|/turn</span>\n', {mana, mana_cap, mana_income, EoHS.element_color (EoHS.mana_color), EoHS.element_color (EoHS.darkened_color (EoHS.mana_color))})
        table.insert(result, {"element",{ text=mana_entry }})
        if EoHS.get_wizard_setting(unit, "can_spend_gold_on_spells") then
          local side_info = wesnoth.sides[unit.side]
          --[[local income = side_info.total_income
          -- side_info.total_income does not take into account upkeep
          local income_source = wesnoth.theme_items.income()
          -- defend very hard against other add-ons customizing the theme item
          if income_source and income_source[1] and income_source[1][2] and income_source[1][2].text then
            income_source = income_source[1][2].text
            if type (income_source) == "string" then
              income_source = - tonumber(string.match (income_source, ">.*(%d+)"))
            end
            if type (income_source) == "number" then
              income = income_source
            end
          end]]
          --table.insert(result, {"element",{ text=EoHS.substitute(_'m+gold: $1|<span color="#a0a0a0">, +$2|/turn</span>\n', {mana+side_info.gold, mana_income+income}) }})
          table.insert(result, {"element",{ text=EoHS.substitute(_'mana+gold: $1|\n', {mana+side_info.gold}) }})
        end
      end
    end
  end)
  
  if EoHS.get_unit_variable (wunit, "wizard_level") then
    table.insert(result, {"element",{
      text=EoHS.substitute(_'<span color="#00a0e1">Shared XP: $1|/$2| this turn</span>\n\n', {
        EoHS.get_unit_variable (wunit, "shared_experience_this_turn") or 0,
        EoHS.wizard_shared_experience_limit (wunit)}),
      tooltip=_"Wizards gain all the experience gained by ANY other unit on their side, up to a certain limit per turn."
    }})
  end
  
  for i,e in ipairs(old_result) do
    table.insert(result, e)
  end
  
  return result
end)

-->>)}
