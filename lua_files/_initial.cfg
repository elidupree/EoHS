this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- _initial.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,xpcall = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,xpcall
local wesnoth,table,string,math,os,debug,wml,gui,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,gui,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

-- Some functions are frequently used even at preload time. We define them here so they can be used in any file.
-- We also provide EoHS.soon, which delays things just a little so that the function inside can use functions
-- defined in any other file.
EoHS.end_of_preload_funcs = {}
EoHS.soon = function(func)
  table.insert(EoHS.end_of_preload_funcs, func)
end

local pack = function(...) return {...} end
EoHS.capture_errors = function (func, ...)
  local traceback
  local arguments = pack (...)
  local results = pack(xpcall (
    function()
      return func(table.unpack (arguments))
    end,
    function(a)
      traceback = debug.traceback()
      return a
    end))
  if results [1] then
    table.remove (results, 1)
    return table.unpack (results)
  else
    EoHS.err (results [2], traceback)
    return
  end
end

EoHS.events = {}
EoHS.event_functions = {}
EoHS.set_simple_event = function(name, unison, synchronized, force_empty_stack, func)
  table.insert(EoHS.event_functions, function ()
    EoHS.suppress_ui_input_during (function()
      EoHS.begin_event(unison, synchronized, force_empty_stack)
      func()
      EoHS.end_event()
    end)
  end)
  table.insert(EoHS.events, {
    name = name,
    first_time_only = "no",
    { "lua", {
      code = [[--EoHS.set_simple_event("]]..name..[[", ...)
EoHS.event_functions[]]..#EoHS.event_functions..[[]()]]
    }},
  })
end

EoHS.filter_func = function(func, after_cleanup)
  return function(...)
    local old_context = EoHS.context
    EoHS.context = {in_event=false, unison=false, synchronized=false, disunified_unit_tables=old_context and old_context.disunified_unit_tables or {}}
    
    -- I've seen some evidence that setting variables inside filter functions may be memory-unsafe, so safeguard against it
    local old_set_variable_forbidden = EoHS.set_variable_forbidden
    --local old_set_variable = wesnoth.set_variable
    local old_set_variable_action = wesnoth.wml_actions.set_variable
    local old_set_variables_action = wesnoth.wml_actions.set_variables
    local trouble = function () EoHS.err ("calling a set-variable function during a filter function") end
    EoHS.set_variable_forbidden = true
    --wesnoth.set_variable = trouble
    wesnoth.wml_actions.set_variable = trouble
    wesnoth.wml_actions.set_variables = trouble
    
    local results = pack(EoHS.capture_errors (func, ...))
    
    --wesnoth.set_variable = old_set_variable
    wesnoth.wml_actions.set_variable = old_set_variable_action
    wesnoth.wml_actions.set_variables = old_set_variables_action
    EoHS.set_variable_forbidden = old_set_variable_forbidden
    
    EoHS.context = old_context
    if after_cleanup then after_cleanup() end
    return table.unpack(results)
  end
end
EoHS.make_filter_func = function(name, func)
  _G[name] = EoHS.filter_func(func)
end

EoHS.deep_copy = function(input)
  if type(input) ~= "table" then return input end
  local tables = {}
  local function process_entry(entry)
    if type(entry) == "table" then
      if tables[entry] == nil then
        tables[entry] = {}
        for k,v in pairs(entry) do
          tables[entry][k] = process_entry(v)
        end
      end
      return tables[entry]
    else
      return entry
    end
  end
  return process_entry(input)
end

EoHS.universal_attack_specials = {}

EoHS.in_campaign = (
  wesnoth.scenario.type ~= "multiplayer" or
  (wesnoth.scenario.mp_settings and (
    (wesnoth.scenario.mp_settings.mp_campaign and wesnoth.scenario.mp_settings.mp_campaign ~= "")
    or string.match(wesnoth.scenario.mp_settings.mp_scenario_name, "World.Conquest")
  ))
)

-- Hack: multiplayer campaigns with no era count as being "era_default".
if EoHS.in_campaign and not
    (wesnoth.scenario.mp_settings and
     wesnoth.scenario.mp_settings.mp_era ~= "era_default") then
  EoHS.replace_alliances_with_era = nil
  EoHS.no_alliances = true
end

-->>)}
