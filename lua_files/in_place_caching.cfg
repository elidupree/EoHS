this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- in_place_caching.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type
local wesnoth,table,string,math,os,debug,wml,filesystem,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,wml,filesystem,EoHS.helper,EoHS._,EoHS,_G,nil

local caches = {}
local in_a_caching_function = false
local pack = function(...) return {...} end

local recent_setting_errors = 0
local cache_id = function(domain)
  -- If they don't have an ID, just do it by table.
  -- Then the caches will only last for the event, but at least they'll last that long.
  local explicit_id = domain["id"]
  if explicit_id then
    if EoHS.context.unison then return explicit_id else return explicit_id.."_disunified_cache" end
  end
  return domain
end
EoHS.clear_temporary_caches = function()
  for k,v in pairs(caches) do if type(k) == "table" then caches[k] = nil end end
  if in_a_caching_function then
    EoHS.debug("It looks like there was an error during a caching function. Resetting some things to try to avoid breaking any more stuff...")
    in_a_caching_function = false
  end
  recent_setting_errors = 0
end

local force_nil = {}

-- Produce a value, possibly by relying on current values,
-- and store it in a cache.
local next_caching_func_id = 1
EoHS.caching_func = function(func)
  local id = next_caching_func_id
  next_caching_func_id = next_caching_func_id + 1
  return function(domain, ...)
    local top_level = false
    if not in_a_caching_function then top_level = true; in_a_caching_function = true end
    local unit_caches = caches[cache_id(domain)] -- TODO can we not rely on that specific varname?
    if not unit_caches then unit_caches = {}; caches[cache_id(domain)] = unit_caches end
    
    local cache_name = id
    for i,argument in EoHS.vararg(...) do
      cache_name = cache_name.."_EoHSInPlaceCacheArg_"..type(argument)..tostring(argument)
    end
      
    local result, was_valid = nil, false
    local cache = unit_caches[cache_name]
    if cache then
      was_valid = true
      
      for k,v in pairs (cache.required_domain_values) do
        local needed = v
        if needed == force_nil then needed = nil end
        if domain [k] ~= needed then
          was_valid = false
          unit_caches[cache_name] = nil
          cache = nil
          break
        end
      end
    end
        
    if was_valid then
      result = cache.result
    else
      cache = {required_domain_values={}}
      unit_caches[cache_name] = cache
      result = pack(func(setmetatable({}, {
        __index = function(unused,k)
          local value = domain [k]
          cache.required_domain_values[k] = (value == nil) and force_nil or value
          return value
        end,
        __newindex = function() EoHS.err("A caching function tried to mutate something") end,
      }), ...))
      for i,r in ipairs(result) do EoHS.make_read_only(r) end
      cache.result = result
    end
    --EoHS.debug("cache call", cache_id(domain), cache_name, was_valid)
    if top_level then in_a_caching_function = false end
    return table.unpack(result)
  end
end
--[[
local cant_write_func = function() EoHS.err("Modifying a read-only variable") end
EoHS.read_only_accessor = function(var)
  if type(var) == "table" then
    for k,v in pairs(var) do var[k] = EoHS.read_only_accessor(v) end
    return setmetatable({}, {
      __index = function(unused,k) return var[k] end,
      __newindex = cant_write_func,
      __len = function() return #var end
    })
  end
  return var
end]]


local cant_write_func = function() EoHS.err("Modifying a read-only variable") end
local cant_write_metatable = {__newindex=cant_write_func}
setmetatable(cant_write_metatable, cant_write_metatable)
EoHS.make_read_only = function(var)
  if type(var) == "table" then
    local metatable = getmetatable(var)
    if metatable and (metatable.__newindex ~= cant_write_func) then
      metatable.__newindex = cant_write_func
      EoHS.make_read_only(metatable)
    else
      setmetatable(var, cant_write_metatable)
    end
    for k,v in pairs(var) do EoHS.make_read_only(v) end
  end
  return var
end

local get_unit_variables_table = function(unit)
  local variables = unit.variables
  if not variables then variables = EoHS.get_subtag(unit, "variables") end
  if not variables then return nil end
  return setmetatable({}, {
    __index = function(unused,k) return variables[k] end,
    __newindex = function(unused,k,v) EoHS.err("Modifying a read-only access to unit variables") end,
  })
end
local force_unit_variables_table = function(unit)
  local variables = unit.variables
  if not variables then variables = EoHS.force_subtag(unit, "variables") end
  return variables
end
EoHS.all_EoHS_unit_variables = {}
local caching_interface = function(cache_table)
  return cache_table --[[setmetatable({}, {
    __index = function(unused,k) return cache_table[k] end,
    __newindex = function(unused,k,v)
      caching_set(cache_table, k, v)
    end,
  })]]
end

--[[
local conversion_table = {
  ["\\"]="/",[","]=".",["{"]="[",["}"]="]",["!"]="?",
}
local reverse_conversion_table = {}; for k,v in pairs(conversion_table) do reverse_conversion_table[v]=k end
EoHS.serialize = function(v)
  local escape = function(s) return string.gsub(s, '[\\,{}!]', function(k) return '\\'..(conversion_table[k] or k) end) end
  if type(v) == "string" or type(v) == "boolean" or type(v) == "number" then
    return type(v)..','..escape(tostring(v))
  elseif type(v) == "table" then
    local result = ""
    local sorted_keys = {}
    for k in pairs(v) do
      if type(k) == "string" then
        table.insert(sorted_keys, k)
      end
    end
    table.sort(sorted_keys)
    local record = function(name, value)
      result = result..'!'..name..'='..EoHS.serialize(value)
    end
    for i,k in ipairs(sorted_keys) do
      record("N"..k,v[k])
    end
    for i,val in ipairs(v) do
      record("",val)
    end
    result = "{"..result.."}"
    --EoHS.debug(v, result, EoHS.deserialize(result))
    return result
  else
    EoHS.err("bad input to EoHS.serialize: "..EoHS.inspect(v))
  end
  --EoHS.assert(EoHS.tags_are_identical(t, EoHS.deserialize(result)), "serialization is buggy: "..EoHS.inspect(t).." became "..EoHS.inspect(result).." and then became "..EoHS.deserialize(result))
end
EoHS.deserialize = function(serialized)
  local unescape = function(s) return string.gsub(s, '\\(.)', function(k) return reverse_conversion_table[k] or k end) end
  local ta = string.match(serialized, "^{(.*)}$")
  if ta then
    local result = {}
    while ta ~= "" do
      local old_ta = ta
      ta = string.gsub(ta, "^!([^!=]-)=(%b{})", function(name, v)
        if name == "" then table.insert(result, EoHS.deserialize(v))
        else result[string.sub(name, 2)] = EoHS.deserialize(v) end
        return ""
      end)
      ta = string.gsub(ta, "^!([^!=]*)=([^!{}]-,[^!{}]*)", function(name, v)
        if name == "" then table.insert(result, EoHS.deserialize(v))
        else result[string.sub(name, 2)] = EoHS.deserialize(v) end
        return ""
      end)
      if old_ta == ta then EoHS.err("bad input to EoHS.deserialize: "..serialized); break end
    end
    if string.len(serialized) < 400 then EoHS.assert(serialized == EoHS.serialize(result), "serialization is buggy: "..EoHS.inspect(serialized).." became "..EoHS.inspect(result).." and then became "..EoHS.inspect(EoHS.serialize(result))) end
    return result
  end
  local t,v = string.match(serialized, "^(.-),(.*)$")
  v = unescape(v)
  if t == "boolean" then return (v == "true")
  elseif t == "number" then return tonumber(v)
  else return v end
end]]

EoHS.get_fake_subtag = function(source, subtag_name)
  if type(source) == "function" then
    return setmetatable({}, {
      __index = function(unused,k) return source(subtag_name.."_"..k) end,
      __newindex = function(unused,k,v) EoHS.err("Modifying a read-only EoHS.get_fake_subtag") end,
    })
  elseif type(source) == "table" then
    return setmetatable({}, {
      --original_table = (getmetatable(source).original_table or source)
      --fake_subtag_path = (getmetatable(source).fake_subtag_path or "") .. subtag_name.."_"
      __index = function(unused,k) return source[subtag_name.."_"..k] end,
      __newindex = function(unused,k,v) source[subtag_name.."_"..k] = v end,
    })
  end
end
--[[EoHS.copy_fake_subtag = function(fake_subtag)
  local original_table = getmetatable(fake_subtag).original_table
  EoHS.assert(original_table, "Trying to copy a whole subtag made from a function, which isn't possible")
end]]
EoHS.get_unit_variables = function(unit)
  return EoHS.get_fake_subtag(get_unit_variables_table(unit), "EoHS")
end
EoHS.force_unit_variables = function(unit)
  return caching_interface(EoHS.get_fake_subtag(force_unit_variables_table(unit), "EoHS"))
end

-- These work on both unit tables and proxy units.
EoHS.get_unit_variable = function(unit, varname)
      EoHS.all_EoHS_unit_variables[varname] = true
  local variables = EoHS.get_unit_variables(unit)
  if variables then return variables[varname] end
end
EoHS.set_unit_variable = function(unit, varname, value)
      EoHS.all_EoHS_unit_variables[varname] = true
  EoHS.force_unit_variables(unit)[varname] = value
end

EoHS.unit_id = function(unit)
  return EoHS.get_unit_variable(unit, "id")
end
EoHS.has_unit_id = function(id)
  return EoHS.has_unit_variable("id", id)
end

-->>)}
